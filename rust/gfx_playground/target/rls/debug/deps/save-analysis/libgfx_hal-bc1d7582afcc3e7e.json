{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1","program":"C:\\Users\\Ollie\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","gfx_hal","C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"serde\"","-C","metadata=bc1d7582afcc3e7e","-C","extra-filename=-bc1d7582afcc3e7e","--out-dir","c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps","--extern","bitflags=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\libbitflags-cdd043d3c0dcb46e.rmeta","--extern","failure=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\libfailure-6946ce892a6bf48b.rmeta","--extern","fxhash=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\libfxhash-e76f9af187d511ef.rmeta","--extern","serde=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\libserde-69ef9a21bf406284.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Ollie\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\libgfx_hal-bc1d7582afcc3e7e.rmeta"},"prelude":{"crate_id":{"name":"gfx_hal","disambiguator":[11546764950421168432,1417597195727257898]},"crate_root":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src","external_crates":[{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12578048494495979596,2047601184299498072]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9458200224090790355,13573932773036415113]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17212932621614837670,6562776948220383497]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[760535750034822653,11118367618612043106]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9863315158332858256,17125058067034963864]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4687805557387852666,9943473115938981341]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11895006708321731812,14562333644307237348]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3795917533932740915,1352930594861700352]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14246119625412523820,1488400038702589601]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[301469929213911528,4015090225475952437]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[2057170103176572375,2047842178592089941]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5373388065014169986,7291481803049279744]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[11217907578908536000,17992819105755382748]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":14,"id":{"name":"bitflags","disambiguator":[17336328471256008964,17756473953899072185]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":15,"id":{"name":"failure","disambiguator":[16082958489181772507,2543350950777697053]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":16,"id":{"name":"failure_derive","disambiguator":[9121599578504755336,3722664137061293418]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":17,"id":{"name":"backtrace","disambiguator":[14961557021144245516,15053753672225175519]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":18,"id":{"name":"rustc_demangle","disambiguator":[2568125709133187267,2480427590452000678]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":19,"id":{"name":"cfg_if","disambiguator":[11332822018376109482,12531163141307769881]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":20,"id":{"name":"serde","disambiguator":[1567256123462627994,18062257089074732831]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","num":21,"id":{"name":"serde_derive","disambiguator":[7626613138503479540,12988256039908973816]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","num":22,"id":{"name":"fxhash","disambiguator":[2073014404531839967,3769455258954630180]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","num":23,"id":{"name":"byteorder","disambiguator":[12512480558661187179,11407372420315354857]}}],"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":0,"byte_end":21395,"line_start":1,"line_end":536,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1767},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":545,"byte_end":552,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"alias_span":null,"name":"Adapter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1700},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":554,"byte_end":565,"line_start":26,"line_end":26,"column_start":14,"column_end":25},"alias_span":null,"name":"AdapterInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1564},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":567,"byte_end":583,"line_start":26,"line_end":26,"column_start":27,"column_end":43},"alias_span":null,"name":"MemoryProperties","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1502},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":585,"byte_end":595,"line_start":26,"line_end":26,"column_start":45,"column_end":55},"alias_span":null,"name":"MemoryType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1453},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":597,"byte_end":609,"line_start":26,"line_end":26,"column_start":57,"column_end":69},"alias_span":null,"name":"MemoryTypeId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":611,"byte_end":625,"line_start":26,"line_end":26,"column_start":71,"column_end":85},"alias_span":null,"name":"PhysicalDevice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":627,"byte_end":640,"line_start":26,"line_end":26,"column_start":87,"column_end":100},"alias_span":null,"name":"QueuePriority","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":667,"byte_end":673,"line_start":28,"line_end":28,"column_start":23,"column_end":29},"alias_span":null,"name":"Device","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":15937},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":695,"byte_end":706,"line_start":29,"line_end":29,"column_start":21,"column_end":32},"alias_span":null,"name":"CommandPool","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":727,"byte_end":741,"line_start":30,"line_end":30,"column_start":20,"column_end":34},"alias_span":null,"name":"DescriptorPool","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":770,"byte_end":780,"line_start":32,"line_end":32,"column_start":5,"column_end":15},"alias_span":null,"name":"Capability","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20436},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":782,"byte_end":794,"line_start":32,"line_end":32,"column_start":17,"column_end":29},"alias_span":null,"name":"CommandQueue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20291},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":796,"byte_end":803,"line_start":32,"line_end":32,"column_start":31,"column_end":38},"alias_span":null,"name":"Compute","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20285},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":805,"byte_end":812,"line_start":32,"line_end":32,"column_start":40,"column_end":47},"alias_span":null,"name":"General","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20288},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":814,"byte_end":822,"line_start":32,"line_end":32,"column_start":49,"column_end":57},"alias_span":null,"name":"Graphics","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1209},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":824,"byte_end":835,"line_start":32,"line_end":32,"column_start":59,"column_end":70},"alias_span":null,"name":"QueueFamily","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20341},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":837,"byte_end":847,"line_start":32,"line_end":32,"column_start":72,"column_end":82},"alias_span":null,"name":"QueueGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20357},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":849,"byte_end":858,"line_start":32,"line_end":32,"column_start":84,"column_end":93},"alias_span":null,"name":"QueueType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20424},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":864,"byte_end":874,"line_start":33,"line_end":33,"column_start":5,"column_end":15},"alias_span":null,"name":"Submission","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":876,"byte_end":884,"line_start":33,"line_end":33,"column_start":17,"column_end":25},"alias_span":null,"name":"Supports","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20294},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":886,"byte_end":894,"line_start":33,"line_end":33,"column_start":27,"column_end":35},"alias_span":null,"name":"Transfer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20802},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":927,"byte_end":939,"line_start":36,"line_end":36,"column_start":5,"column_end":17},"alias_span":null,"name":"AcquireError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20640},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":941,"byte_end":955,"line_start":36,"line_end":36,"column_start":19,"column_end":33},"alias_span":null,"name":"CompositeAlpha","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20615},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":957,"byte_end":968,"line_start":36,"line_end":36,"column_start":35,"column_end":46},"alias_span":null,"name":"PresentMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1362},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":970,"byte_end":977,"line_start":36,"line_end":36,"column_start":48,"column_end":55},"alias_span":null,"name":"Surface","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20547},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":979,"byte_end":998,"line_start":36,"line_end":36,"column_start":57,"column_end":76},"alias_span":null,"name":"SurfaceCapabilities","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1367},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1004,"byte_end":1018,"line_start":37,"line_end":37,"column_start":5,"column_end":19},"alias_span":null,"name":"SwapImageIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1373},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1020,"byte_end":1029,"line_start":37,"line_end":37,"column_start":21,"column_end":30},"alias_span":null,"name":"Swapchain","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":20786},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1031,"byte_end":1046,"line_start":37,"line_end":37,"column_start":32,"column_end":47},"alias_span":null,"name":"SwapchainConfig","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":33905,"byte_end":33906,"line_start":28,"line_end":28,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"ClearValue, AttachmentClear, ImageBlit, ImageResolve","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":2685},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":33933,"byte_end":33946,"line_start":30,"line_end":30,"column_start":5,"column_end":18},"alias_span":null,"name":"ClearColorRaw","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":2697},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":33948,"byte_end":33968,"line_start":30,"line_end":30,"column_start":20,"column_end":40},"alias_span":null,"name":"ClearDepthStencilRaw","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":2705},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":33970,"byte_end":33983,"line_start":30,"line_end":30,"column_start":42,"column_end":55},"alias_span":null,"name":"ClearValueRaw","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":2713},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":33985,"byte_end":34003,"line_start":30,"line_end":30,"column_start":57,"column_end":75},"alias_span":null,"name":"CommandBufferFlags","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":2826},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34009,"byte_end":34037,"line_start":31,"line_end":31,"column_start":5,"column_end":33},"alias_span":null,"name":"CommandBufferInheritanceInfo","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34039,"byte_end":34058,"line_start":31,"line_end":31,"column_start":35,"column_end":54},"alias_span":null,"name":"DescriptorSetOffset","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34060,"byte_end":34080,"line_start":31,"line_end":31,"column_start":56,"column_end":76},"alias_span":null,"name":"IntoRawCommandBuffer","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":2814},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34082,"byte_end":34087,"line_start":31,"line_end":31,"column_start":78,"column_end":83},"alias_span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34091,"byte_end":34099,"line_start":31,"line_end":31,"column_start":87,"column_end":95},"name":"RawLevel","value":"","parent":{"krate":0,"index":99}},{"kind":"Use","ref_id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34105,"byte_end":34121,"line_start":32,"line_end":32,"column_start":5,"column_end":21},"alias_span":null,"name":"RawCommandBuffer","value":"","parent":{"krate":0,"index":99}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":33905,"byte_end":33906,"line_start":28,"line_end":28,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"RenderPassInlineEncoder, RenderPassSecondaryEncoder, SubpassContents, SubpassCommandBuffer","parent":{"krate":0,"index":99}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":33905,"byte_end":33906,"line_start":28,"line_end":28,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"ImageCopy, BufferCopy, BufferImageCopy","parent":{"krate":0,"index":99}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":188539,"byte_end":188540,"line_start":14,"line_end":14,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"ComputePipelineDesc","parent":{"krate":0,"index":988}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":188539,"byte_end":188540,"line_start":14,"line_end":14,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"Descriptor, DescriptorPoolCreateFlags, DescriptorSetIndex, DescriptorSetCopy, DescriptorRangeDesc, DescriptorPool, DescriptorSetWrite, DescriptorSetLayoutBinding","parent":{"krate":0,"index":988}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":188539,"byte_end":188540,"line_start":14,"line_end":14,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"DepthValue, ColorValue, Viewport, GraphicsPipelineDesc, StencilValue, ClearRect, Rect, DepthBias","parent":{"krate":0,"index":988}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":188539,"byte_end":188540,"line_start":14,"line_end":14,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"BufferIndex","parent":{"krate":0,"index":988}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":188539,"byte_end":188540,"line_start":14,"line_end":14,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"Face, Comparison","parent":{"krate":0,"index":988}},{"kind":"Use","ref_id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238808,"byte_end":238818,"line_start":24,"line_end":24,"column_start":28,"column_end":38},"alias_span":null,"name":"Capability","value":"","parent":{"krate":0,"index":1142}},{"kind":"Use","ref_id":{"krate":0,"index":20291},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238820,"byte_end":238827,"line_start":24,"line_end":24,"column_start":40,"column_end":47},"alias_span":null,"name":"Compute","value":"","parent":{"krate":0,"index":1142}},{"kind":"Use","ref_id":{"krate":0,"index":20285},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238829,"byte_end":238836,"line_start":24,"line_end":24,"column_start":49,"column_end":56},"alias_span":null,"name":"General","value":"","parent":{"krate":0,"index":1142}},{"kind":"Use","ref_id":{"krate":0,"index":20288},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238838,"byte_end":238846,"line_start":24,"line_end":24,"column_start":58,"column_end":66},"alias_span":null,"name":"Graphics","value":"","parent":{"krate":0,"index":1142}},{"kind":"Use","ref_id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238848,"byte_end":238856,"line_start":24,"line_end":24,"column_start":68,"column_end":76},"alias_span":null,"name":"Supports","value":"","parent":{"krate":0,"index":1142}},{"kind":"Use","ref_id":{"krate":0,"index":20294},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238858,"byte_end":238866,"line_start":24,"line_end":24,"column_start":78,"column_end":86},"alias_span":null,"name":"Transfer","value":"","parent":{"krate":0,"index":1142}},{"kind":"Use","ref_id":{"krate":0,"index":1209},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238892,"byte_end":238903,"line_start":25,"line_end":25,"column_start":24,"column_end":35},"alias_span":null,"name":"QueueFamily","value":"","parent":{"krate":0,"index":1142}},{"kind":"Use","ref_id":{"krate":0,"index":20300},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238905,"byte_end":238918,"line_start":25,"line_end":25,"column_start":37,"column_end":50},"alias_span":null,"name":"QueueFamilyId","value":"","parent":{"krate":0,"index":1142}},{"kind":"Use","ref_id":{"krate":0,"index":20341},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238920,"byte_end":238930,"line_start":25,"line_end":25,"column_start":52,"column_end":62},"alias_span":null,"name":"QueueGroup","value":"","parent":{"krate":0,"index":1142}},{"kind":"Use","ref_id":{"krate":0,"index":20350},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238932,"byte_end":238938,"line_start":25,"line_end":25,"column_start":64,"column_end":70},"alias_span":null,"name":"Queues","value":"","parent":{"krate":0,"index":1142}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":0,"byte_end":21395,"line_start":1,"line_end":536,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":42},{"krate":0,"index":51},{"krate":0,"index":85},{"krate":0,"index":99},{"krate":0,"index":611},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":802},{"krate":0,"index":860},{"krate":0,"index":895},{"krate":0,"index":916},{"krate":0,"index":947},{"krate":0,"index":988},{"krate":0,"index":1136},{"krate":0,"index":1142},{"krate":0,"index":1304},{"krate":0,"index":1334},{"krate":0,"index":1384},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":20871},{"krate":0,"index":20933},{"krate":0,"index":20892},{"krate":0,"index":20891},{"krate":0,"index":20888},{"krate":0,"index":20886},{"krate":0,"index":20884},{"krate":0,"index":20878},{"krate":0,"index":20876},{"krate":0,"index":20873},{"krate":0,"index":20939},{"krate":0,"index":21004},{"krate":0,"index":21006},{"krate":0,"index":21008},{"krate":0,"index":21010},{"krate":0,"index":21012},{"krate":0,"index":21079},{"krate":0,"index":21082},{"krate":0,"index":21084},{"krate":0,"index":21087},{"krate":0,"index":21089},{"krate":0,"index":21092},{"krate":0,"index":21094},{"krate":0,"index":21097},{"krate":0,"index":21099},{"krate":0,"index":21102},{"krate":0,"index":21105},{"krate":0,"index":21302},{"krate":0,"index":21565},{"krate":0,"index":21564},{"krate":0,"index":21562},{"krate":0,"index":21560},{"krate":0,"index":21557},{"krate":0,"index":21551},{"krate":0,"index":21372},{"krate":0,"index":21569},{"krate":0,"index":21671},{"krate":0,"index":21670},{"krate":0,"index":21668},{"krate":0,"index":21666},{"krate":0,"index":21663},{"krate":0,"index":21660},{"krate":0,"index":21654},{"krate":0,"index":21652},{"krate":0,"index":21646},{"krate":0,"index":21591},{"krate":0,"index":21673},{"krate":0,"index":21737},{"krate":0,"index":21736},{"krate":0,"index":21734},{"krate":0,"index":21732},{"krate":0,"index":21729},{"krate":0,"index":21727},{"krate":0,"index":21725},{"krate":0,"index":21723},{"krate":0,"index":21717},{"krate":0,"index":21678},{"krate":0,"index":1416},{"krate":0,"index":1419},{"krate":0,"index":21739},{"krate":0,"index":21786},{"krate":0,"index":21784},{"krate":0,"index":21782},{"krate":0,"index":21776},{"krate":0,"index":21740},{"krate":0,"index":1447},{"krate":0,"index":1449},{"krate":0,"index":1451},{"krate":0,"index":21788},{"krate":0,"index":21792}],"decl_id":null,"docs":" Low-level graphics abstraction for Rust. Mostly operates on data, not types.\n Designed for use by libraries and higher-level abstractions only.\n","sig":null,"attributes":[{"value":"deny(missing_debug_implementations, missing_docs, unused)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":0,"byte_end":61,"line_start":1,"line_end":1,"column_start":1,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::adapter","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":66},{"krate":0,"index":1453},{"krate":0,"index":1501},{"krate":0,"index":1499},{"krate":0,"index":1497},{"krate":0,"index":1494},{"krate":0,"index":1492},{"krate":0,"index":1486},{"krate":0,"index":1484},{"krate":0,"index":1481},{"krate":0,"index":1475},{"krate":0,"index":1456},{"krate":0,"index":67},{"krate":0,"index":1502},{"krate":0,"index":1563},{"krate":0,"index":1561},{"krate":0,"index":1559},{"krate":0,"index":1556},{"krate":0,"index":1554},{"krate":0,"index":1548},{"krate":0,"index":1505},{"krate":0,"index":1564},{"krate":0,"index":1623},{"krate":0,"index":1621},{"krate":0,"index":1619},{"krate":0,"index":1616},{"krate":0,"index":1610},{"krate":0,"index":1567},{"krate":0,"index":69},{"krate":0,"index":1625},{"krate":0,"index":1698},{"krate":0,"index":1696},{"krate":0,"index":1694},{"krate":0,"index":1692},{"krate":0,"index":1686},{"krate":0,"index":1641},{"krate":0,"index":1700},{"krate":0,"index":1765},{"krate":0,"index":1763},{"krate":0,"index":1761},{"krate":0,"index":1758},{"krate":0,"index":1752},{"krate":0,"index":1705},{"krate":0,"index":1767},{"krate":0,"index":1772},{"krate":0,"index":78}],"decl_id":null,"docs":" Physical devices and adapters.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":22139,"byte_end":22152,"line_start":18,"line_end":18,"column_start":10,"column_end":23},"name":"QueuePriority","qualname":"::adapter::QueuePriority","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Scheduling hint for devices about the priority of a queue.  Values range from `0.0` (low) to\n `1.0` (high).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1453},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":22360,"byte_end":22372,"line_start":23,"line_end":23,"column_start":12,"column_end":24},"name":"MemoryTypeId","qualname":"::adapter::MemoryTypeId","value":"","parent":null,"children":[],"decl_id":null,"docs":" A strongly-typed index to a particular `MemoryType`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1502},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":22666,"byte_end":22676,"line_start":34,"line_end":34,"column_start":12,"column_end":22},"name":"MemoryType","qualname":"::adapter::MemoryType","value":"MemoryType { properties, heap_index }","parent":null,"children":[{"krate":0,"index":1503},{"krate":0,"index":1504}],"decl_id":null,"docs":" A description for a single chunk of memory in a heap.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1503},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":22810,"byte_end":22820,"line_start":37,"line_end":37,"column_start":9,"column_end":19},"name":"properties","qualname":"::adapter::MemoryType::properties","value":"memory::Properties","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Properties of the associated memory, such as synchronization\n properties or whether it's on the CPU or GPU.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1504},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":22917,"byte_end":22927,"line_start":39,"line_end":39,"column_start":9,"column_end":19},"name":"heap_index","qualname":"::adapter::MemoryType::heap_index","value":"usize","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Index to the underlying memory heap in `Gpu::memory_heaps`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1564},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":23120,"byte_end":23136,"line_start":45,"line_end":45,"column_start":12,"column_end":28},"name":"MemoryProperties","qualname":"::adapter::MemoryProperties","value":"MemoryProperties { memory_types, memory_heaps }","parent":null,"children":[{"krate":0,"index":1565},{"krate":0,"index":1566}],"decl_id":null,"docs":" Types of memory supported by this adapter and available memory.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1565},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":23270,"byte_end":23282,"line_start":48,"line_end":48,"column_start":9,"column_end":21},"name":"memory_types","qualname":"::adapter::MemoryProperties::memory_types","value":"std::vec::Vec<adapter::MemoryType>","parent":{"krate":0,"index":1564},"children":[],"decl_id":null,"docs":" Each memory type is associated with one heap of `memory_heaps`.\n Multiple types can point to the same heap.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1566},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":23356,"byte_end":23368,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"name":"memory_heaps","qualname":"::adapter::MemoryProperties::memory_heaps","value":"std::vec::Vec<u64>","parent":{"krate":0,"index":1564},"children":[],"decl_id":null,"docs":" Memory heaps with their size in bytes.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":23483,"byte_end":23497,"line_start":54,"line_end":54,"column_start":11,"column_end":25},"name":"PhysicalDevice","qualname":"::adapter::PhysicalDevice","value":"PhysicalDevice<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" Represents a physical device (such as a GPU) capable of supporting the given backend.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":24419,"byte_end":24423,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"name":"open","qualname":"::adapter::PhysicalDevice::open","value":"fn (&self, families: &[(&B::QueueFamily, &[QueuePriority])], requested_features: Features) -> Result<Gpu<B>, DeviceCreationError>","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Create a new logical device with the requested features. If `requested_features` is\n empty (e.g. through `Features::empty()`) then only the core features are supported.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":24637,"byte_end":24654,"line_start":84,"line_end":84,"column_start":8,"column_end":25},"name":"format_properties","qualname":"::adapter::PhysicalDevice::format_properties","value":"fn (&self, format: Option<format::Format>) -> format::Properties","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Fetch details for a particular format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":24778,"byte_end":24801,"line_start":87,"line_end":87,"column_start":8,"column_end":31},"name":"image_format_properties","qualname":"::adapter::PhysicalDevice::image_format_properties","value":"fn (&self, format: format::Format, dimensions: u8, tiling: image::Tiling, usage: image::Usage, view_caps: image::ViewCapabilities) -> Option<image::FormatProperties>","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Fetch details for a particular image format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":25097,"byte_end":25114,"line_start":97,"line_end":97,"column_start":8,"column_end":25},"name":"memory_properties","qualname":"::adapter::PhysicalDevice::memory_properties","value":"fn (&self) -> MemoryProperties","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Fetch details for the memory regions provided by the device.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":25259,"byte_end":25267,"line_start":101,"line_end":101,"column_start":8,"column_end":16},"name":"features","qualname":"::adapter::PhysicalDevice::features","value":"fn (&self) -> Features","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Returns the features of this `Device`. This usually depends on the graphics API being\n used.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":25350,"byte_end":25356,"line_start":104,"line_end":104,"column_start":8,"column_end":14},"name":"limits","qualname":"::adapter::PhysicalDevice::limits","value":"fn (&self) -> Limits","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Returns the resource limits of this `Device`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":25436,"byte_end":25450,"line_start":107,"line_end":107,"column_start":8,"column_end":22},"name":"is_valid_cache","qualname":"::adapter::PhysicalDevice::is_valid_cache","value":"fn (&self, _cache: &[u8]) -> bool","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Check cache compatibility with the `Device`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1626},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":25684,"byte_end":25689,"line_start":117,"line_end":117,"column_start":5,"column_end":10},"name":"Other","qualname":"::adapter::DeviceType::Other","value":"DeviceType::Other","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" Other\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1629},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":25718,"byte_end":25731,"line_start":119,"line_end":119,"column_start":5,"column_end":18},"name":"IntegratedGpu","qualname":"::adapter::DeviceType::IntegratedGpu","value":"DeviceType::IntegratedGpu","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" Integrated\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1632},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":25758,"byte_end":25769,"line_start":121,"line_end":121,"column_start":5,"column_end":16},"name":"DiscreteGpu","qualname":"::adapter::DeviceType::DiscreteGpu","value":"DeviceType::DiscreteGpu","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" Discrete\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1635},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":25804,"byte_end":25814,"line_start":123,"line_end":123,"column_start":5,"column_end":15},"name":"VirtualGpu","qualname":"::adapter::DeviceType::VirtualGpu","value":"DeviceType::VirtualGpu","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" Virtual / Hosted\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1638},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":25857,"byte_end":25860,"line_start":125,"line_end":125,"column_start":5,"column_end":8},"name":"Cpu","qualname":"::adapter::DeviceType::Cpu","value":"DeviceType::Cpu","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" Cpu / Software Rendering\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1625},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":25653,"byte_end":25663,"line_start":115,"line_end":115,"column_start":10,"column_end":20},"name":"DeviceType","qualname":"::adapter::DeviceType","value":"DeviceType::{Other, IntegratedGpu, DiscreteGpu, VirtualGpu, Cpu}","parent":null,"children":[{"krate":0,"index":1626},{"krate":0,"index":1629},{"krate":0,"index":1632},{"krate":0,"index":1635},{"krate":0,"index":1638}],"decl_id":null,"docs":" Supported physical device types\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1700},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":26020,"byte_end":26031,"line_start":131,"line_end":131,"column_start":12,"column_end":23},"name":"AdapterInfo","qualname":"::adapter::AdapterInfo","value":"AdapterInfo { name, vendor, device, device_type }","parent":null,"children":[{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704}],"decl_id":null,"docs":" Metadata about a backend adapter.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":26063,"byte_end":26067,"line_start":133,"line_end":133,"column_start":9,"column_end":13},"name":"name","qualname":"::adapter::AdapterInfo::name","value":"std::string::String","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":" Adapter name\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1702},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":26122,"byte_end":26128,"line_start":135,"line_end":135,"column_start":9,"column_end":15},"name":"vendor","qualname":"::adapter::AdapterInfo::vendor","value":"usize","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":" Vendor PCI id of the adapter\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1703},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":26175,"byte_end":26181,"line_start":137,"line_end":137,"column_start":9,"column_end":15},"name":"device","qualname":"::adapter::AdapterInfo::device","value":"usize","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":" PCI id of the adapter\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1704},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":26221,"byte_end":26232,"line_start":139,"line_end":139,"column_start":9,"column_end":20},"name":"device_type","qualname":"::adapter::AdapterInfo::device_type","value":"adapter::DeviceType","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":" Type of device\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1767},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":26673,"byte_end":26680,"line_start":149,"line_end":149,"column_start":12,"column_end":19},"name":"Adapter","qualname":"::adapter::Adapter","value":"Adapter { info, physical_device, queue_families }","parent":null,"children":[{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771}],"decl_id":null,"docs":" The list of `Adapter` instances is obtained by calling `Instance::enumerate_adapters()`.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1769},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":26751,"byte_end":26755,"line_start":151,"line_end":151,"column_start":9,"column_end":13},"name":"info","qualname":"::adapter::Adapter::info","value":"adapter::AdapterInfo","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" General information about this adapter.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1770},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":26810,"byte_end":26825,"line_start":153,"line_end":153,"column_start":9,"column_end":24},"name":"physical_device","qualname":"::adapter::Adapter::physical_device","value":"<B as Backend>::PhysicalDevice","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" Actual physical device.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1771},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":26904,"byte_end":26918,"line_start":155,"line_end":155,"column_start":9,"column_end":23},"name":"queue_families","qualname":"::adapter::Adapter::queue_families","value":"std::vec::Vec<<B as Backend>::QueueFamily>","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" Queue families supported by this adapter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":27750,"byte_end":27759,"line_start":180,"line_end":180,"column_start":12,"column_end":21},"name":"open_with","qualname":"<Adapter<B>>::open_with","value":"fn <F, C> (&self, count: usize, selector: F) -> Result<(B::Device, QueueGroup<B, C>), DeviceCreationError>","parent":null,"children":[],"decl_id":null,"docs":" Open the physical device with `count` queues from some active queue family. The family is\n the first that both provides the capability `C`, supports at least `count` queues, and for\n which `selector` returns true.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"buffer","qualname":"::buffer","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":1775},{"krate":0,"index":1790},{"krate":0,"index":1795},{"krate":0,"index":1788},{"krate":0,"index":1786},{"krate":0,"index":1783},{"krate":0,"index":1781},{"krate":0,"index":93},{"krate":0,"index":1798},{"krate":0,"index":1813},{"krate":0,"index":1818},{"krate":0,"index":1811},{"krate":0,"index":1809},{"krate":0,"index":1806},{"krate":0,"index":1804},{"krate":0,"index":95},{"krate":0,"index":1821},{"krate":0,"index":1883},{"krate":0,"index":1842},{"krate":0,"index":1841},{"krate":0,"index":1838},{"krate":0,"index":1836},{"krate":0,"index":1834},{"krate":0,"index":1828},{"krate":0,"index":1826},{"krate":0,"index":1823},{"krate":0,"index":1889},{"krate":0,"index":1902},{"krate":0,"index":1904},{"krate":0,"index":1906},{"krate":0,"index":1908},{"krate":0,"index":1910},{"krate":0,"index":1925},{"krate":0,"index":1928},{"krate":0,"index":1930},{"krate":0,"index":1933},{"krate":0,"index":1935},{"krate":0,"index":1938},{"krate":0,"index":1940},{"krate":0,"index":1943},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1951},{"krate":0,"index":97},{"krate":0,"index":1992},{"krate":0,"index":2054},{"krate":0,"index":2013},{"krate":0,"index":2012},{"krate":0,"index":2009},{"krate":0,"index":2007},{"krate":0,"index":2005},{"krate":0,"index":1999},{"krate":0,"index":1997},{"krate":0,"index":1994},{"krate":0,"index":2060},{"krate":0,"index":2076},{"krate":0,"index":2078},{"krate":0,"index":2080},{"krate":0,"index":2082},{"krate":0,"index":2084},{"krate":0,"index":2102},{"krate":0,"index":2105},{"krate":0,"index":2107},{"krate":0,"index":2110},{"krate":0,"index":2112},{"krate":0,"index":2115},{"krate":0,"index":2117},{"krate":0,"index":2120},{"krate":0,"index":2122},{"krate":0,"index":2125},{"krate":0,"index":2128},{"krate":0,"index":2178},{"krate":0,"index":2184}],"decl_id":null,"docs":" Memory buffers.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":28986,"byte_end":28992,"line_start":12,"line_end":12,"column_start":10,"column_end":16},"name":"Offset","qualname":"::buffer::Offset","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" An offset inside a buffer, in bytes.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":29028,"byte_end":29033,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"State","qualname":"::buffer::State","value":"Access","parent":null,"children":[],"decl_id":null,"docs":" Buffer state.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1776},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":29225,"byte_end":29236,"line_start":22,"line_end":22,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::buffer::CreationError::OutOfMemory","value":"CreationError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":1775},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":29193,"byte_end":29220,"line_start":21,"line_end":21,"column_start":5,"column_end":32}}]},{"kind":"StructVariant","id":{"krate":0,"index":1779},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":29467,"byte_end":29483,"line_start":28,"line_end":28,"column_start":5,"column_end":21},"name":"UnsupportedUsage","qualname":"::buffer::CreationError::UnsupportedUsage","value":"CreationError::UnsupportedUsage { usage }","parent":{"krate":0,"index":1775},"children":[],"decl_id":null,"docs":" Requested buffer usage is not supported.","sig":null,"attributes":[{"value":"fail(display = \"Buffer usage unsupported ({:?}).\", usage)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":29402,"byte_end":29462,"line_start":27,"line_end":27,"column_start":5,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":1775},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":29128,"byte_end":29141,"line_start":19,"line_end":19,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::buffer::CreationError","value":"CreationError::{OutOfMemory, UnsupportedUsage}","parent":null,"children":[{"krate":0,"index":1776},{"krate":0,"index":1779}],"decl_id":null,"docs":" Error creating a buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1799},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":29916,"byte_end":29927,"line_start":45,"line_end":45,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::buffer::ViewCreationError::OutOfMemory","value":"ViewCreationError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":1798},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":29884,"byte_end":29911,"line_start":44,"line_end":44,"column_start":5,"column_end":32}}]},{"kind":"StructVariant","id":{"krate":0,"index":1802},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30072,"byte_end":30089,"line_start":49,"line_end":49,"column_start":5,"column_end":22},"name":"UnsupportedFormat","qualname":"::buffer::ViewCreationError::UnsupportedFormat","value":"ViewCreationError::UnsupportedFormat { format }","parent":{"krate":0,"index":1798},"children":[],"decl_id":null,"docs":" Buffer view format is not supported.\n","sig":null,"attributes":[{"value":"fail(display = \"Buffer view format unsupported ({:?}).\", format)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30000,"byte_end":30067,"line_start":48,"line_end":48,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":1798},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":29815,"byte_end":29832,"line_start":42,"line_end":42,"column_start":10,"column_end":27},"name":"ViewCreationError","qualname":"::buffer::ViewCreationError","value":"ViewCreationError::{OutOfMemory, UnsupportedFormat}","parent":null,"children":[{"krate":0,"index":1799},{"krate":0,"index":1802}],"decl_id":null,"docs":" Error creating a buffer view.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1821},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30479,"byte_end":30484,"line_start":64,"line_end":64,"column_start":16,"column_end":21},"name":"Usage","qualname":"::buffer::Usage","value":"Usage {  }","parent":null,"children":[{"krate":0,"index":1822}],"decl_id":null,"docs":" Buffer usage flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1911},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30518,"byte_end":30530,"line_start":66,"line_end":66,"column_start":15,"column_end":27},"name":"TRANSFER_SRC","qualname":"::buffer::Usage::TRANSFER_SRC","value":"Usage","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1912},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30565,"byte_end":30577,"line_start":68,"line_end":68,"column_start":15,"column_end":27},"name":"TRANSFER_DST","qualname":"::buffer::Usage::TRANSFER_DST","value":"Usage","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1913},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30611,"byte_end":30624,"line_start":70,"line_end":70,"column_start":15,"column_end":28},"name":"UNIFORM_TEXEL","qualname":"::buffer::Usage::UNIFORM_TEXEL","value":"Usage","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1914},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30658,"byte_end":30671,"line_start":72,"line_end":72,"column_start":15,"column_end":28},"name":"STORAGE_TEXEL","qualname":"::buffer::Usage::STORAGE_TEXEL","value":"Usage","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1915},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30705,"byte_end":30712,"line_start":74,"line_end":74,"column_start":15,"column_end":22},"name":"UNIFORM","qualname":"::buffer::Usage::UNIFORM","value":"Usage","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1916},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30747,"byte_end":30754,"line_start":76,"line_end":76,"column_start":15,"column_end":22},"name":"STORAGE","qualname":"::buffer::Usage::STORAGE","value":"Usage","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1917},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30789,"byte_end":30794,"line_start":78,"line_end":78,"column_start":15,"column_end":20},"name":"INDEX","qualname":"::buffer::Usage::INDEX","value":"Usage","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1918},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30829,"byte_end":30835,"line_start":80,"line_end":80,"column_start":15,"column_end":21},"name":"VERTEX","qualname":"::buffer::Usage::VERTEX","value":"Usage","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1919},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30870,"byte_end":30878,"line_start":82,"line_end":82,"column_start":15,"column_end":23},"name":"INDIRECT","qualname":"::buffer::Usage::INDIRECT","value":"Usage","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30988,"byte_end":31000,"line_start":88,"line_end":88,"column_start":12,"column_end":24},"name":"can_transfer","qualname":"<Usage>::can_transfer","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the buffer can be used in transfer operations.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1992},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":31278,"byte_end":31284,"line_start":98,"line_end":98,"column_start":16,"column_end":22},"name":"Access","qualname":"::buffer::Access","value":"Access {  }","parent":null,"children":[{"krate":0,"index":1993}],"decl_id":null,"docs":" Buffer access flags.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2085},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":31368,"byte_end":31389,"line_start":100,"line_end":100,"column_start":15,"column_end":36},"name":"INDIRECT_COMMAND_READ","qualname":"::buffer::Access::INDIRECT_COMMAND_READ","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" Read commands instruction for indirect execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2086},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":31689,"byte_end":31706,"line_start":105,"line_end":105,"column_start":15,"column_end":32},"name":"INDEX_BUFFER_READ","qualname":"::buffer::Access::INDEX_BUFFER_READ","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" Read index values for indexed draw commands.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2087},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":31901,"byte_end":31919,"line_start":108,"line_end":108,"column_start":15,"column_end":33},"name":"VERTEX_BUFFER_READ","qualname":"::buffer::Access::VERTEX_BUFFER_READ","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" Read vertices from vertex buffer for draw commands in the [`VERTEX_INPUT`](\n ../pso/struct.PipelineStage.html#associatedconstant.VERTEX_INPUT) stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2088},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":31953,"byte_end":31973,"line_start":110,"line_end":110,"column_start":15,"column_end":35},"name":"CONSTANT_BUFFER_READ","qualname":"::buffer::Access::CONSTANT_BUFFER_READ","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2089},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32007,"byte_end":32018,"line_start":112,"line_end":112,"column_start":15,"column_end":26},"name":"SHADER_READ","qualname":"::buffer::Access::SHADER_READ","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2090},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32053,"byte_end":32065,"line_start":114,"line_end":114,"column_start":15,"column_end":27},"name":"SHADER_WRITE","qualname":"::buffer::Access::SHADER_WRITE","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2091},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32100,"byte_end":32113,"line_start":116,"line_end":116,"column_start":15,"column_end":28},"name":"TRANSFER_READ","qualname":"::buffer::Access::TRANSFER_READ","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2092},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32149,"byte_end":32163,"line_start":118,"line_end":118,"column_start":15,"column_end":29},"name":"TRANSFER_WRITE","qualname":"::buffer::Access::TRANSFER_WRITE","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2093},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32200,"byte_end":32209,"line_start":120,"line_end":120,"column_start":15,"column_end":24},"name":"HOST_READ","qualname":"::buffer::Access::HOST_READ","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2094},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32246,"byte_end":32256,"line_start":122,"line_end":122,"column_start":15,"column_end":25},"name":"HOST_WRITE","qualname":"::buffer::Access::HOST_WRITE","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2095},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32293,"byte_end":32304,"line_start":124,"line_end":124,"column_start":15,"column_end":26},"name":"MEMORY_READ","qualname":"::buffer::Access::MEMORY_READ","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2096},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32341,"byte_end":32353,"line_start":126,"line_end":126,"column_start":15,"column_end":27},"name":"MEMORY_WRITE","qualname":"::buffer::Access::MEMORY_WRITE","value":"Access","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2178},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32599,"byte_end":32614,"line_start":135,"line_end":135,"column_start":12,"column_end":27},"name":"IndexBufferView","qualname":"::buffer::IndexBufferView","value":"IndexBufferView { buffer, offset, index_type }","parent":null,"children":[{"krate":0,"index":2181},{"krate":0,"index":2182},{"krate":0,"index":2183}],"decl_id":null,"docs":" Index buffer view for `bind_index_buffer`.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2181},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32669,"byte_end":32675,"line_start":137,"line_end":137,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer::IndexBufferView::buffer","value":"&'a <B as Backend>::Buffer","parent":{"krate":0,"index":2178},"children":[],"decl_id":null,"docs":" The buffer to bind.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2182},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32748,"byte_end":32754,"line_start":139,"line_end":139,"column_start":9,"column_end":15},"name":"offset","qualname":"::buffer::IndexBufferView::offset","value":"u64","parent":{"krate":0,"index":2178},"children":[],"decl_id":null,"docs":" The offset into the buffer to start at.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2183},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":32826,"byte_end":32836,"line_start":141,"line_end":141,"column_start":9,"column_end":19},"name":"index_type","qualname":"::buffer::IndexBufferView::index_type","value":"IndexType","parent":{"krate":0,"index":2178},"children":[],"decl_id":null,"docs":" The type of the table elements (`u16` or `u32`).\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"command","qualname":"::command","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":133},{"krate":0,"index":220},{"krate":0,"index":339},{"krate":0,"index":490},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":3077},{"krate":0,"index":3078},{"krate":0,"index":543},{"krate":0,"index":3080},{"krate":0,"index":3081},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":3083},{"krate":0,"index":3084},{"krate":0,"index":546},{"krate":0,"index":3086},{"krate":0,"index":3087},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":552},{"krate":0,"index":3089},{"krate":0,"index":3097},{"krate":0,"index":556},{"krate":0,"index":563},{"krate":0,"index":569},{"krate":0,"index":575},{"krate":0,"index":579},{"krate":0,"index":583},{"krate":0,"index":587},{"krate":0,"index":591},{"krate":0,"index":601}],"decl_id":null,"docs":" Command buffers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\compute.rs","byte_start":40428,"byte_end":40449,"line_start":12,"line_end":12,"column_start":19,"column_end":40},"name":"bind_compute_pipeline","qualname":"<CommandBuffer<B, C, S, L>>::bind_compute_pipeline","value":"fn (&mut self, pipeline: &B::ComputePipeline) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\compute.rs","byte_start":40637,"byte_end":40665,"line_start":17,"line_end":17,"column_start":19,"column_end":47},"name":"bind_compute_descriptor_sets","qualname":"<CommandBuffer<B, C, S, L>>::bind_compute_descriptor_sets","value":"fn <I, J> (&mut self, layout: &B::PipelineLayout, first_set: usize, sets: I, offsets: J) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\compute.rs","byte_start":41135,"byte_end":41143,"line_start":34,"line_end":34,"column_start":19,"column_end":27},"name":"dispatch","qualname":"<CommandBuffer<B, C, S, L>>::dispatch","value":"fn (&mut self, count: WorkGroupCount) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\compute.rs","byte_start":41307,"byte_end":41324,"line_start":39,"line_end":39,"column_start":19,"column_end":36},"name":"dispatch_indirect","qualname":"<CommandBuffer<B, C, S, L>>::dispatch_indirect","value":"fn (&mut self, buffer: &B::Buffer, offset: Offset) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\compute.rs","byte_start":41519,"byte_end":41541,"line_start":44,"line_end":44,"column_start":19,"column_end":41},"name":"push_compute_constants","qualname":"<CommandBuffer<B, C, S, L>>::push_compute_constants","value":"fn (&mut self, layout: &B::PipelineLayout, offset: u32, constants: &[u32]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2189},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":42454,"byte_end":42459,"line_start":19,"line_end":19,"column_start":5,"column_end":10},"name":"Float","qualname":"::command::graphics::ClearColor::Float","value":"ClearColor::Float(pso::ColorValue)","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Standard floating-point `vec4` color\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2192},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":42531,"byte_end":42534,"line_start":21,"line_end":21,"column_start":5,"column_end":8},"name":"Int","qualname":"::command::graphics::ClearColor::Int","value":"ClearColor::Int([i32; 4])","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Integer vector to clear `ivec4` targets.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2196},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":42604,"byte_end":42608,"line_start":23,"line_end":23,"column_start":5,"column_end":9},"name":"Uint","qualname":"::command::graphics::ClearColor::Uint","value":"ClearColor::Uint([u32; 4])","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Unsigned int vector to clear `uvec4` targets.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2188},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":42392,"byte_end":42402,"line_start":17,"line_end":17,"column_start":10,"column_end":20},"name":"ClearColor","qualname":"::command::graphics::ClearColor","value":"ClearColor::{Float, Int, Uint}","parent":null,"children":[{"krate":0,"index":2189},{"krate":0,"index":2192},{"krate":0,"index":2196}],"decl_id":null,"docs":" A universal clear color supporting integer formats\n as well as the standard floating-point.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2301},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":44080,"byte_end":44097,"line_start":79,"line_end":79,"column_start":12,"column_end":29},"name":"ClearDepthStencil","qualname":"::command::graphics::ClearDepthStencil","value":"","parent":null,"children":[],"decl_id":null,"docs":" Depth-stencil target clear values.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2347},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":44573,"byte_end":44578,"line_start":95,"line_end":95,"column_start":5,"column_end":10},"name":"Color","qualname":"::command::graphics::ClearValue::Color","value":"ClearValue::Color(ClearColor)","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2350},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":44604,"byte_end":44616,"line_start":97,"line_end":97,"column_start":5,"column_end":17},"name":"DepthStencil","qualname":"::command::graphics::ClearValue::DepthStencil","value":"ClearValue::DepthStencil(ClearDepthStencil)","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2346},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":44548,"byte_end":44558,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"name":"ClearValue","qualname":"::command::graphics::ClearValue","value":"ClearValue::{Color, DepthStencil}","parent":null,"children":[{"krate":0,"index":2347},{"krate":0,"index":2350}],"decl_id":null,"docs":" General clear values for attachments (color or depth-stencil).\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2413},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":45226,"byte_end":45231,"line_start":118,"line_end":118,"column_start":5,"column_end":10},"name":"Color","qualname":"::command::graphics::AttachmentClear::Color","value":"AttachmentClear::Color { index, value }","parent":{"krate":0,"index":2412},"children":[],"decl_id":null,"docs":" Clear color attachment.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2416},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":45425,"byte_end":45437,"line_start":125,"line_end":125,"column_start":5,"column_end":17},"name":"DepthStencil","qualname":"::command::graphics::AttachmentClear::DepthStencil","value":"AttachmentClear::DepthStencil { depth, stencil }","parent":{"krate":0,"index":2412},"children":[],"decl_id":null,"docs":" Clear depth-stencil attachment.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2412},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":45172,"byte_end":45187,"line_start":116,"line_end":116,"column_start":10,"column_end":25},"name":"AttachmentClear","qualname":"::command::graphics::AttachmentClear","value":"AttachmentClear::{Color, DepthStencil}","parent":null,"children":[{"krate":0,"index":2413},{"krate":0,"index":2416}],"decl_id":null,"docs":" Attachment clear description for the current subpass.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2558},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":45834,"byte_end":45846,"line_start":138,"line_end":138,"column_start":12,"column_end":24},"name":"ImageResolve","qualname":"::command::graphics::ImageResolve","value":"ImageResolve { src_subresource, src_offset, dst_subresource, dst_offset, extent }","parent":null,"children":[{"krate":0,"index":2559},{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":2562},{"krate":0,"index":2563}],"decl_id":null,"docs":" Parameters for an image resolve operation,\n where a multi-sampled image is copied into a single-sampled\n image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2559},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":45890,"byte_end":45905,"line_start":140,"line_end":140,"column_start":9,"column_end":24},"name":"src_subresource","qualname":"::command::graphics::ImageResolve::src_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":" Source image and layers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2560},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":45970,"byte_end":45980,"line_start":142,"line_end":142,"column_start":9,"column_end":19},"name":"src_offset","qualname":"::command::graphics::ImageResolve::src_offset","value":"image::Offset","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":" Source image offset.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2561},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":46043,"byte_end":46058,"line_start":144,"line_end":144,"column_start":9,"column_end":24},"name":"dst_subresource","qualname":"::command::graphics::ImageResolve::dst_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":" Destination image and layers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2562},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":46128,"byte_end":46138,"line_start":146,"line_end":146,"column_start":9,"column_end":19},"name":"dst_offset","qualname":"::command::graphics::ImageResolve::dst_offset","value":"image::Offset","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":" Destination image offset.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2563},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":46185,"byte_end":46191,"line_start":148,"line_end":148,"column_start":9,"column_end":15},"name":"extent","qualname":"::command::graphics::ImageResolve::extent","value":"image::Extent","parent":{"krate":0,"index":2558},"children":[],"decl_id":null,"docs":" Image extent.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2623},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":46447,"byte_end":46456,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"ImageBlit","qualname":"::command::graphics::ImageBlit","value":"ImageBlit { src_subresource, src_bounds, dst_subresource, dst_bounds }","parent":null,"children":[{"krate":0,"index":2624},{"krate":0,"index":2625},{"krate":0,"index":2626},{"krate":0,"index":2627}],"decl_id":null,"docs":" Parameters for an image blit operation, where a portion of one image\n is copied into another, possibly with scaling and filtering.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2624},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":46500,"byte_end":46515,"line_start":157,"line_end":157,"column_start":9,"column_end":24},"name":"src_subresource","qualname":"::command::graphics::ImageBlit::src_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":2623},"children":[],"decl_id":null,"docs":" Source image and layers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2625},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":46580,"byte_end":46590,"line_start":159,"line_end":159,"column_start":9,"column_end":19},"name":"src_bounds","qualname":"::command::graphics::ImageBlit::src_bounds","value":"std::ops::Range<image::Offset>","parent":{"krate":0,"index":2623},"children":[],"decl_id":null,"docs":" Source image bounds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2626},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":46660,"byte_end":46675,"line_start":161,"line_end":161,"column_start":9,"column_end":24},"name":"dst_subresource","qualname":"::command::graphics::ImageBlit::dst_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":2623},"children":[],"decl_id":null,"docs":" Destination image and layers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2627},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":46745,"byte_end":46755,"line_start":163,"line_end":163,"column_start":9,"column_end":19},"name":"dst_bounds","qualname":"::command::graphics::ImageBlit::dst_bounds","value":"std::ops::Range<image::Offset>","parent":{"krate":0,"index":2623},"children":[],"decl_id":null,"docs":" Destination image bounds.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":46956,"byte_end":46967,"line_start":168,"line_end":168,"column_start":19,"column_end":30},"name":"clear_image","qualname":"<CommandBuffer<B, C, S, L>>::clear_image","value":"fn <T> (&mut self, image: &B::Image, layout: image::Layout, color: ClearColor, depth_stencil: ClearDepthStencil, subresource_ranges: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":47506,"byte_end":47523,"line_start":189,"line_end":189,"column_start":19,"column_end":36},"name":"bind_index_buffer","qualname":"<CommandBuffer<B, C, S, L>>::bind_index_buffer","value":"fn (&mut self, ibv: buffer::IndexBufferView<B>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":47704,"byte_end":47723,"line_start":194,"line_end":194,"column_start":19,"column_end":38},"name":"bind_vertex_buffers","qualname":"<CommandBuffer<B, C, S, L>>::bind_vertex_buffers","value":"fn <I, T> (&mut self, first_binding: pso::BufferIndex, buffers: I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":48040,"byte_end":48062,"line_start":203,"line_end":203,"column_start":19,"column_end":41},"name":"bind_graphics_pipeline","qualname":"<CommandBuffer<B, C, S, L>>::bind_graphics_pipeline","value":"fn (&mut self, pipeline: &B::GraphicsPipeline) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":48252,"byte_end":48281,"line_start":208,"line_end":208,"column_start":19,"column_end":48},"name":"bind_graphics_descriptor_sets","qualname":"<CommandBuffer<B, C, S, L>>::bind_graphics_descriptor_sets","value":"fn <I, J> (&mut self, layout: &B::PipelineLayout, first_set: usize, sets: I, offsets: J) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":48752,"byte_end":48765,"line_start":225,"line_end":225,"column_start":19,"column_end":32},"name":"set_viewports","qualname":"<CommandBuffer<B, C, S, L>>::set_viewports","value":"fn <T> (&mut self, first_viewport: u32, viewports: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":49048,"byte_end":49060,"line_start":234,"line_end":234,"column_start":19,"column_end":31},"name":"set_scissors","qualname":"<CommandBuffer<B, C, S, L>>::set_scissors","value":"fn <T> (&mut self, first_scissor: u32, scissors: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":49334,"byte_end":49355,"line_start":243,"line_end":243,"column_start":19,"column_end":40},"name":"set_stencil_reference","qualname":"<CommandBuffer<B, C, S, L>>::set_stencil_reference","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":49561,"byte_end":49582,"line_start":248,"line_end":248,"column_start":19,"column_end":40},"name":"set_stencil_read_mask","qualname":"<CommandBuffer<B, C, S, L>>::set_stencil_read_mask","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":49788,"byte_end":49810,"line_start":253,"line_end":253,"column_start":19,"column_end":41},"name":"set_stencil_write_mask","qualname":"<CommandBuffer<B, C, S, L>>::set_stencil_write_mask","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":50017,"byte_end":50036,"line_start":258,"line_end":258,"column_start":19,"column_end":38},"name":"set_blend_constants","qualname":"<CommandBuffer<B, C, S, L>>::set_blend_constants","value":"fn (&mut self, cv: pso::ColorValue) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":50206,"byte_end":50222,"line_start":263,"line_end":263,"column_start":19,"column_end":35},"name":"set_depth_bounds","qualname":"<CommandBuffer<B, C, S, L>>::set_depth_bounds","value":"fn (&mut self, bounds: Range<f32>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":50392,"byte_end":50406,"line_start":268,"line_end":268,"column_start":19,"column_end":33},"name":"set_line_width","qualname":"<CommandBuffer<B, C, S, L>>::set_line_width","value":"fn (&mut self, width: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":50566,"byte_end":50580,"line_start":273,"line_end":273,"column_start":19,"column_end":33},"name":"set_depth_bias","qualname":"<CommandBuffer<B, C, S, L>>::set_depth_bias","value":"fn (&mut self, depth_bias: pso::DepthBias) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":50761,"byte_end":50784,"line_start":278,"line_end":278,"column_start":19,"column_end":42},"name":"push_graphics_constants","qualname":"<CommandBuffer<B, C, S, L>>::push_graphics_constants","value":"fn (&mut self, layout: &B::PipelineLayout, stages: pso::ShaderStageFlags, offset: u32, constants: &[u32]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":51119,"byte_end":51132,"line_start":290,"line_end":290,"column_start":19,"column_end":32},"name":"resolve_image","qualname":"<CommandBuffer<B, C, S, L>>::resolve_image","value":"fn <T> (&mut self, src: &B::Image, src_layout: image::Layout, dst: &B::Image, dst_layout: image::Layout, regions: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":51557,"byte_end":51567,"line_start":306,"line_end":306,"column_start":19,"column_end":29},"name":"blit_image","qualname":"<CommandBuffer<B, C, S, L>>::blit_image","value":"fn <T> (&mut self, src: &B::Image, src_layout: image::Layout, dst: &B::Image, dst_layout: image::Layout, filter: image::Filter, regions: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":52110,"byte_end":52134,"line_start":325,"line_end":325,"column_start":19,"column_end":43},"name":"begin_render_pass_inline","qualname":"<CommandBuffer<B, C, S, Primary>>::begin_render_pass_inline","value":"fn <T> (&mut self, render_pass: &B::RenderPass, frame_buffer: &B::Framebuffer, render_area: pso::Rect, clear_values: T) -> RenderPassInlineEncoder<B>","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":52572,"byte_end":52599,"line_start":340,"line_end":340,"column_start":19,"column_end":46},"name":"begin_render_pass_secondary","qualname":"<CommandBuffer<B, C, S, Primary>>::begin_render_pass_secondary","value":"fn <T> (&mut self, render_pass: &B::RenderPass, frame_buffer: &B::Framebuffer, render_area: pso::Rect, clear_values: T) -> RenderPassSecondaryEncoder<B>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new secondary render pass.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":53165,"byte_end":53176,"line_start":357,"line_end":357,"column_start":19,"column_end":30},"name":"begin_query","qualname":"<CommandBuffer<B, C, S, L>>::begin_query","value":"fn (&mut self, query: query::Query<B>, flags: query::ControlFlags) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":53379,"byte_end":53388,"line_start":362,"line_end":362,"column_start":19,"column_end":28},"name":"end_query","qualname":"<CommandBuffer<B, C, S, L>>::end_query","value":"fn (&mut self, query: query::Query<B>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":53554,"byte_end":53570,"line_start":367,"line_end":367,"column_start":19,"column_end":35},"name":"reset_query_pool","qualname":"<CommandBuffer<B, C, S, L>>::reset_query_pool","value":"fn (&mut self, pool: &B::QueryPool, queries: Range<query::Id>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":53775,"byte_end":53798,"line_start":372,"line_end":372,"column_start":19,"column_end":42},"name":"copy_query_pool_results","qualname":"<CommandBuffer<B, C, S, L>>::copy_query_pool_results","value":"fn (&mut self, pool: &B::QueryPool, queries: Range<query::Id>, buffer: &B::Buffer, offset: buffer::Offset, stride: buffer::Offset, flags: query::ResultFlags) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":54212,"byte_end":54227,"line_start":386,"line_end":386,"column_start":19,"column_end":34},"name":"write_timestamp","qualname":"<CommandBuffer<B, C, S, L>>::write_timestamp","value":"fn (&mut self, stage: pso::PipelineStage, query: query::Query<B>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Union","id":{"krate":0,"index":2685},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":54907,"byte_end":54920,"line_start":21,"line_end":21,"column_start":11,"column_end":24},"name":"ClearColorRaw","qualname":"::command::raw::ClearColorRaw","value":"ClearColorRaw { float32, int32, uint32 }","parent":null,"children":[{"krate":0,"index":2686},{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2692}],"decl_id":null,"docs":" Unsafe variant of `ClearColor`.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":54863,"byte_end":54873,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2686},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":54953,"byte_end":54960,"line_start":23,"line_end":23,"column_start":9,"column_end":16},"name":"float32","qualname":"::command::raw::ClearColorRaw::float32","value":"[f32; _]","parent":{"krate":0,"index":2685},"children":[],"decl_id":null,"docs":" `f32` variant\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2688},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55002,"byte_end":55007,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"int32","qualname":"::command::raw::ClearColorRaw::int32","value":"[i32; _]","parent":{"krate":0,"index":2685},"children":[],"decl_id":null,"docs":" `i32` variant\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2690},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55049,"byte_end":55055,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"name":"uint32","qualname":"::command::raw::ClearColorRaw::uint32","value":"[u32; _]","parent":{"krate":0,"index":2685},"children":[],"decl_id":null,"docs":" `u32` variant\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2697},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55418,"byte_end":55438,"line_start":41,"line_end":41,"column_start":12,"column_end":32},"name":"ClearDepthStencilRaw","qualname":"::command::raw::ClearDepthStencilRaw","value":"ClearDepthStencilRaw { depth, stencil }","parent":null,"children":[{"krate":0,"index":2698},{"krate":0,"index":2699}],"decl_id":null,"docs":" A variant of `ClearDepthStencil` that has a `#[repr(C)]` layout\n and so is used when a known layout is needed.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55366,"byte_end":55376,"line_start":39,"line_end":39,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2698},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55469,"byte_end":55474,"line_start":43,"line_end":43,"column_start":9,"column_end":14},"name":"depth","qualname":"::command::raw::ClearDepthStencilRaw::depth","value":"f32","parent":{"krate":0,"index":2697},"children":[],"decl_id":null,"docs":" Depth value\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2699},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55511,"byte_end":55518,"line_start":45,"line_end":45,"column_start":9,"column_end":16},"name":"stencil","qualname":"::command::raw::ClearDepthStencilRaw::stencil","value":"u32","parent":{"krate":0,"index":2697},"children":[],"decl_id":null,"docs":" Stencil value\n","sig":null,"attributes":[]},{"kind":"Union","id":{"krate":0,"index":2705},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55608,"byte_end":55621,"line_start":51,"line_end":51,"column_start":11,"column_end":24},"name":"ClearValueRaw","qualname":"::command::raw::ClearValueRaw","value":"ClearValueRaw { color, depth_stencil }","parent":null,"children":[{"krate":0,"index":2706},{"krate":0,"index":2707},{"krate":0,"index":2708}],"decl_id":null,"docs":" Unsafe variant of `ClearValue`.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55564,"byte_end":55574,"line_start":49,"line_end":49,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2706},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55652,"byte_end":55657,"line_start":53,"line_end":53,"column_start":9,"column_end":14},"name":"color","qualname":"::command::raw::ClearValueRaw::color","value":"command::raw::ClearColorRaw","parent":{"krate":0,"index":2705},"children":[],"decl_id":null,"docs":" Clear color\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2707},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55714,"byte_end":55727,"line_start":55,"line_end":55,"column_start":9,"column_end":22},"name":"depth_stencil","qualname":"::command::raw::ClearValueRaw::depth_stencil","value":"command::raw::ClearDepthStencilRaw","parent":{"krate":0,"index":2705},"children":[],"decl_id":null,"docs":" Clear depth and stencil\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":56114,"byte_end":56133,"line_start":69,"line_end":69,"column_start":10,"column_end":29},"name":"DescriptorSetOffset","qualname":"::command::raw::DescriptorSetOffset","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Offset for dynamic descriptors.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2713},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":56250,"byte_end":56268,"line_start":74,"line_end":74,"column_start":16,"column_end":34},"name":"CommandBufferFlags","qualname":"::command::raw::CommandBufferFlags","value":"CommandBufferFlags {  }","parent":null,"children":[{"krate":0,"index":2714}],"decl_id":null,"docs":" Option flags for various command buffer settings.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2753},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":56414,"byte_end":56419,"line_start":77,"line_end":77,"column_start":15,"column_end":20},"name":"EMPTY","qualname":"::command::raw::CommandBufferFlags::EMPTY","value":"CommandBufferFlags","parent":{"krate":0,"index":2752},"children":[],"decl_id":null,"docs":" No flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2754},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":56587,"byte_end":56602,"line_start":81,"line_end":81,"column_start":15,"column_end":30},"name":"ONE_TIME_SUBMIT","qualname":"::command::raw::CommandBufferFlags::ONE_TIME_SUBMIT","value":"CommandBufferFlags","parent":{"krate":0,"index":2752},"children":[],"decl_id":null,"docs":" Says that the command buffer will be recorded, submitted only once, and then reset and re-filled\n for another submission.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2755},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":56792,"byte_end":56812,"line_start":85,"line_end":85,"column_start":15,"column_end":35},"name":"RENDER_PASS_CONTINUE","qualname":"::command::raw::CommandBufferFlags::RENDER_PASS_CONTINUE","value":"CommandBufferFlags","parent":{"krate":0,"index":2752},"children":[],"decl_id":null,"docs":" If set on a secondary command buffer, it says the command buffer takes place entirely inside\n a render pass. Ignored on primary command buffer.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2756},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57044,"byte_end":57060,"line_start":90,"line_end":90,"column_start":15,"column_end":31},"name":"SIMULTANEOUS_USE","qualname":"::command::raw::CommandBufferFlags::SIMULTANEOUS_USE","value":"CommandBufferFlags","parent":{"krate":0,"index":2752},"children":[],"decl_id":null,"docs":" Says that a command buffer can be recorded into multiple primary command buffers,\n and submitted to a queue while it is still pending.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2815},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57338,"byte_end":57345,"line_start":100,"line_end":100,"column_start":5,"column_end":12},"name":"Primary","qualname":"::command::raw::Level::Primary","value":"Level::Primary","parent":{"krate":0,"index":2814},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2817},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57351,"byte_end":57360,"line_start":101,"line_end":101,"column_start":5,"column_end":14},"name":"Secondary","qualname":"::command::raw::Level::Secondary","value":"Level::Secondary","parent":{"krate":0,"index":2814},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2814},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57326,"byte_end":57331,"line_start":99,"line_end":99,"column_start":10,"column_end":15},"name":"Level","qualname":"::command::raw::Level","value":"Level::{Primary, Secondary}","parent":null,"children":[{"krate":0,"index":2815},{"krate":0,"index":2817}],"decl_id":null,"docs":" An enum that indicates at runtime whether a command buffer\n is primary or secondary, similar to what `command::Primary`\n and `command::Secondary` do at compile-time.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57253,"byte_end":57275,"line_start":97,"line_end":97,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":2826},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57416,"byte_end":57444,"line_start":106,"line_end":106,"column_start":12,"column_end":40},"name":"CommandBufferInheritanceInfo","qualname":"::command::raw::CommandBufferInheritanceInfo","value":"CommandBufferInheritanceInfo { subpass, framebuffer, occlusion_query_enable, occlusion_query_flags, pipeline_statistics }","parent":null,"children":[{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2833}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57365,"byte_end":57387,"line_start":104,"line_end":104,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57471,"byte_end":57478,"line_start":107,"line_end":107,"column_start":9,"column_end":16},"name":"subpass","qualname":"::command::raw::CommandBufferInheritanceInfo::subpass","value":"std::option::Option<pass::Subpass<'a, B>>","parent":{"krate":0,"index":2826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2830},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57518,"byte_end":57529,"line_start":108,"line_end":108,"column_start":9,"column_end":20},"name":"framebuffer","qualname":"::command::raw::CommandBufferInheritanceInfo::framebuffer","value":"std::option::Option<&'a <B as Backend>::Framebuffer>","parent":{"krate":0,"index":2826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2831},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57567,"byte_end":57589,"line_start":109,"line_end":109,"column_start":9,"column_end":31},"name":"occlusion_query_enable","qualname":"::command::raw::CommandBufferInheritanceInfo::occlusion_query_enable","value":"bool","parent":{"krate":0,"index":2826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2832},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57605,"byte_end":57626,"line_start":110,"line_end":110,"column_start":9,"column_end":30},"name":"occlusion_query_flags","qualname":"::command::raw::CommandBufferInheritanceInfo::occlusion_query_flags","value":"query::ControlFlags","parent":{"krate":0,"index":2826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2833},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57657,"byte_end":57676,"line_start":111,"line_end":111,"column_start":9,"column_end":28},"name":"pipeline_statistics","qualname":"::command::raw::CommandBufferInheritanceInfo::pipeline_statistics","value":"query::PipelineStatistic","parent":{"krate":0,"index":2826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":58212,"byte_end":58228,"line_start":128,"line_end":128,"column_start":11,"column_end":27},"name":"RawCommandBuffer","qualname":"::command::raw::RawCommandBuffer","value":"RawCommandBuffer<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331}],"decl_id":null,"docs":" A trait that describes all the operations that must be\n provided by a `Backend`'s command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":58344,"byte_end":58349,"line_start":130,"line_end":130,"column_start":15,"column_end":20},"name":"begin","qualname":"::command::raw::RawCommandBuffer::begin","value":"fn (&mut self, flags: CommandBufferFlags, inheritance_info: CommandBufferInheritanceInfo<B>) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Begins recording commands to a command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":58541,"byte_end":58547,"line_start":137,"line_end":137,"column_start":15,"column_end":21},"name":"finish","qualname":"::command::raw::RawCommandBuffer::finish","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Finish recording commands to a command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":58698,"byte_end":58703,"line_start":141,"line_end":141,"column_start":15,"column_end":20},"name":"reset","qualname":"::command::raw::RawCommandBuffer::reset","value":"fn (&mut self, release_resources: bool) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Empties the command buffer, optionally releasing all\n resources from the commands that have been submitted.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":59007,"byte_end":59023,"line_start":147,"line_end":147,"column_start":15,"column_end":31},"name":"pipeline_barrier","qualname":"::command::raw::RawCommandBuffer::pipeline_barrier","value":"fn <'a, T> (&mut self, stages: Range<pso::PipelineStage>, dependencies: Dependencies, barriers: T) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Inserts a synchronization dependency between pipeline stages\n in the command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":59294,"byte_end":59305,"line_start":157,"line_end":157,"column_start":15,"column_end":26},"name":"fill_buffer","qualname":"::command::raw::RawCommandBuffer::fill_buffer","value":"fn <R> (&mut self, buffer: &B::Buffer, range: R, data: u32) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Fill a buffer with the given `u32` value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":59477,"byte_end":59490,"line_start":162,"line_end":162,"column_start":15,"column_end":28},"name":"update_buffer","qualname":"::command::raw::RawCommandBuffer::update_buffer","value":"fn (&mut self, buffer: &B::Buffer, offset: buffer::Offset, data: &[u8]) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Copy data from the given slice into a buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":59633,"byte_end":59644,"line_start":165,"line_end":165,"column_start":15,"column_end":26},"name":"clear_image","qualname":"::command::raw::RawCommandBuffer::clear_image","value":"fn <T> (&mut self, image: &B::Image, layout: Layout, color: ClearColorRaw, depth_stencil: ClearDepthStencilRaw, subresource_ranges: T) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Clears an image to the given color/depth/stencil.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":60046,"byte_end":60063,"line_start":178,"line_end":178,"column_start":15,"column_end":32},"name":"clear_attachments","qualname":"::command::raw::RawCommandBuffer::clear_attachments","value":"fn <T, U> (&mut self, clears: T, rects: U) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Takes an iterator of attachments and an iterator of rect's,\n and clears the given rect's for *each* attachment.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":60411,"byte_end":60424,"line_start":187,"line_end":187,"column_start":15,"column_end":28},"name":"resolve_image","qualname":"::command::raw::RawCommandBuffer::resolve_image","value":"fn <T> (&mut self, src: &B::Image, src_layout: Layout, dst: &B::Image, dst_layout: Layout, regions: T) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" \"Resolves\" a multisampled image, converting it into a non-multisampled\n image. Takes an iterator of regions to apply the resolution to.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":60795,"byte_end":60805,"line_start":200,"line_end":200,"column_start":15,"column_end":25},"name":"blit_image","qualname":"::command::raw::RawCommandBuffer::blit_image","value":"fn <T> (&mut self, src: &B::Image, src_layout: Layout, dst: &B::Image, dst_layout: Layout, filter: Filter, regions: T) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Copies regions from the source to destination image,\n applying scaling, filtering and potentially format conversion.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":61173,"byte_end":61190,"line_start":214,"line_end":214,"column_start":15,"column_end":32},"name":"bind_index_buffer","qualname":"::command::raw::RawCommandBuffer::bind_index_buffer","value":"fn (&mut self, view: buffer::IndexBufferView<B>) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Bind the index buffer view, making it the \"current\" one that draw commands\n will operate on.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":62158,"byte_end":62177,"line_start":232,"line_end":232,"column_start":15,"column_end":34},"name":"bind_vertex_buffers","qualname":"::command::raw::RawCommandBuffer::bind_vertex_buffers","value":"fn <I, T> (&mut self, first_binding: pso::BufferIndex, buffers: I) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Bind the vertex buffer set, making it the \"current\" one that draw commands\n will operate on.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":63148,"byte_end":63161,"line_start":254,"line_end":254,"column_start":15,"column_end":28},"name":"set_viewports","qualname":"::command::raw::RawCommandBuffer::set_viewports","value":"fn <T> (&mut self, first_viewport: u32, viewports: T) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Set the viewport parameters for the rasterizer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":64086,"byte_end":64098,"line_start":276,"line_end":276,"column_start":15,"column_end":27},"name":"set_scissors","qualname":"::command::raw::RawCommandBuffer::set_scissors","value":"fn <T> (&mut self, first_scissor: u32, rects: T) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Set the scissor rectangles for the rasterizer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":64432,"byte_end":64453,"line_start":284,"line_end":284,"column_start":15,"column_end":36},"name":"set_stencil_reference","qualname":"::command::raw::RawCommandBuffer::set_stencil_reference","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Sets the stencil reference value for comparison operations and store operations.\n Will be used on the LHS of stencil compare ops and as store value when the\n store op is Reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":64561,"byte_end":64582,"line_start":287,"line_end":287,"column_start":15,"column_end":36},"name":"set_stencil_read_mask","qualname":"::command::raw::RawCommandBuffer::set_stencil_read_mask","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Sets the stencil read mask.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":64691,"byte_end":64713,"line_start":290,"line_end":290,"column_start":15,"column_end":37},"name":"set_stencil_write_mask","qualname":"::command::raw::RawCommandBuffer::set_stencil_write_mask","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Sets the stencil write mask.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":64836,"byte_end":64855,"line_start":293,"line_end":293,"column_start":15,"column_end":34},"name":"set_blend_constants","qualname":"::command::raw::RawCommandBuffer::set_blend_constants","value":"fn (&mut self, color: pso::ColorValue) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Set the blend constant values dynamically.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":64961,"byte_end":64977,"line_start":296,"line_end":296,"column_start":15,"column_end":31},"name":"set_depth_bounds","qualname":"::command::raw::RawCommandBuffer::set_depth_bounds","value":"fn (&mut self, bounds: Range<f32>) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Set the depth bounds test values dynamically.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":65065,"byte_end":65079,"line_start":299,"line_end":299,"column_start":15,"column_end":29},"name":"set_line_width","qualname":"::command::raw::RawCommandBuffer::set_line_width","value":"fn (&mut self, width: f32) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Set the line width dynamically.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":65159,"byte_end":65173,"line_start":302,"line_end":302,"column_start":15,"column_end":29},"name":"set_depth_bias","qualname":"::command::raw::RawCommandBuffer::set_depth_bias","value":"fn (&mut self, depth_bias: pso::DepthBias) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Set the depth bias dynamically.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":65736,"byte_end":65753,"line_start":312,"line_end":312,"column_start":15,"column_end":32},"name":"begin_render_pass","qualname":"::command::raw::RawCommandBuffer::begin_render_pass","value":"fn <T> (&mut self, render_pass: &B::RenderPass, framebuffer: &B::Framebuffer, render_area: pso::Rect, clear_values: T, first_subpass: SubpassContents) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Begins recording commands for a render pass on the given framebuffer.\n `render_area` is the section of the framebuffer to render,\n `clear_values` is an iterator of `ClearValueRaw`'s to use to use for\n `clear_*` commands, one for each attachment of the render pass\n that has a clear operation.\n `first_subpass` specifies, for the first subpass, whether the\n rendering commands are provided inline or whether the render\n pass is composed of subpasses.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":66103,"byte_end":66115,"line_start":324,"line_end":324,"column_start":15,"column_end":27},"name":"next_subpass","qualname":"::command::raw::RawCommandBuffer::next_subpass","value":"fn (&mut self, contents: SubpassContents) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Steps to the next subpass in the current render pass.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":66237,"byte_end":66252,"line_start":327,"line_end":327,"column_start":15,"column_end":30},"name":"end_render_pass","qualname":"::command::raw::RawCommandBuffer::end_render_pass","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Finishes recording commands for the current a render pass.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":66602,"byte_end":66624,"line_start":338,"line_end":338,"column_start":15,"column_end":37},"name":"bind_graphics_pipeline","qualname":"::command::raw::RawCommandBuffer::bind_graphics_pipeline","value":"fn (&mut self, pipeline: &B::GraphicsPipeline) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Bind a graphics pipeline.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":66874,"byte_end":66903,"line_start":342,"line_end":342,"column_start":15,"column_end":44},"name":"bind_graphics_descriptor_sets","qualname":"::command::raw::RawCommandBuffer::bind_graphics_descriptor_sets","value":"fn <I, J> (&mut self, layout: &B::PipelineLayout, first_set: usize, sets: I, offsets: J) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Takes an iterator of graphics `DescriptorSet`'s, and binds them to the command buffer.\n `first_set` is the index that the first descriptor is mapped to in the command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":67515,"byte_end":67536,"line_start":363,"line_end":363,"column_start":15,"column_end":36},"name":"bind_compute_pipeline","qualname":"::command::raw::RawCommandBuffer::bind_compute_pipeline","value":"fn (&mut self, pipeline: &B::ComputePipeline) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Bind a compute pipeline.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":67784,"byte_end":67812,"line_start":367,"line_end":367,"column_start":15,"column_end":43},"name":"bind_compute_descriptor_sets","qualname":"::command::raw::RawCommandBuffer::bind_compute_descriptor_sets","value":"fn <I, J> (&mut self, layout: &B::PipelineLayout, first_set: usize, sets: I, offsets: J) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Takes an iterator of compute `DescriptorSet`'s, and binds them to the command buffer,\n `first_set` is the index that the first descriptor is mapped to in the command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":68848,"byte_end":68856,"line_start":395,"line_end":395,"column_start":15,"column_end":23},"name":"dispatch","qualname":"::command::raw::RawCommandBuffer::dispatch","value":"fn (&mut self, count: WorkGroupCount) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Execute a workgroup in the compute pipeline. `x`, `y` and `z` are the\n number of local workgroups to dispatch along each \"axis\"; a total of `x`*`y`*`z`\n local workgroups will be created.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":69016,"byte_end":69033,"line_start":399,"line_end":399,"column_start":15,"column_end":32},"name":"dispatch_indirect","qualname":"::command::raw::RawCommandBuffer::dispatch_indirect","value":"fn (&mut self, buffer: &B::Buffer, offset: buffer::Offset) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Works similarly to `dispatch()` but reads parameters from the given\n buffer during execution.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":69183,"byte_end":69194,"line_start":402,"line_end":402,"column_start":15,"column_end":26},"name":"copy_buffer","qualname":"::command::raw::RawCommandBuffer::copy_buffer","value":"fn <T> (&mut self, src: &B::Buffer, dst: &B::Buffer, regions: T) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Adds a command to copy regions from the source to destination buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":69635,"byte_end":69645,"line_start":411,"line_end":411,"column_start":15,"column_end":25},"name":"copy_image","qualname":"::command::raw::RawCommandBuffer::copy_image","value":"fn <T> (&mut self, src: &B::Image, src_layout: Layout, dst: &B::Image, dst_layout: Layout, regions: T) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Copies regions from the source to the destination images, which\n have the given layouts.  No format conversion is done; the source and destination\n `Layout`'s **must** have the same sized image formats (such as `Rgba8Unorm` and\n `R32`, both of which are 32 bits).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":69953,"byte_end":69973,"line_start":423,"line_end":423,"column_start":15,"column_end":35},"name":"copy_buffer_to_image","qualname":"::command::raw::RawCommandBuffer::copy_buffer_to_image","value":"fn <T> (&mut self, src: &B::Buffer, dst: &B::Image, dst_layout: Layout, regions: T) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Copies regions from the source buffer to the destination image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":70260,"byte_end":70280,"line_start":434,"line_end":434,"column_start":15,"column_end":35},"name":"copy_image_to_buffer","qualname":"::command::raw::RawCommandBuffer::copy_image_to_buffer","value":"fn <T> (&mut self, src: &B::Image, src_layout: Layout, dst: &B::Buffer, regions: T) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Copies regions from the source image to the destination buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":70812,"byte_end":70816,"line_start":449,"line_end":449,"column_start":15,"column_end":19},"name":"draw","qualname":"::command::raw::RawCommandBuffer::draw","value":"fn (&mut self, vertices: Range<VertexCount>, instances: Range<InstanceCount>) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Performs a non-indexed drawing operation, fetching vertex attributes\n from the currently bound vertex buffers.  It performs instanced\n drawing, drawing `instances.len()`\n times with an `instanceIndex` starting with the start of the range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":71279,"byte_end":71291,"line_start":457,"line_end":457,"column_start":15,"column_end":27},"name":"draw_indexed","qualname":"::command::raw::RawCommandBuffer::draw_indexed","value":"fn (&mut self, indices: Range<IndexCount>, base_vertex: VertexOffset, instances: Range<InstanceCount>) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Performs indexed drawing, drawing the range of indices\n given by the current index buffer and any bound vertex buffers.\n `base_vertex` specifies the vertex offset corresponding to index 0.\n That is, the offset into the vertex buffer is `(current_index + base_vertex)`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":71986,"byte_end":71999,"line_start":473,"line_end":473,"column_start":15,"column_end":28},"name":"draw_indirect","qualname":"::command::raw::RawCommandBuffer::draw_indirect","value":"fn (&mut self, buffer: &B::Buffer, offset: buffer::Offset, draw_count: DrawCount, stride: u32) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Functions identically to `draw()`, except the parameters are read\n from the given buffer, starting at `offset` and increasing `stride`\n bytes with each successive draw.  Performs `draw_count` draws total.\n `draw_count` may be zero.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":72585,"byte_end":72606,"line_start":488,"line_end":488,"column_start":15,"column_end":36},"name":"draw_indexed_indirect","qualname":"::command::raw::RawCommandBuffer::draw_indexed_indirect","value":"fn (&mut self, buffer: &B::Buffer, offset: buffer::Offset, draw_count: DrawCount, stride: u32) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Like `draw_indirect()`, this does indexed drawing a la `draw_indexed()` but\n reads the draw parameters out of the given buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":72977,"byte_end":72988,"line_start":499,"line_end":499,"column_start":15,"column_end":26},"name":"begin_query","qualname":"::command::raw::RawCommandBuffer::begin_query","value":"fn (&mut self, query: query::Query<B>, flags: query::ControlFlags) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Begins a query operation.  Queries count operations or record timestamps\n resulting from commands that occur between the beginning and end of the query,\n and save the results to the query pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":73089,"byte_end":73098,"line_start":502,"line_end":502,"column_start":15,"column_end":24},"name":"end_query","qualname":"::command::raw::RawCommandBuffer::end_query","value":"fn (&mut self, query: query::Query<B>) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" End a query.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":73219,"byte_end":73235,"line_start":505,"line_end":505,"column_start":15,"column_end":31},"name":"reset_query_pool","qualname":"::command::raw::RawCommandBuffer::reset_query_pool","value":"fn (&mut self, pool: &B::QueryPool, queries: Range<query::Id>) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Reset/clear the values in the given range of the query pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":73353,"byte_end":73376,"line_start":508,"line_end":508,"column_start":15,"column_end":38},"name":"copy_query_pool_results","qualname":"::command::raw::RawCommandBuffer::copy_query_pool_results","value":"fn (&mut self, pool: &B::QueryPool, queries: Range<query::Id>, buffer: &B::Buffer, offset: buffer::Offset, stride: buffer::Offset, flags: query::ResultFlags) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Copy query results into a buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":73654,"byte_end":73669,"line_start":519,"line_end":519,"column_start":15,"column_end":30},"name":"write_timestamp","qualname":"::command::raw::RawCommandBuffer::write_timestamp","value":"fn (&mut self, stage: pso::PipelineStage, query: query::Query<B>) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Requests a timestamp to be written.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":73939,"byte_end":73962,"line_start":524,"line_end":524,"column_start":15,"column_end":38},"name":"push_graphics_constants","qualname":"::command::raw::RawCommandBuffer::push_graphics_constants","value":"fn (&mut self, layout: &B::PipelineLayout, stages: pso::ShaderStageFlags, offset: u32, constants: &[u32]) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Modify constant data in a graphics pipeline.\n Push constants are intended to modify data in a pipeline more\n quickly than a updating the values inside a descriptor set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":74318,"byte_end":74340,"line_start":535,"line_end":535,"column_start":15,"column_end":37},"name":"push_compute_constants","qualname":"::command::raw::RawCommandBuffer::push_compute_constants","value":"fn (&mut self, layout: &B::PipelineLayout, offset: u32, constants: &[u32]) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Modify constant data in a compute pipeline.\n Push constants are intended to modify data in a pipeline more\n quickly than a updating the values inside a descriptor set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":74520,"byte_end":74536,"line_start":543,"line_end":543,"column_start":15,"column_end":31},"name":"execute_commands","qualname":"::command::raw::RawCommandBuffer::execute_commands","value":"fn <'a, T, I> (&mut self, cmd_buffers: I) -> ()","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Execute the given secondary command buffers.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":74747,"byte_end":74767,"line_start":550,"line_end":550,"column_start":11,"column_end":31},"name":"IntoRawCommandBuffer","qualname":"::command::raw::IntoRawCommandBuffer","value":"IntoRawCommandBuffer<B: Backend, C>","parent":null,"children":[{"krate":0,"index":338}],"decl_id":null,"docs":" A trait for types that can be converted into raw command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":74834,"byte_end":74842,"line_start":552,"line_end":552,"column_start":8,"column_end":16},"name":"into_raw","qualname":"::command::raw::IntoRawCommandBuffer::into_raw","value":"fn (self) -> B::CommandBuffer","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":" Converts into raw command buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2839},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":75654,"byte_end":75660,"line_start":19,"line_end":19,"column_start":5,"column_end":11},"name":"Inline","qualname":"::command::render_pass::SubpassContents::Inline","value":"SubpassContents::Inline","parent":{"krate":0,"index":2838},"children":[],"decl_id":null,"docs":" Contents of the subpass will be inline in the command buffer,\n NOT in secondary command buffers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2841},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":75873,"byte_end":75889,"line_start":23,"line_end":23,"column_start":5,"column_end":21},"name":"SecondaryBuffers","qualname":"::command::render_pass::SubpassContents::SecondaryBuffers","value":"SubpassContents::SecondaryBuffers","parent":{"krate":0,"index":2838},"children":[],"decl_id":null,"docs":" Contents of the subpass will be in secondary command buffers, and\n the primary command buffer will only contain `execute_command()` calls\n until the subpass or render pass is complete.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2838},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":75520,"byte_end":75535,"line_start":16,"line_end":16,"column_start":10,"column_end":25},"name":"SubpassContents","qualname":"::command::render_pass::SubpassContents","value":"SubpassContents::{Inline, SecondaryBuffers}","parent":null,"children":[{"krate":0,"index":2839},{"krate":0,"index":2841}],"decl_id":null,"docs":" Specifies how commands for the following renderpasses will be recorded.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2845},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":76241,"byte_end":76260,"line_start":32,"line_end":32,"column_start":12,"column_end":31},"name":"RenderSubpassCommon","qualname":"::command::render_pass::RenderSubpassCommon","value":"RenderSubpassCommon {  }","parent":null,"children":[{"krate":0,"index":2848},{"krate":0,"index":2849}],"decl_id":null,"docs":" This struct contains all methods for all commands submittable during a subpass.\n It is used to implement the identical portions of RenderPassInlineEncoder and SubpassCommandBuffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":76550,"byte_end":76567,"line_start":46,"line_end":46,"column_start":19,"column_end":36},"name":"clear_attachments","qualname":"<RenderSubpassCommon<B, C>>::clear_attachments","value":"fn <T, U> (&mut self, clears: T, rects: U) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":76851,"byte_end":76855,"line_start":57,"line_end":57,"column_start":19,"column_end":23},"name":"draw","qualname":"<RenderSubpassCommon<B, C>>::draw","value":"fn (&mut self, vertices: Range<VertexCount>, instances: Range<InstanceCount>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":77021,"byte_end":77033,"line_start":62,"line_end":62,"column_start":19,"column_end":31},"name":"draw_indexed","qualname":"<RenderSubpassCommon<B, C>>::draw_indexed","value":"fn (&mut self, indices: Range<IndexCount>, base_vertex: VertexOffset, instances: Range<InstanceCount>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":77309,"byte_end":77322,"line_start":74,"line_end":74,"column_start":19,"column_end":32},"name":"draw_indirect","qualname":"<RenderSubpassCommon<B, C>>::draw_indirect","value":"fn (&mut self, buffer: &B::Buffer, offset: buffer::Offset, draw_count: DrawCount, stride: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":77601,"byte_end":77622,"line_start":86,"line_end":86,"column_start":19,"column_end":40},"name":"draw_indexed_indirect","qualname":"<RenderSubpassCommon<B, C>>::draw_indexed_indirect","value":"fn (&mut self, buffer: &B::Buffer, offset: buffer::Offset, draw_count: DrawCount, stride: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":77910,"byte_end":77927,"line_start":99,"line_end":99,"column_start":19,"column_end":36},"name":"bind_index_buffer","qualname":"<RenderSubpassCommon<B, C>>::bind_index_buffer","value":"fn (&mut self, ibv: buffer::IndexBufferView<B>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":78060,"byte_end":78079,"line_start":104,"line_end":104,"column_start":19,"column_end":38},"name":"bind_vertex_buffers","qualname":"<RenderSubpassCommon<B, C>>::bind_vertex_buffers","value":"fn <I, T> (&mut self, first_binding: pso::BufferIndex, buffers: I) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":78375,"byte_end":78397,"line_start":115,"line_end":115,"column_start":19,"column_end":41},"name":"bind_graphics_pipeline","qualname":"<RenderSubpassCommon<B, C>>::bind_graphics_pipeline","value":"fn (&mut self, pipeline: &B::GraphicsPipeline) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":78539,"byte_end":78568,"line_start":120,"line_end":120,"column_start":19,"column_end":48},"name":"bind_graphics_descriptor_sets","qualname":"<RenderSubpassCommon<B, C>>::bind_graphics_descriptor_sets","value":"fn <I, J> (&mut self, layout: &B::PipelineLayout, first_set: usize, sets: I, offsets: J) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":79004,"byte_end":79017,"line_start":138,"line_end":138,"column_start":19,"column_end":32},"name":"set_viewports","qualname":"<RenderSubpassCommon<B, C>>::set_viewports","value":"fn <T> (&mut self, first_viewport: u32, viewports: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":79278,"byte_end":79290,"line_start":149,"line_end":149,"column_start":19,"column_end":31},"name":"set_scissors","qualname":"<RenderSubpassCommon<B, C>>::set_scissors","value":"fn <T> (&mut self, first_scissor: u32, scissors: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":79516,"byte_end":79537,"line_start":158,"line_end":158,"column_start":19,"column_end":40},"name":"set_stencil_reference","qualname":"<RenderSubpassCommon<B, C>>::set_stencil_reference","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":79695,"byte_end":79716,"line_start":163,"line_end":163,"column_start":19,"column_end":40},"name":"set_stencil_read_mask","qualname":"<RenderSubpassCommon<B, C>>::set_stencil_read_mask","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":79874,"byte_end":79896,"line_start":168,"line_end":168,"column_start":19,"column_end":41},"name":"set_stencil_write_mask","qualname":"<RenderSubpassCommon<B, C>>::set_stencil_write_mask","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":80055,"byte_end":80074,"line_start":173,"line_end":173,"column_start":19,"column_end":38},"name":"set_blend_constants","qualname":"<RenderSubpassCommon<B, C>>::set_blend_constants","value":"fn (&mut self, cv: pso::ColorValue) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":80196,"byte_end":80212,"line_start":178,"line_end":178,"column_start":19,"column_end":35},"name":"set_depth_bounds","qualname":"<RenderSubpassCommon<B, C>>::set_depth_bounds","value":"fn (&mut self, bounds: Range<f32>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":80334,"byte_end":80357,"line_start":183,"line_end":183,"column_start":19,"column_end":42},"name":"push_graphics_constants","qualname":"<RenderSubpassCommon<B, C>>::push_graphics_constants","value":"fn (&mut self, layout: &B::PipelineLayout, stages: pso::ShaderStageFlags, offset: u32, constants: &[u32]) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":80658,"byte_end":80672,"line_start":196,"line_end":196,"column_start":19,"column_end":33},"name":"set_line_width","qualname":"<RenderSubpassCommon<B, C>>::set_line_width","value":"fn (&mut self, width: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":80784,"byte_end":80798,"line_start":201,"line_end":201,"column_start":19,"column_end":33},"name":"set_depth_bias","qualname":"<RenderSubpassCommon<B, C>>::set_depth_bias","value":"fn (&mut self, depth_bias: pso::DepthBias) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":80974,"byte_end":80985,"line_start":208,"line_end":208,"column_start":19,"column_end":30},"name":"begin_query","qualname":"<RenderSubpassCommon<B, C>>::begin_query","value":"fn (&mut self, query: query::Query<B>, flags: query::ControlFlags) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":81140,"byte_end":81149,"line_start":213,"line_end":213,"column_start":19,"column_end":28},"name":"end_query","qualname":"<RenderSubpassCommon<B, C>>::end_query","value":"fn (&mut self, query: query::Query<B>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":81267,"byte_end":81282,"line_start":218,"line_end":218,"column_start":19,"column_end":34},"name":"write_timestamp","qualname":"<RenderSubpassCommon<B, C>>::write_timestamp","value":"fn (&mut self, stage: pso::PipelineStage, query: query::Query<B>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2854},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":81558,"byte_end":81581,"line_start":226,"line_end":226,"column_start":12,"column_end":35},"name":"RenderPassInlineEncoder","qualname":"::command::render_pass::RenderPassInlineEncoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" An object that records commands into a command buffer inline, that is,\n without secondary command buffers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":81874,"byte_end":81877,"line_start":235,"line_end":235,"column_start":19,"column_end":22},"name":"new","qualname":"<RenderPassInlineEncoder>::new","value":"fn <C, T, S> (cmd_buffer: &'a mut CommandBuffer<B, C, S, Primary>, render_pass: &B::RenderPass, frame_buffer: &B::Framebuffer, render_area: pso::Rect, clear_values: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `RenderPassInlineEncoder`, starting a new render\n pass in the given `CommandBuffer`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":82657,"byte_end":82676,"line_start":263,"line_end":263,"column_start":12,"column_end":31},"name":"next_subpass_inline","qualname":"<RenderPassInlineEncoder>::next_subpass_inline","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Start the next subpass.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":82876,"byte_end":82898,"line_start":271,"line_end":271,"column_start":12,"column_end":34},"name":"next_subpass_secondary","qualname":"<RenderPassInlineEncoder>::next_subpass_secondary","value":"fn (mut self) -> RenderPassSecondaryEncoder<'a, B>","parent":null,"children":[],"decl_id":null,"docs":" Begins recording a new subpass with secondary buffers.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2863},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":83892,"byte_end":83918,"line_start":305,"line_end":305,"column_start":12,"column_end":38},"name":"RenderPassSecondaryEncoder","qualname":"::command::render_pass::RenderPassSecondaryEncoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" An object that records commands into a command buffer where each command must\n be a call to execute a secondary command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":84257,"byte_end":84260,"line_start":313,"line_end":313,"column_start":19,"column_end":22},"name":"new","qualname":"<RenderPassSecondaryEncoder>::new","value":"fn <C, T, S> (cmd_buffer: &'a mut CommandBuffer<B, C, S, Primary>, render_pass: &B::RenderPass, frame_buffer: &B::Framebuffer, render_area: pso::Rect, clear_values: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps the given `CommandBuffer` in a `RenderPassSecondaryEncoder`,\n starting a new render pass where the actual commands are contained in\n secondary command buffers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":85069,"byte_end":85085,"line_start":341,"line_end":341,"column_start":19,"column_end":35},"name":"execute_commands","qualname":"<RenderPassSecondaryEncoder>::execute_commands","value":"fn <'b, T, I> (&mut self, cmd_buffers: I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Executes the given commands as a secondary command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":85345,"byte_end":85364,"line_start":350,"line_end":350,"column_start":12,"column_end":31},"name":"next_subpass_inline","qualname":"<RenderPassSecondaryEncoder>::next_subpass_inline","value":"fn (mut self) -> RenderPassInlineEncoder<'a, B>","parent":null,"children":[],"decl_id":null,"docs":" Starts a new subpass with inline commands.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":85758,"byte_end":85780,"line_start":360,"line_end":360,"column_start":12,"column_end":34},"name":"next_subpass_secondary","qualname":"<RenderPassSecondaryEncoder>::next_subpass_secondary","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Starts a new subpass with secondary command buffers.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2872},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":86174,"byte_end":86194,"line_start":378,"line_end":378,"column_start":12,"column_end":32},"name":"SubpassCommandBuffer","qualname":"::command::render_pass::SubpassCommandBuffer","value":"","parent":null,"children":[],"decl_id":null,"docs":" A secondary command buffer recorded entirely within a subpass.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":86490,"byte_end":86493,"line_start":385,"line_end":385,"column_start":19,"column_end":22},"name":"new","qualname":"<SubpassCommandBuffer<B, S>>::new","value":"fn (raw: B::CommandBuffer) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps the given `CommandBuffer` in a `SubpassCommandBuffer`, starting\n to record a new subpass.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":86760,"byte_end":86766,"line_start":392,"line_end":392,"column_start":19,"column_end":25},"name":"finish","qualname":"<SubpassCommandBuffer<B, S>>::finish","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Finish recording commands to the command buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":86948,"byte_end":86953,"line_start":399,"line_end":399,"column_start":19,"column_end":24},"name":"begin","qualname":"<SubpassCommandBuffer<B, OneShot>>::begin","value":"fn <'a> (&mut self, subpass: pass::Subpass<'a, B>, framebuffer: Option<&'a B::Framebuffer>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Begin recording a one-shot sub-pass command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":87554,"byte_end":87559,"line_start":416,"line_end":416,"column_start":19,"column_end":24},"name":"begin","qualname":"<SubpassCommandBuffer<B, MultiShot>>::begin","value":"fn <'a> (&mut self, allow_pending_resubmit: bool, subpass: pass::Subpass<'a, B>, framebuffer: Option<&'a B::Framebuffer>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Begin recording a one-shot sub-pass command buffer.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2884},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":89658,"byte_end":89668,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"BufferCopy","qualname":"::command::transfer::BufferCopy","value":"BufferCopy { src, dst, size }","parent":null,"children":[{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2887}],"decl_id":null,"docs":" Specifies a source region and a destination\n region in a buffer for copying.  All values\n are in units of bytes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2885},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":89716,"byte_end":89719,"line_start":19,"line_end":19,"column_start":9,"column_end":12},"name":"src","qualname":"::command::transfer::BufferCopy::src","value":"u64","parent":{"krate":0,"index":2884},"children":[],"decl_id":null,"docs":" Buffer region source offset.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2886},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":89787,"byte_end":89790,"line_start":21,"line_end":21,"column_start":9,"column_end":12},"name":"dst","qualname":"::command::transfer::BufferCopy::dst","value":"u64","parent":{"krate":0,"index":2884},"children":[],"decl_id":null,"docs":" Buffer region destination offset.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2887},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":89837,"byte_end":89841,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"name":"size","qualname":"::command::transfer::BufferCopy::size","value":"u64","parent":{"krate":0,"index":2884},"children":[],"decl_id":null,"docs":" Region size.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2944},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":90053,"byte_end":90062,"line_start":30,"line_end":30,"column_start":12,"column_end":21},"name":"ImageCopy","qualname":"::command::transfer::ImageCopy","value":"ImageCopy { src_subresource, src_offset, dst_subresource, dst_offset, extent }","parent":null,"children":[{"krate":0,"index":2945},{"krate":0,"index":2946},{"krate":0,"index":2947},{"krate":0,"index":2948},{"krate":0,"index":2949}],"decl_id":null,"docs":" Bundles together all the parameters needed to copy data from one `Image`\n to another.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2945},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":90117,"byte_end":90132,"line_start":32,"line_end":32,"column_start":9,"column_end":24},"name":"src_subresource","qualname":"::command::transfer::ImageCopy::src_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":2944},"children":[],"decl_id":null,"docs":" The image subresource to copy from.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2946},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":90195,"byte_end":90205,"line_start":34,"line_end":34,"column_start":9,"column_end":19},"name":"src_offset","qualname":"::command::transfer::ImageCopy::src_offset","value":"image::Offset","parent":{"krate":0,"index":2944},"children":[],"decl_id":null,"docs":" The source offset.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2947},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":90272,"byte_end":90287,"line_start":36,"line_end":36,"column_start":9,"column_end":24},"name":"dst_subresource","qualname":"::command::transfer::ImageCopy::dst_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":2944},"children":[],"decl_id":null,"docs":" The image subresource to copy to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2948},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":90355,"byte_end":90365,"line_start":38,"line_end":38,"column_start":9,"column_end":19},"name":"dst_offset","qualname":"::command::transfer::ImageCopy::dst_offset","value":"image::Offset","parent":{"krate":0,"index":2944},"children":[],"decl_id":null,"docs":" The destination offset.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2949},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":90432,"byte_end":90438,"line_start":40,"line_end":40,"column_start":9,"column_end":15},"name":"extent","qualname":"::command::transfer::ImageCopy::extent","value":"image::Extent","parent":{"krate":0,"index":2944},"children":[],"decl_id":null,"docs":" The extent of the region to copy.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3009},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":90651,"byte_end":90666,"line_start":47,"line_end":47,"column_start":12,"column_end":27},"name":"BufferImageCopy","qualname":"::command::transfer::BufferImageCopy","value":"BufferImageCopy { buffer_offset, buffer_width, buffer_height, image_layers, image_offset, image_extent }","parent":null,"children":[{"krate":0,"index":3010},{"krate":0,"index":3011},{"krate":0,"index":3012},{"krate":0,"index":3013},{"krate":0,"index":3014},{"krate":0,"index":3015}],"decl_id":null,"docs":" Bundles together all the parameters needed to copy a buffer\n to an image or vice-versa.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3010},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":90709,"byte_end":90722,"line_start":49,"line_end":49,"column_start":9,"column_end":22},"name":"buffer_offset","qualname":"::command::transfer::BufferImageCopy::buffer_offset","value":"u64","parent":{"krate":0,"index":3009},"children":[],"decl_id":null,"docs":" Buffer offset in bytes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3011},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":90791,"byte_end":90803,"line_start":51,"line_end":51,"column_start":9,"column_end":21},"name":"buffer_width","qualname":"::command::transfer::BufferImageCopy::buffer_width","value":"u32","parent":{"krate":0,"index":3009},"children":[],"decl_id":null,"docs":" Width of a buffer 'row' in texels.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3012},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":90870,"byte_end":90883,"line_start":53,"line_end":53,"column_start":9,"column_end":22},"name":"buffer_height","qualname":"::command::transfer::BufferImageCopy::buffer_height","value":"u32","parent":{"krate":0,"index":3009},"children":[],"decl_id":null,"docs":" Height of a buffer 'image slice' in texels.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3013},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":90929,"byte_end":90941,"line_start":55,"line_end":55,"column_start":9,"column_end":21},"name":"image_layers","qualname":"::command::transfer::BufferImageCopy::image_layers","value":"image::SubresourceLayers","parent":{"krate":0,"index":3009},"children":[],"decl_id":null,"docs":" The image subresource.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3014},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":91033,"byte_end":91045,"line_start":57,"line_end":57,"column_start":9,"column_end":21},"name":"image_offset","qualname":"::command::transfer::BufferImageCopy::image_offset","value":"image::Offset","parent":{"krate":0,"index":3009},"children":[],"decl_id":null,"docs":" The offset of the portion of the image to copy.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3015},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":91120,"byte_end":91132,"line_start":59,"line_end":59,"column_start":9,"column_end":21},"name":"image_extent","qualname":"::command::transfer::BufferImageCopy::image_extent","value":"image::Extent","parent":{"krate":0,"index":3009},"children":[],"decl_id":null,"docs":" Size of the portion of the image to copy.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":91326,"byte_end":91342,"line_start":64,"line_end":64,"column_start":19,"column_end":35},"name":"pipeline_barrier","qualname":"<CommandBuffer<B, C, S, L>>::pipeline_barrier","value":"fn <'i, T> (&mut self, stages: Range<PipelineStage>, dependencies: Dependencies, barriers: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":91709,"byte_end":91720,"line_start":77,"line_end":77,"column_start":19,"column_end":30},"name":"fill_buffer","qualname":"<CommandBuffer<B, C, S, L>>::fill_buffer","value":"fn <R> (&mut self, buffer: &B::Buffer, range: R, data: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":91973,"byte_end":91984,"line_start":85,"line_end":85,"column_start":19,"column_end":30},"name":"copy_buffer","qualname":"<CommandBuffer<B, C, S, L>>::copy_buffer","value":"fn <T> (&mut self, src: &B::Buffer, dst: &B::Buffer, regions: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":92265,"byte_end":92278,"line_start":94,"line_end":94,"column_start":19,"column_end":32},"name":"update_buffer","qualname":"<CommandBuffer<B, C, S, L>>::update_buffer","value":"fn (&mut self, buffer: &B::Buffer, offset: buffer::Offset, data: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":92535,"byte_end":92545,"line_start":104,"line_end":104,"column_start":19,"column_end":29},"name":"copy_image","qualname":"<CommandBuffer<B, C, S, L>>::copy_image","value":"fn <T> (&mut self, src: &B::Image, src_layout: image::Layout, dst: &B::Image, dst_layout: image::Layout, regions: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":92964,"byte_end":92984,"line_start":120,"line_end":120,"column_start":19,"column_end":39},"name":"copy_buffer_to_image","qualname":"<CommandBuffer<B, C, S, L>>::copy_buffer_to_image","value":"fn <T> (&mut self, src: &B::Buffer, dst: &B::Image, dst_layout: image::Layout, regions: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":93360,"byte_end":93380,"line_start":134,"line_end":134,"column_start":19,"column_end":39},"name":"copy_image_to_buffer","qualname":"<CommandBuffer<B, C, S, L>>::copy_image_to_buffer","value":"fn <T> (&mut self, src: &B::Image, src_layout: image::Layout, dst: &B::Buffer, regions: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34284,"byte_end":34288,"line_start":38,"line_end":38,"column_start":11,"column_end":15},"name":"Shot","qualname":"::command::Shot","value":"Shot","parent":null,"children":[],"decl_id":null,"docs":" Trait indicating how many times a Submit object can be submitted to a command buffer.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3077},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34374,"byte_end":34381,"line_start":41,"line_end":41,"column_start":10,"column_end":17},"name":"OneShot","qualname":"::command::OneShot","value":"OneShot::{}","parent":null,"children":[],"decl_id":null,"docs":" Indicates a Submit that can only be submitted once.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3080},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34498,"byte_end":34507,"line_start":46,"line_end":46,"column_start":10,"column_end":19},"name":"MultiShot","qualname":"::command::MultiShot","value":"MultiShot::{}","parent":null,"children":[],"decl_id":null,"docs":" Indicates a Submit that can be submitted multiple times.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34603,"byte_end":34608,"line_start":50,"line_end":50,"column_start":11,"column_end":16},"name":"Level","qualname":"::command::Level","value":"Level","parent":null,"children":[],"decl_id":null,"docs":" A trait indicating the level of a command buffer.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3083},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34826,"byte_end":34833,"line_start":57,"line_end":57,"column_start":10,"column_end":17},"name":"Primary","qualname":"::command::Primary","value":"Primary::{}","parent":null,"children":[],"decl_id":null,"docs":" Indicates a primary command buffer.\n Vulkan describes a primary command buffer as one which can be directly submitted\n to a queue, and can execute `Secondary` command buffers.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3086},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":35253,"byte_end":35262,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"Secondary","qualname":"::command::Secondary","value":"Secondary::{}","parent":null,"children":[],"decl_id":null,"docs":" Indicates a secondary command buffer.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":35393,"byte_end":35404,"line_start":71,"line_end":71,"column_start":11,"column_end":22},"name":"Submittable","qualname":"::command::Submittable","value":"Submittable<B: Backend, C: Capability, L: Level>: Borrow<B::CommandBuffer>","parent":null,"children":[],"decl_id":null,"docs":" A property of a command buffer to be submitted to a queue with specific capability.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":35574,"byte_end":35596,"line_start":74,"line_end":74,"column_start":10,"column_end":32},"name":"SecondaryCommandBuffer","qualname":"::command::SecondaryCommandBuffer","value":"CommandBuffer<B, C, S, Secondary>","parent":null,"children":[],"decl_id":null,"docs":" A convenience alias for not typing out the full signature of a secondary command buffer.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3089},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":35802,"byte_end":35815,"line_start":79,"line_end":79,"column_start":12,"column_end":25},"name":"CommandBuffer","qualname":"::command::CommandBuffer","value":"CommandBuffer {  }","parent":null,"children":[{"krate":0,"index":3095},{"krate":0,"index":3096}],"decl_id":null,"docs":" A strongly-typed command buffer that will only implement methods that are valid for the operations\n it supports.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36590,"byte_end":36595,"line_start":108,"line_end":108,"column_start":19,"column_end":24},"name":"begin","qualname":"<CommandBuffer<B, C, OneShot, Primary>>::begin","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Begin recording a one-shot primary command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36901,"byte_end":36906,"line_start":117,"line_end":117,"column_start":19,"column_end":24},"name":"begin","qualname":"<CommandBuffer<B, C, MultiShot, Primary>>::begin","value":"fn (&mut self, allow_pending_resubmit: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Begin recording a multi-shot primary command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":37350,"byte_end":37355,"line_start":130,"line_end":130,"column_start":19,"column_end":24},"name":"begin","qualname":"<CommandBuffer<B, C, OneShot, Secondary>>::begin","value":"fn (&mut self, inheritance: CommandBufferInheritanceInfo<B>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Begin recording a one-shot secondary command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":37670,"byte_end":37675,"line_start":138,"line_end":138,"column_start":19,"column_end":24},"name":"begin","qualname":"<CommandBuffer<B, C, MultiShot, Secondary>>::begin","value":"fn (&mut self, allow_pending_resubmit: bool, inheritance: CommandBufferInheritanceInfo<B>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Begin recording a multi-shot secondary command buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":38166,"byte_end":38169,"line_start":154,"line_end":154,"column_start":19,"column_end":22},"name":"new","qualname":"<CommandBuffer<B, C, S, L>>::new","value":"fn (raw: B::CommandBuffer) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new typed command buffer from a raw command pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":38451,"byte_end":38457,"line_start":164,"line_end":164,"column_start":19,"column_end":25},"name":"finish","qualname":"<CommandBuffer<B, C, S, L>>::finish","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Finish recording commands to the command buffers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":38923,"byte_end":38928,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"name":"reset","qualname":"<CommandBuffer<B, C, S, L>>::reset","value":"fn (&mut self, release_resources: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Empties the command buffer, optionally releasing all resources from the\n commands that have been submitted. The command buffer is moved back to\n the \"initial\" state.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":39378,"byte_end":39387,"line_start":191,"line_end":191,"column_start":19,"column_end":28},"name":"downgrade","qualname":"<CommandBuffer<B, C, S, L>>::downgrade","value":"fn <D> (&mut self) -> &mut CommandBuffer<B, D, S>","parent":null,"children":[],"decl_id":null,"docs":" Downgrade a command buffer to a lesser capability type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":39668,"byte_end":39684,"line_start":201,"line_end":201,"column_start":19,"column_end":35},"name":"execute_commands","qualname":"<CommandBuffer<B, C, S, Primary>>::execute_commands","value":"fn <'a, I, T, K> (&mut self, cmd_buffers: I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Identical to the `RawCommandBuffer` method of the same name.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"device","qualname":"::device","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":620},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":3104},{"krate":0,"index":3121},{"krate":0,"index":3120},{"krate":0,"index":3118},{"krate":0,"index":3110},{"krate":0,"index":3115},{"krate":0,"index":3108},{"krate":0,"index":3106},{"krate":0,"index":3123},{"krate":0,"index":3140},{"krate":0,"index":3139},{"krate":0,"index":3137},{"krate":0,"index":3129},{"krate":0,"index":3134},{"krate":0,"index":3127},{"krate":0,"index":3125},{"krate":0,"index":3142},{"krate":0,"index":3159},{"krate":0,"index":3158},{"krate":0,"index":3156},{"krate":0,"index":3148},{"krate":0,"index":3153},{"krate":0,"index":3146},{"krate":0,"index":3144},{"krate":0,"index":3161},{"krate":0,"index":3181},{"krate":0,"index":3180},{"krate":0,"index":3178},{"krate":0,"index":3170},{"krate":0,"index":3175},{"krate":0,"index":3168},{"krate":0,"index":3166},{"krate":0,"index":3183},{"krate":0,"index":3206},{"krate":0,"index":3205},{"krate":0,"index":3203},{"krate":0,"index":3195},{"krate":0,"index":3200},{"krate":0,"index":3192},{"krate":0,"index":3190},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":3208},{"krate":0,"index":3230},{"krate":0,"index":3229},{"krate":0,"index":3227},{"krate":0,"index":3219},{"krate":0,"index":3224},{"krate":0,"index":3216},{"krate":0,"index":3214},{"krate":0,"index":648},{"krate":0,"index":3232},{"krate":0,"index":3256},{"krate":0,"index":3255},{"krate":0,"index":3253},{"krate":0,"index":3245},{"krate":0,"index":3250},{"krate":0,"index":3242},{"krate":0,"index":3240},{"krate":0,"index":650},{"krate":0,"index":3258},{"krate":0,"index":3315},{"krate":0,"index":3314},{"krate":0,"index":3312},{"krate":0,"index":3310},{"krate":0,"index":3308},{"krate":0,"index":3302},{"krate":0,"index":3263},{"krate":0,"index":3317},{"krate":0,"index":3348},{"krate":0,"index":3346},{"krate":0,"index":3338},{"krate":0,"index":3343},{"krate":0,"index":3335},{"krate":0,"index":3333},{"krate":0,"index":652},{"krate":0,"index":654}],"decl_id":null,"docs":" Logical device","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3104},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":94819,"byte_end":94829,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"DeviceLost","qualname":"::device::DeviceLost","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error occurred caused device to be lost.\n","sig":null,"attributes":[{"value":"fail(display = \"Device is lost\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":94772,"byte_end":94807,"line_start":32,"line_end":32,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":3123},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":94977,"byte_end":94988,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"SurfaceLost","qualname":"::device::SurfaceLost","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error occurred caused surface to be lost.\n","sig":null,"attributes":[{"value":"fail(display = \"Surface is lost\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":94929,"byte_end":94965,"line_start":37,"line_end":37,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":3142},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95148,"byte_end":95159,"line_start":43,"line_end":43,"column_start":12,"column_end":23},"name":"WindowInUse","qualname":"::device::WindowInUse","value":"","parent":null,"children":[],"decl_id":null,"docs":" Native window is already in use by graphics API.\n","sig":null,"attributes":[{"value":"fail(display = \"Native window in use\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95095,"byte_end":95136,"line_start":42,"line_end":42,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3162},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95344,"byte_end":95359,"line_start":50,"line_end":50,"column_start":5,"column_end":20},"name":"OutOfHostMemory","qualname":"::device::OutOfMemory::OutOfHostMemory","value":"OutOfMemory::OutOfHostMemory","parent":{"krate":0,"index":3161},"children":[],"decl_id":null,"docs":" Host memory exhausted.\n","sig":null,"attributes":[{"value":"fail(display = \"Out of host memory\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95300,"byte_end":95339,"line_start":49,"line_end":49,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3164},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95445,"byte_end":95462,"line_start":54,"line_end":54,"column_start":5,"column_end":22},"name":"OutOfDeviceMemory","qualname":"::device::OutOfMemory::OutOfDeviceMemory","value":"OutOfMemory::OutOfDeviceMemory","parent":{"krate":0,"index":3161},"children":[],"decl_id":null,"docs":" Device memory exhausted.\n","sig":null,"attributes":[{"value":"fail(display = \"Out of device memory\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95399,"byte_end":95440,"line_start":53,"line_end":53,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":3161},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95251,"byte_end":95262,"line_start":47,"line_end":47,"column_start":10,"column_end":21},"name":"OutOfMemory","qualname":"::device::OutOfMemory","value":"OutOfMemory::{OutOfHostMemory, OutOfDeviceMemory}","parent":null,"children":[{"krate":0,"index":3162},{"krate":0,"index":3164}],"decl_id":null,"docs":" Error allocating memory.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3184},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95698,"byte_end":95709,"line_start":63,"line_end":63,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::device::OomOrDeviceLost::OutOfMemory","value":"OomOrDeviceLost::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":3183},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95666,"byte_end":95693,"line_start":62,"line_end":62,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3187},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95783,"byte_end":95793,"line_start":66,"line_end":66,"column_start":5,"column_end":15},"name":"DeviceLost","qualname":"::device::OomOrDeviceLost::DeviceLost","value":"OomOrDeviceLost::DeviceLost(DeviceLost)","parent":{"krate":0,"index":3183},"children":[],"decl_id":null,"docs":" Device is lost\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95751,"byte_end":95778,"line_start":65,"line_end":65,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":3183},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95599,"byte_end":95614,"line_start":60,"line_end":60,"column_start":10,"column_end":25},"name":"OomOrDeviceLost","qualname":"::device::OomOrDeviceLost","value":"OomOrDeviceLost::{OutOfMemory, DeviceLost}","parent":null,"children":[{"krate":0,"index":3184},{"krate":0,"index":3187}],"decl_id":null,"docs":" Error occurred caused device to be lost\n or out of memory error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3209},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":96288,"byte_end":96299,"line_start":86,"line_end":86,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::device::AllocationError::OutOfMemory","value":"AllocationError::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":3208},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":96256,"byte_end":96283,"line_start":85,"line_end":85,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3212},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":96451,"byte_end":96465,"line_start":90,"line_end":90,"column_start":5,"column_end":19},"name":"TooManyObjects","qualname":"::device::AllocationError::TooManyObjects","value":"AllocationError::TooManyObjects","parent":{"krate":0,"index":3208},"children":[],"decl_id":null,"docs":" Vulkan implementation doesn't allow to create too many objects.\n","sig":null,"attributes":[{"value":"fail(display = \"Can't allocate more memory objects\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":96391,"byte_end":96446,"line_start":89,"line_end":89,"column_start":5,"column_end":60}}]},{"kind":"Enum","id":{"krate":0,"index":3208},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":96189,"byte_end":96204,"line_start":83,"line_end":83,"column_start":10,"column_end":25},"name":"AllocationError","qualname":"::device::AllocationError","value":"AllocationError::{OutOfMemory, TooManyObjects}","parent":null,"children":[{"krate":0,"index":3209},{"krate":0,"index":3212}],"decl_id":null,"docs":" Possible cause of allocation failure.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3233},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":96814,"byte_end":96825,"line_start":104,"line_end":104,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::device::BindError::OutOfMemory","value":"BindError::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":3232},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":96782,"byte_end":96809,"line_start":103,"line_end":103,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3236},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97002,"byte_end":97013,"line_start":107,"line_end":107,"column_start":5,"column_end":16},"name":"WrongMemory","qualname":"::device::BindError::WrongMemory","value":"BindError::WrongMemory","parent":{"krate":0,"index":3232},"children":[],"decl_id":null,"docs":" Requested binding to memory that doesn't support the required operations.\n","sig":null,"attributes":[{"value":"fail(display = \"Unsupported memory allocation for the requirements\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":96926,"byte_end":96997,"line_start":106,"line_end":106,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3238},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97134,"byte_end":97145,"line_start":110,"line_end":110,"column_start":5,"column_end":16},"name":"OutOfBounds","qualname":"::device::BindError::OutOfBounds","value":"BindError::OutOfBounds","parent":{"krate":0,"index":3232},"children":[],"decl_id":null,"docs":" Requested binding to an invalid memory.\n","sig":null,"attributes":[{"value":"fail(display = \"Not enough space in the memory allocation\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97067,"byte_end":97129,"line_start":109,"line_end":109,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":3232},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":96721,"byte_end":96730,"line_start":101,"line_end":101,"column_start":10,"column_end":19},"name":"BindError","qualname":"::device::BindError","value":"BindError::{OutOfMemory, WrongMemory, OutOfBounds}","parent":null,"children":[{"krate":0,"index":3233},{"krate":0,"index":3236},{"krate":0,"index":3238}],"decl_id":null,"docs":" Error binding a resource to memory allocation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3259},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97473,"byte_end":97476,"line_start":124,"line_end":124,"column_start":5,"column_end":8},"name":"Any","qualname":"::device::WaitFor::Any","value":"WaitFor::Any","parent":{"krate":0,"index":3258},"children":[],"decl_id":null,"docs":" Wait for any target.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3261},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97520,"byte_end":97523,"line_start":126,"line_end":126,"column_start":5,"column_end":8},"name":"All","qualname":"::device::WaitFor::All","value":"WaitFor::All","parent":{"krate":0,"index":3258},"children":[],"decl_id":null,"docs":" Wait for all targets at once.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3258},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97430,"byte_end":97437,"line_start":122,"line_end":122,"column_start":10,"column_end":17},"name":"WaitFor","qualname":"::device::WaitFor","value":"WaitFor::{Any, All}","parent":null,"children":[{"krate":0,"index":3259},{"krate":0,"index":3261}],"decl_id":null,"docs":" Specifies the waiting targets.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3318},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97741,"byte_end":97758,"line_start":134,"line_end":134,"column_start":5,"column_end":22},"name":"CompilationFailed","qualname":"::device::ShaderError::CompilationFailed","value":"ShaderError::CompilationFailed(String)","parent":{"krate":0,"index":3317},"children":[],"decl_id":null,"docs":" The shader failed to compile.\n","sig":null,"attributes":[{"value":"fail(display = \"shader compilation failed: {}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97682,"byte_end":97736,"line_start":133,"line_end":133,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3321},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97867,"byte_end":97884,"line_start":137,"line_end":137,"column_start":5,"column_end":22},"name":"MissingEntryPoint","qualname":"::device::ShaderError::MissingEntryPoint","value":"ShaderError::MissingEntryPoint(String)","parent":{"krate":0,"index":3317},"children":[],"decl_id":null,"docs":" Missing entry point.\n","sig":null,"attributes":[{"value":"fail(display = \"shader is missing an entry point: {}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97801,"byte_end":97862,"line_start":136,"line_end":136,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3324},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":98017,"byte_end":98034,"line_start":140,"line_end":140,"column_start":5,"column_end":22},"name":"InterfaceMismatch","qualname":"::device::ShaderError::InterfaceMismatch","value":"ShaderError::InterfaceMismatch(String)","parent":{"krate":0,"index":3317},"children":[],"decl_id":null,"docs":" Mismatch of interface (e.g missing push constants).\n","sig":null,"attributes":[{"value":"fail(display = \"shader interface mismatch: {}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97958,"byte_end":98012,"line_start":139,"line_end":139,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3327},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":98151,"byte_end":98167,"line_start":143,"line_end":143,"column_start":5,"column_end":21},"name":"UnsupportedStage","qualname":"::device::ShaderError::UnsupportedStage","value":"ShaderError::UnsupportedStage(pso::Stage)","parent":{"krate":0,"index":3317},"children":[],"decl_id":null,"docs":" Shader stage is not supported.\n","sig":null,"attributes":[{"value":"fail(display = \"shader stage \\\"{}\\\" is unsupported\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":98087,"byte_end":98146,"line_start":142,"line_end":142,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3330},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":98262,"byte_end":98273,"line_start":146,"line_end":146,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::device::ShaderError::OutOfMemory","value":"ShaderError::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":3317},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":98230,"byte_end":98257,"line_start":145,"line_end":145,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":3317},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97626,"byte_end":97637,"line_start":131,"line_end":131,"column_start":10,"column_end":21},"name":"ShaderError","qualname":"::device::ShaderError","value":"ShaderError::{CompilationFailed, MissingEntryPoint, InterfaceMismatch, UnsupportedStage, OutOfMemory}","parent":null,"children":[{"krate":0,"index":3318},{"krate":0,"index":3321},{"krate":0,"index":3324},{"krate":0,"index":3327},{"krate":0,"index":3330}],"decl_id":null,"docs":" An error from creating a shader module.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":99225,"byte_end":99231,"line_start":175,"line_end":175,"column_start":11,"column_end":17},"name":"Device","qualname":"::device::Device","value":"Device<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":679},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":723},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":732},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":741},{"krate":0,"index":744},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":99641,"byte_end":99656,"line_start":184,"line_end":184,"column_start":15,"column_end":30},"name":"allocate_memory","qualname":"::device::Device::allocate_memory","value":"fn (&self, memory_type: MemoryTypeId, size: u64) -> Result<B::Memory, AllocationError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Allocates a memory segment of a specified type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":99814,"byte_end":99825,"line_start":191,"line_end":191,"column_start":15,"column_end":26},"name":"free_memory","qualname":"::device::Device::free_memory","value":"fn (&self, memory: B::Memory) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Free device memory\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":100019,"byte_end":100038,"line_start":196,"line_end":196,"column_start":15,"column_end":34},"name":"create_command_pool","qualname":"::device::Device::create_command_pool","value":"fn (&self, family: QueueFamilyId, create_flags: CommandPoolCreateFlags) -> Result<B::CommandPool, OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new command pool for a given queue family.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":100247,"byte_end":100272,"line_start":203,"line_end":203,"column_start":15,"column_end":40},"name":"create_command_pool_typed","qualname":"::device::Device::create_command_pool_typed","value":"fn <C> (&self, group: &QueueGroup<B, C>, flags: CommandPoolCreateFlags) -> Result<CommandPool<B, C>, OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a strongly typed command pool wrapper.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":100570,"byte_end":100590,"line_start":213,"line_end":213,"column_start":15,"column_end":35},"name":"destroy_command_pool","qualname":"::device::Device::destroy_command_pool","value":"fn (&self, pool: B::CommandPool) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a command pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":100997,"byte_end":101015,"line_start":220,"line_end":220,"column_start":15,"column_end":33},"name":"create_render_pass","qualname":"::device::Device::create_render_pass","value":"fn <'a, IA, IS, ID> (&self, attachments: IA, subpasses: IS, dependencies: ID) -> Result<B::RenderPass, OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a render pass with the given attachments and subpasses.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":101445,"byte_end":101464,"line_start":235,"line_end":235,"column_start":15,"column_end":34},"name":"destroy_render_pass","qualname":"::device::Device::destroy_render_pass","value":"fn (&self, rp: B::RenderPass) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a `RenderPass`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":102505,"byte_end":102527,"line_start":254,"line_end":254,"column_start":15,"column_end":37},"name":"create_pipeline_layout","qualname":"::device::Device::create_pipeline_layout","value":"fn <IS, IR> (&self, set_layouts: IS, push_constant: IR) -> Result<B::PipelineLayout, OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new pipeline layout object.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":102883,"byte_end":102906,"line_start":266,"line_end":266,"column_start":15,"column_end":38},"name":"destroy_pipeline_layout","qualname":"::device::Device::destroy_pipeline_layout","value":"fn (&self, layout: B::PipelineLayout) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a pipeline layout object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":102997,"byte_end":103018,"line_start":269,"line_end":269,"column_start":15,"column_end":36},"name":"create_pipeline_cache","qualname":"::device::Device::create_pipeline_cache","value":"fn (&self, data: Option<&[u8]>) -> Result<B::PipelineCache, OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a pipeline cache object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":103177,"byte_end":103200,"line_start":275,"line_end":275,"column_start":15,"column_end":38},"name":"get_pipeline_cache_data","qualname":"::device::Device::get_pipeline_cache_data","value":"fn (&self, cache: &B::PipelineCache) -> Result<Vec<u8>, OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Retrieve data from pipeline cache object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":103375,"byte_end":103396,"line_start":281,"line_end":281,"column_start":15,"column_end":36},"name":"merge_pipeline_caches","qualname":"::device::Device::merge_pipeline_caches","value":"fn <I> (&self, target: &B::PipelineCache, sources: I) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Merge a number of source pipeline caches into the target one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":103638,"byte_end":103660,"line_start":291,"line_end":291,"column_start":15,"column_end":37},"name":"destroy_pipeline_cache","qualname":"::device::Device::destroy_pipeline_cache","value":"fn (&self, cache: B::PipelineCache) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a pipeline cache object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":103745,"byte_end":103769,"line_start":294,"line_end":294,"column_start":15,"column_end":39},"name":"create_graphics_pipeline","qualname":"::device::Device::create_graphics_pipeline","value":"fn <'a> (&self, desc: &pso::GraphicsPipelineDesc<'a, B>, cache: Option<&B::PipelineCache>) -> Result<B::GraphicsPipeline, pso::CreationError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a graphics pipeline.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":104083,"byte_end":104108,"line_start":304,"line_end":304,"column_start":15,"column_end":40},"name":"create_graphics_pipelines","qualname":"::device::Device::create_graphics_pipelines","value":"fn <'a, I> (&self, descs: I, cache: Option<&B::PipelineCache>) -> Vec<Result<B::GraphicsPipeline, pso::CreationError>>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create graphics pipelines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":104721,"byte_end":104746,"line_start":323,"line_end":323,"column_start":15,"column_end":40},"name":"destroy_graphics_pipeline","qualname":"::device::Device::destroy_graphics_pipeline","value":"fn (&self, pipeline: B::GraphicsPipeline) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a graphics pipeline.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":104836,"byte_end":104859,"line_start":326,"line_end":326,"column_start":15,"column_end":38},"name":"create_compute_pipeline","qualname":"::device::Device::create_compute_pipeline","value":"fn <'a> (&self, desc: &pso::ComputePipelineDesc<'a, B>, cache: Option<&B::PipelineCache>) -> Result<B::ComputePipeline, pso::CreationError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a compute pipeline.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":105169,"byte_end":105193,"line_start":336,"line_end":336,"column_start":15,"column_end":39},"name":"create_compute_pipelines","qualname":"::device::Device::create_compute_pipelines","value":"fn <'a, I> (&self, descs: I, cache: Option<&B::PipelineCache>) -> Vec<Result<B::ComputePipeline, pso::CreationError>>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create compute pipelines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":105800,"byte_end":105824,"line_start":355,"line_end":355,"column_start":15,"column_end":39},"name":"destroy_compute_pipeline","qualname":"::device::Device::destroy_compute_pipeline","value":"fn (&self, pipeline: B::ComputePipeline) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a compute pipeline.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":105918,"byte_end":105936,"line_start":358,"line_end":358,"column_start":15,"column_end":33},"name":"create_framebuffer","qualname":"::device::Device::create_framebuffer","value":"fn <I> (&self, pass: &B::RenderPass, attachments: I, extent: image::Extent) -> Result<B::Framebuffer, OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new framebuffer object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":106362,"byte_end":106381,"line_start":372,"line_end":372,"column_start":15,"column_end":34},"name":"destroy_framebuffer","qualname":"::device::Device::destroy_framebuffer","value":"fn (&self, buf: B::Framebuffer) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a framebuffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":106692,"byte_end":106712,"line_start":378,"line_end":378,"column_start":15,"column_end":35},"name":"create_shader_module","qualname":"::device::Device::create_shader_module","value":"fn (&self, spirv_data: &[u8]) -> Result<B::ShaderModule, ShaderError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new shader module object through the SPIR-V binary data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":106966,"byte_end":106987,"line_start":386,"line_end":386,"column_start":15,"column_end":36},"name":"destroy_shader_module","qualname":"::device::Device::destroy_shader_module","value":"fn (&self, shader: B::ShaderModule) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a shader module module","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":107177,"byte_end":107190,"line_start":391,"line_end":391,"column_start":15,"column_end":28},"name":"create_buffer","qualname":"::device::Device::create_buffer","value":"fn (&self, size: u64, usage: buffer::Usage) -> Result<B::Buffer, buffer::CreationError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new buffer (unbound).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":107369,"byte_end":107392,"line_start":398,"line_end":398,"column_start":15,"column_end":38},"name":"get_buffer_requirements","qualname":"::device::Device::get_buffer_requirements","value":"fn (&self, buf: &B::Buffer) -> Requirements","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Get memory requirements for the buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":107643,"byte_end":107661,"line_start":404,"line_end":404,"column_start":15,"column_end":33},"name":"bind_buffer_memory","qualname":"::device::Device::bind_buffer_memory","value":"fn (&self, memory: &B::Memory, offset: u64, buf: &mut B::Buffer) -> Result<(), BindError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Bind memory to a buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":107977,"byte_end":107991,"line_start":415,"line_end":415,"column_start":15,"column_end":29},"name":"destroy_buffer","qualname":"::device::Device::destroy_buffer","value":"fn (&self, buffer: B::Buffer) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":108074,"byte_end":108092,"line_start":418,"line_end":418,"column_start":15,"column_end":33},"name":"create_buffer_view","qualname":"::device::Device::create_buffer_view","value":"fn <R> (&self, buf: &B::Buffer, fmt: Option<format::Format>, range: R) -> Result<B::BufferView, buffer::ViewCreationError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new buffer view object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":108318,"byte_end":108337,"line_start":426,"line_end":426,"column_start":15,"column_end":34},"name":"destroy_buffer_view","qualname":"::device::Device::destroy_buffer_view","value":"fn (&self, view: B::BufferView) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a buffer view object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":108416,"byte_end":108428,"line_start":429,"line_end":429,"column_start":15,"column_end":27},"name":"create_image","qualname":"::device::Device::create_image","value":"fn (&self, kind: image::Kind, mip_levels: image::Level, format: format::Format, tiling: image::Tiling, usage: image::Usage, view_caps: image::ViewCapabilities) -> Result<B::Image, image::CreationError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new image object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":108752,"byte_end":108774,"line_start":440,"line_end":440,"column_start":15,"column_end":37},"name":"get_image_requirements","qualname":"::device::Device::get_image_requirements","value":"fn (&self, image: &B::Image) -> Requirements","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Get memory requirements for the Image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":108840,"byte_end":108871,"line_start":443,"line_end":443,"column_start":15,"column_end":46},"name":"get_image_subresource_footprint","qualname":"::device::Device::get_image_subresource_footprint","value":"fn (&self, image: &B::Image, subresource: image::Subresource) -> image::SubresourceFootprint","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":109054,"byte_end":109071,"line_start":450,"line_end":450,"column_start":15,"column_end":32},"name":"bind_image_memory","qualname":"::device::Device::bind_image_memory","value":"fn (&self, memory: &B::Memory, offset: u64, image: &mut B::Image) -> Result<(), BindError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Bind device memory to an image object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":109387,"byte_end":109400,"line_start":461,"line_end":461,"column_start":15,"column_end":28},"name":"destroy_image","qualname":"::device::Device::destroy_image","value":"fn (&self, image: B::Image) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy an image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":109493,"byte_end":109510,"line_start":464,"line_end":464,"column_start":15,"column_end":32},"name":"create_image_view","qualname":"::device::Device::create_image_view","value":"fn (&self, image: &B::Image, view_kind: image::ViewKind, format: format::Format, swizzle: format::Swizzle, range: image::SubresourceRange) -> Result<B::ImageView, image::ViewError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create an image view from an existing image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":109796,"byte_end":109814,"line_start":474,"line_end":474,"column_start":15,"column_end":33},"name":"destroy_image_view","qualname":"::device::Device::destroy_image_view","value":"fn (&self, view: B::ImageView) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy an image view object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":109894,"byte_end":109908,"line_start":477,"line_end":477,"column_start":15,"column_end":29},"name":"create_sampler","qualname":"::device::Device::create_sampler","value":"fn (&self, info: image::SamplerInfo) -> Result<B::Sampler, AllocationError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new sampler object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":110053,"byte_end":110068,"line_start":483,"line_end":483,"column_start":15,"column_end":30},"name":"destroy_sampler","qualname":"::device::Device::destroy_sampler","value":"fn (&self, sampler: B::Sampler) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a sampler object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":110301,"byte_end":110323,"line_start":489,"line_end":489,"column_start":15,"column_end":37},"name":"create_descriptor_pool","qualname":"::device::Device::create_descriptor_pool","value":"fn <I> (&self, max_sets: usize, descriptor_ranges: I, flags: DescriptorPoolCreateFlags) -> Result<B::DescriptorPool, OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a descriptor pool.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":110881,"byte_end":110904,"line_start":504,"line_end":504,"column_start":15,"column_end":38},"name":"destroy_descriptor_pool","qualname":"::device::Device::destroy_descriptor_pool","value":"fn (&self, pool: B::DescriptorPool) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a descriptor pool object","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":111383,"byte_end":111411,"line_start":512,"line_end":512,"column_start":15,"column_end":43},"name":"create_descriptor_set_layout","qualname":"::device::Device::create_descriptor_set_layout","value":"fn <I, J> (&self, bindings: I, immutable_samplers: J) -> Result<B::DescriptorSetLayout, OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a descriptor set layout.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":111756,"byte_end":111785,"line_start":524,"line_end":524,"column_start":15,"column_end":44},"name":"destroy_descriptor_set_layout","qualname":"::device::Device::destroy_descriptor_set_layout","value":"fn (&self, layout: B::DescriptorSetLayout) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a descriptor set layout object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":111911,"byte_end":111932,"line_start":527,"line_end":527,"column_start":15,"column_end":36},"name":"write_descriptor_sets","qualname":"::device::Device::write_descriptor_sets","value":"fn <'a, I, J> (&self, write_iter: I) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Specifying the parameters of a descriptor set write operation\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":112192,"byte_end":112212,"line_start":534,"line_end":534,"column_start":15,"column_end":35},"name":"copy_descriptor_sets","qualname":"::device::Device::copy_descriptor_sets","value":"fn <'a, I> (&self, copy_iter: I) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Structure specifying a copy descriptor set operation\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":112525,"byte_end":112535,"line_start":542,"line_end":542,"column_start":15,"column_end":25},"name":"map_memory","qualname":"::device::Device::map_memory","value":"fn <R> (&self, memory: &B::Memory, range: R) -> Result<*mut u8, mapping::Error>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Map a memory object into application address space","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":112697,"byte_end":112723,"line_start":547,"line_end":547,"column_start":15,"column_end":41},"name":"flush_mapped_memory_ranges","qualname":"::device::Device::flush_mapped_memory_ranges","value":"fn <'a, I, R> (&self, ranges: I) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Flush mapped memory ranges\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":112970,"byte_end":113001,"line_start":554,"line_end":554,"column_start":15,"column_end":46},"name":"invalidate_mapped_memory_ranges","qualname":"::device::Device::invalidate_mapped_memory_ranges","value":"fn <'a, I, R> (&self, ranges: I) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Invalidate ranges of non-coherent memory from the host caches\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":113293,"byte_end":113305,"line_start":564,"line_end":564,"column_start":15,"column_end":27},"name":"unmap_memory","qualname":"::device::Device::unmap_memory","value":"fn (&self, memory: &B::Memory) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Unmap a memory object once host access to it is no longer needed by the application\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":113471,"byte_end":113493,"line_start":569,"line_end":569,"column_start":15,"column_end":37},"name":"acquire_mapping_reader","qualname":"::device::Device::acquire_mapping_reader","value":"fn <'a, T> (&self, memory: &'a B::Memory, range: Range<u64>) -> Result<mapping::Reader<'a, B, T>, mapping::Error>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Acquire a mapping Reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":114199,"byte_end":114221,"line_start":592,"line_end":592,"column_start":15,"column_end":37},"name":"release_mapping_reader","qualname":"::device::Device::release_mapping_reader","value":"fn <'a, T> (&self, mut reader: mapping::Reader<'a, B, T>) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Release a mapping Reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":114494,"byte_end":114516,"line_start":600,"line_end":600,"column_start":15,"column_end":37},"name":"acquire_mapping_writer","qualname":"::device::Device::acquire_mapping_writer","value":"fn <'a, T> (&self, memory: &'a B::Memory, range: Range<u64>) -> Result<mapping::Writer<'a, B, T>, mapping::Error>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Acquire a mapping Writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":115128,"byte_end":115150,"line_start":621,"line_end":621,"column_start":15,"column_end":37},"name":"release_mapping_writer","qualname":"::device::Device::release_mapping_writer","value":"fn <'a, T> (&self, mut writer: mapping::Writer<'a, B, T>) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Release a mapping Writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":115490,"byte_end":115506,"line_start":632,"line_end":632,"column_start":8,"column_end":24},"name":"create_semaphore","qualname":"::device::Device::create_semaphore","value":"fn (&self) -> Result<B::Semaphore, OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new semaphore object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":115602,"byte_end":115619,"line_start":635,"line_end":635,"column_start":15,"column_end":32},"name":"destroy_semaphore","qualname":"::device::Device::destroy_semaphore","value":"fn (&self, semaphore: B::Semaphore) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a semaphore object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":116192,"byte_end":116204,"line_start":644,"line_end":644,"column_start":8,"column_end":20},"name":"create_fence","qualname":"::device::Device::create_fence","value":"fn (&self, signaled: bool) -> Result<B::Fence, OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new fence object","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":116285,"byte_end":116296,"line_start":647,"line_end":647,"column_start":15,"column_end":26},"name":"reset_fence","qualname":"::device::Device::reset_fence","value":"fn (&self, fence: &B::Fence) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":116425,"byte_end":116437,"line_start":652,"line_end":652,"column_start":15,"column_end":27},"name":"reset_fences","qualname":"::device::Device::reset_fences","value":"fn <I> (&self, fences: I) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":116802,"byte_end":116816,"line_start":665,"line_end":665,"column_start":15,"column_end":29},"name":"wait_for_fence","qualname":"::device::Device::wait_for_fence","value":"fn (&self, fence: &B::Fence, timeout_ns: u64) -> Result<bool, OomOrDeviceLost>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Blocks until the given fence is signaled.\n Returns true if the fence was signaled before the timeout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":117151,"byte_end":117166,"line_start":675,"line_end":675,"column_start":15,"column_end":30},"name":"wait_for_fences","qualname":"::device::Device::wait_for_fences","value":"fn <I> (&self, fences: I, wait: WaitFor, timeout_ns: u64) -> Result<bool, OomOrDeviceLost>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Blocks until all or one of the given fences are signaled.\n Returns true if fences were signaled before the timeout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":118802,"byte_end":118818,"line_start":724,"line_end":724,"column_start":15,"column_end":31},"name":"get_fence_status","qualname":"::device::Device::get_fence_status","value":"fn (&self, fence: &B::Fence) -> Result<bool, DeviceLost>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" true for signaled, false for not ready\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":118919,"byte_end":118932,"line_start":727,"line_end":727,"column_start":15,"column_end":28},"name":"destroy_fence","qualname":"::device::Device::destroy_fence","value":"fn (&self, fence: B::Fence) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a fence object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":119168,"byte_end":119185,"line_start":733,"line_end":733,"column_start":15,"column_end":32},"name":"create_query_pool","qualname":"::device::Device::create_query_pool","value":"fn (&self, ty: query::Type, count: query::Id) -> Result<B::QueryPool, query::CreationError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new query pool object","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":119357,"byte_end":119375,"line_start":740,"line_end":740,"column_start":15,"column_end":33},"name":"destroy_query_pool","qualname":"::device::Device::destroy_query_pool","value":"fn (&self, pool: B::QueryPool) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Destroy a query pool object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":119592,"byte_end":119614,"line_start":744,"line_end":744,"column_start":15,"column_end":37},"name":"get_query_pool_results","qualname":"::device::Device::get_query_pool_results","value":"fn (&self, pool: &B::QueryPool, queries: Range<query::Id>, data: &mut [u8], stride: buffer::Offset, flags: query::ResultFlags) -> Result<bool, OomOrDeviceLost>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Get query pool results into the specified CPU memory.\n Returns `Ok(false)` if the results are not ready yet and neither of `WAIT` or `PARTIAL` flags are set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":120973,"byte_end":120989,"line_start":782,"line_end":782,"column_start":15,"column_end":31},"name":"create_swapchain","qualname":"::device::Device::create_swapchain","value":"fn (&self, surface: &mut B::Surface, config: SwapchainConfig, old_swapchain: Option<B::Swapchain>) -> Result<(B::Swapchain, Vec<B::Image>), window::CreationError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Create a new swapchain from a surface and a queue family, optionally providing the old\n swapchain to aid in resource reuse and rendering continuity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":121212,"byte_end":121229,"line_start":790,"line_end":790,"column_start":15,"column_end":32},"name":"destroy_swapchain","qualname":"::device::Device::destroy_swapchain","value":"fn (&self, swapchain: B::Swapchain) -> ()","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":121419,"byte_end":121428,"line_start":795,"line_end":795,"column_start":8,"column_end":17},"name":"wait_idle","qualname":"::device::Device::wait_idle","value":"fn (&self) -> Result<(), HostExecutionError>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Wait for all queues associated with this device to idle.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","parent":null,"children":[{"krate":0,"index":3350},{"krate":0,"index":3373},{"krate":0,"index":3378},{"krate":0,"index":3371},{"krate":0,"index":3369},{"krate":0,"index":3367},{"krate":0,"index":3365},{"krate":0,"index":3381},{"krate":0,"index":3396},{"krate":0,"index":3401},{"krate":0,"index":3394},{"krate":0,"index":3392},{"krate":0,"index":3390},{"krate":0,"index":3388}],"decl_id":null,"docs":" Return values from function calls.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3351},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":121793,"byte_end":121808,"line_start":9,"line_end":9,"column_start":5,"column_end":20},"name":"OutOfHostMemory","qualname":"::error::DeviceCreationError::OutOfHostMemory","value":"DeviceCreationError::OutOfHostMemory","parent":{"krate":0,"index":3350},"children":[],"decl_id":null,"docs":" Memory allocation on the host side failed.\n This could be caused by a lack of memory.\n","sig":null,"attributes":[{"value":"fail(display = \"Host memory allocation failed.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":121737,"byte_end":121788,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3353},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":121975,"byte_end":121992,"line_start":13,"line_end":13,"column_start":5,"column_end":22},"name":"OutOfDeviceMemory","qualname":"::error::DeviceCreationError::OutOfDeviceMemory","value":"DeviceCreationError::OutOfDeviceMemory","parent":{"krate":0,"index":3350},"children":[],"decl_id":null,"docs":" Memory allocation on the device side failed.\n This could be caused by a lack of memory.\n","sig":null,"attributes":[{"value":"fail(display = \"Device memory allocation failed.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":121917,"byte_end":121970,"line_start":12,"line_end":12,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3355},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":122129,"byte_end":122149,"line_start":16,"line_end":16,"column_start":5,"column_end":25},"name":"InitializationFailed","qualname":"::error::DeviceCreationError::InitializationFailed","value":"DeviceCreationError::InitializationFailed","parent":{"krate":0,"index":3350},"children":[],"decl_id":null,"docs":" Device initialization failed due to implementation specific errors.\n","sig":null,"attributes":[{"value":"fail(display = \"Device initialization failed.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":122074,"byte_end":122124,"line_start":15,"line_end":15,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3357},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":122329,"byte_end":122345,"line_start":20,"line_end":20,"column_start":5,"column_end":21},"name":"MissingExtension","qualname":"::error::DeviceCreationError::MissingExtension","value":"DeviceCreationError::MissingExtension","parent":{"krate":0,"index":3350},"children":[],"decl_id":null,"docs":" At least one of the user requested extensions if not supported by the\n physical device.\n","sig":null,"attributes":[{"value":"fail(display = \"One or multiple extensions are not supported.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":122258,"byte_end":122324,"line_start":19,"line_end":19,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3359},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":122644,"byte_end":122658,"line_start":27,"line_end":27,"column_start":5,"column_end":19},"name":"MissingFeature","qualname":"::error::DeviceCreationError::MissingFeature","value":"DeviceCreationError::MissingFeature","parent":{"krate":0,"index":3350},"children":[],"decl_id":null,"docs":" At least one of the user requested features if not supported by the\n physical device.","sig":null,"attributes":[{"value":"fail(display = \"One or multiple features are not supported.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":122575,"byte_end":122639,"line_start":26,"line_end":26,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3361},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":122959,"byte_end":122973,"line_start":33,"line_end":33,"column_start":5,"column_end":19},"name":"TooManyObjects","qualname":"::error::DeviceCreationError::TooManyObjects","value":"DeviceCreationError::TooManyObjects","parent":{"krate":0,"index":3350},"children":[],"decl_id":null,"docs":" Too many logical devices have been created from this physical device.","sig":null,"attributes":[{"value":"fail(display = \"Too many device objects have been created.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":122891,"byte_end":122954,"line_start":32,"line_end":32,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3363},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":123237,"byte_end":123247,"line_start":40,"line_end":40,"column_start":5,"column_end":15},"name":"DeviceLost","qualname":"::error::DeviceCreationError::DeviceLost","value":"DeviceCreationError::DeviceLost","parent":{"krate":0,"index":3350},"children":[],"decl_id":null,"docs":" The logical or physical device are lost during the device creation\n process.","sig":null,"attributes":[{"value":"fail(display = \"Physical or logical device lost.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":123179,"byte_end":123232,"line_start":39,"line_end":39,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":3350},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":121610,"byte_end":121629,"line_start":5,"line_end":5,"column_start":10,"column_end":29},"name":"DeviceCreationError","qualname":"::error::DeviceCreationError","value":"DeviceCreationError::{OutOfHostMemory, OutOfDeviceMemory, InitializationFailed, MissingExtension, MissingFeature, TooManyObjects, DeviceLost}","parent":null,"children":[{"krate":0,"index":3351},{"krate":0,"index":3353},{"krate":0,"index":3355},{"krate":0,"index":3357},{"krate":0,"index":3359},{"krate":0,"index":3361},{"krate":0,"index":3363}],"decl_id":null,"docs":" Device creation errors during `open`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3382},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":123548,"byte_end":123563,"line_start":49,"line_end":49,"column_start":5,"column_end":20},"name":"OutOfHostMemory","qualname":"::error::HostExecutionError::OutOfHostMemory","value":"HostExecutionError::OutOfHostMemory","parent":{"krate":0,"index":3381},"children":[],"decl_id":null,"docs":" Memory allocation on the host side failed.\n This could be caused by a lack of memory.\n","sig":null,"attributes":[{"value":"fail(display = \"Host memory allocation failed.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":123492,"byte_end":123543,"line_start":48,"line_end":48,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3384},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":123730,"byte_end":123747,"line_start":53,"line_end":53,"column_start":5,"column_end":22},"name":"OutOfDeviceMemory","qualname":"::error::HostExecutionError::OutOfDeviceMemory","value":"HostExecutionError::OutOfDeviceMemory","parent":{"krate":0,"index":3381},"children":[],"decl_id":null,"docs":" Memory allocation on the device side failed.\n This could be caused by a lack of memory.\n","sig":null,"attributes":[{"value":"fail(display = \"Device memory allocation failed.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":123672,"byte_end":123725,"line_start":52,"line_end":52,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3386},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":124011,"byte_end":124021,"line_start":60,"line_end":60,"column_start":5,"column_end":15},"name":"DeviceLost","qualname":"::error::HostExecutionError::DeviceLost","value":"HostExecutionError::DeviceLost","parent":{"krate":0,"index":3381},"children":[],"decl_id":null,"docs":" The logical or physical device are lost during the device creation\n process.","sig":null,"attributes":[{"value":"fail(display = \"Physical or logical device lost.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":123953,"byte_end":124006,"line_start":59,"line_end":59,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":3381},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\error.rs","byte_start":123366,"byte_end":123384,"line_start":45,"line_end":45,"column_start":10,"column_end":28},"name":"HostExecutionError","qualname":"::error::HostExecutionError","value":"HostExecutionError::{OutOfHostMemory, OutOfDeviceMemory, DeviceLost}","parent":null,"children":[{"krate":0,"index":3382},{"krate":0,"index":3384},{"krate":0,"index":3386}],"decl_id":null,"docs":" Errors during execution of operations on the host side.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","parent":null,"children":[{"krate":0,"index":3404},{"krate":0,"index":3466},{"krate":0,"index":3425},{"krate":0,"index":3424},{"krate":0,"index":3421},{"krate":0,"index":3419},{"krate":0,"index":3417},{"krate":0,"index":3411},{"krate":0,"index":3409},{"krate":0,"index":3406},{"krate":0,"index":3472},{"krate":0,"index":3479},{"krate":0,"index":3481},{"krate":0,"index":3483},{"krate":0,"index":3485},{"krate":0,"index":3487},{"krate":0,"index":3496},{"krate":0,"index":3499},{"krate":0,"index":3501},{"krate":0,"index":3504},{"krate":0,"index":3506},{"krate":0,"index":3509},{"krate":0,"index":3511},{"krate":0,"index":3514},{"krate":0,"index":3516},{"krate":0,"index":3519},{"krate":0,"index":3522},{"krate":0,"index":3545},{"krate":0,"index":3581},{"krate":0,"index":3580},{"krate":0,"index":3578},{"krate":0,"index":3576},{"krate":0,"index":3573},{"krate":0,"index":3571},{"krate":0,"index":3568},{"krate":0,"index":3550},{"krate":0,"index":774},{"krate":0,"index":3583},{"krate":0,"index":3619},{"krate":0,"index":3618},{"krate":0,"index":3616},{"krate":0,"index":3614},{"krate":0,"index":3611},{"krate":0,"index":3609},{"krate":0,"index":3606},{"krate":0,"index":3588},{"krate":0,"index":776},{"krate":0,"index":3621},{"krate":0,"index":3701},{"krate":0,"index":3700},{"krate":0,"index":3698},{"krate":0,"index":3696},{"krate":0,"index":3693},{"krate":0,"index":3691},{"krate":0,"index":3689},{"krate":0,"index":3687},{"krate":0,"index":3681},{"krate":0,"index":3634},{"krate":0,"index":3703},{"krate":0,"index":3763},{"krate":0,"index":3762},{"krate":0,"index":3760},{"krate":0,"index":3758},{"krate":0,"index":3755},{"krate":0,"index":3753},{"krate":0,"index":3750},{"krate":0,"index":3732},{"krate":0,"index":3726},{"krate":0,"index":3709},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":3765},{"krate":0,"index":3833},{"krate":0,"index":3831},{"krate":0,"index":3830},{"krate":0,"index":3828},{"krate":0,"index":3825},{"krate":0,"index":3823},{"krate":0,"index":3820},{"krate":0,"index":3814},{"krate":0,"index":3769},{"krate":0,"index":3835},{"krate":0,"index":3903},{"krate":0,"index":3897},{"krate":0,"index":3856},{"krate":0,"index":3855},{"krate":0,"index":3852},{"krate":0,"index":3850},{"krate":0,"index":3848},{"krate":0,"index":3842},{"krate":0,"index":3840},{"krate":0,"index":3837},{"krate":0,"index":3905},{"krate":0,"index":3918},{"krate":0,"index":3920},{"krate":0,"index":3922},{"krate":0,"index":3924},{"krate":0,"index":3926},{"krate":0,"index":3941},{"krate":0,"index":3944},{"krate":0,"index":3946},{"krate":0,"index":3949},{"krate":0,"index":3951},{"krate":0,"index":3954},{"krate":0,"index":3956},{"krate":0,"index":3959},{"krate":0,"index":3961},{"krate":0,"index":3964},{"krate":0,"index":3967},{"krate":0,"index":4008},{"krate":0,"index":4076},{"krate":0,"index":4070},{"krate":0,"index":4029},{"krate":0,"index":4028},{"krate":0,"index":4025},{"krate":0,"index":4023},{"krate":0,"index":4021},{"krate":0,"index":4015},{"krate":0,"index":4013},{"krate":0,"index":4010},{"krate":0,"index":4078},{"krate":0,"index":4086},{"krate":0,"index":4088},{"krate":0,"index":4090},{"krate":0,"index":4092},{"krate":0,"index":4094},{"krate":0,"index":4104},{"krate":0,"index":4107},{"krate":0,"index":4109},{"krate":0,"index":4112},{"krate":0,"index":4114},{"krate":0,"index":4117},{"krate":0,"index":4119},{"krate":0,"index":4122},{"krate":0,"index":4124},{"krate":0,"index":4127},{"krate":0,"index":4130},{"krate":0,"index":4156},{"krate":0,"index":4248},{"krate":0,"index":4247},{"krate":0,"index":4245},{"krate":0,"index":4243},{"krate":0,"index":4240},{"krate":0,"index":4238},{"krate":0,"index":4236},{"krate":0,"index":4234},{"krate":0,"index":4228},{"krate":0,"index":4175},{"krate":0,"index":781},{"krate":0,"index":4253},{"krate":0,"index":4569},{"krate":0,"index":4568},{"krate":0,"index":4566},{"krate":0,"index":4564},{"krate":0,"index":4561},{"krate":0,"index":4559},{"krate":0,"index":4557},{"krate":0,"index":4555},{"krate":0,"index":4549},{"krate":0,"index":4384},{"krate":0,"index":4250},{"krate":0,"index":4571},{"krate":0,"index":4621},{"krate":0,"index":4620},{"krate":0,"index":4618},{"krate":0,"index":4616},{"krate":0,"index":4613},{"krate":0,"index":4611},{"krate":0,"index":4608},{"krate":0,"index":4598},{"krate":0,"index":4592},{"krate":0,"index":4575},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":4994},{"krate":0,"index":5791},{"krate":0,"index":5790},{"krate":0,"index":5788},{"krate":0,"index":5786},{"krate":0,"index":5783},{"krate":0,"index":5781},{"krate":0,"index":5779},{"krate":0,"index":5777},{"krate":0,"index":5771},{"krate":0,"index":5366},{"krate":0,"index":4623},{"krate":0,"index":4624},{"krate":0,"index":5793},{"krate":0,"index":5830},{"krate":0,"index":5829},{"krate":0,"index":5827},{"krate":0,"index":5825},{"krate":0,"index":5822},{"krate":0,"index":5820},{"krate":0,"index":5818},{"krate":0,"index":5816},{"krate":0,"index":5810},{"krate":0,"index":5795},{"krate":0,"index":4626},{"krate":0,"index":5832},{"krate":0,"index":5869},{"krate":0,"index":5868},{"krate":0,"index":5866},{"krate":0,"index":5864},{"krate":0,"index":5861},{"krate":0,"index":5859},{"krate":0,"index":5857},{"krate":0,"index":5855},{"krate":0,"index":5849},{"krate":0,"index":5834},{"krate":0,"index":4628},{"krate":0,"index":5871},{"krate":0,"index":5908},{"krate":0,"index":5907},{"krate":0,"index":5905},{"krate":0,"index":5903},{"krate":0,"index":5900},{"krate":0,"index":5898},{"krate":0,"index":5896},{"krate":0,"index":5894},{"krate":0,"index":5888},{"krate":0,"index":5873},{"krate":0,"index":4630},{"krate":0,"index":5910},{"krate":0,"index":5947},{"krate":0,"index":5946},{"krate":0,"index":5944},{"krate":0,"index":5942},{"krate":0,"index":5939},{"krate":0,"index":5937},{"krate":0,"index":5935},{"krate":0,"index":5933},{"krate":0,"index":5927},{"krate":0,"index":5912},{"krate":0,"index":4632},{"krate":0,"index":5949},{"krate":0,"index":5986},{"krate":0,"index":5985},{"krate":0,"index":5983},{"krate":0,"index":5981},{"krate":0,"index":5978},{"krate":0,"index":5976},{"krate":0,"index":5974},{"krate":0,"index":5972},{"krate":0,"index":5966},{"krate":0,"index":5951},{"krate":0,"index":4634},{"krate":0,"index":5988},{"krate":0,"index":6025},{"krate":0,"index":6024},{"krate":0,"index":6022},{"krate":0,"index":6020},{"krate":0,"index":6017},{"krate":0,"index":6015},{"krate":0,"index":6013},{"krate":0,"index":6011},{"krate":0,"index":6005},{"krate":0,"index":5990},{"krate":0,"index":4636},{"krate":0,"index":6027},{"krate":0,"index":6064},{"krate":0,"index":6063},{"krate":0,"index":6061},{"krate":0,"index":6059},{"krate":0,"index":6056},{"krate":0,"index":6054},{"krate":0,"index":6052},{"krate":0,"index":6050},{"krate":0,"index":6044},{"krate":0,"index":6029},{"krate":0,"index":4638},{"krate":0,"index":6066},{"krate":0,"index":6103},{"krate":0,"index":6102},{"krate":0,"index":6100},{"krate":0,"index":6098},{"krate":0,"index":6095},{"krate":0,"index":6093},{"krate":0,"index":6091},{"krate":0,"index":6089},{"krate":0,"index":6083},{"krate":0,"index":6068},{"krate":0,"index":4640},{"krate":0,"index":6105},{"krate":0,"index":6142},{"krate":0,"index":6141},{"krate":0,"index":6139},{"krate":0,"index":6137},{"krate":0,"index":6134},{"krate":0,"index":6132},{"krate":0,"index":6130},{"krate":0,"index":6128},{"krate":0,"index":6122},{"krate":0,"index":6107},{"krate":0,"index":4642},{"krate":0,"index":6144},{"krate":0,"index":6181},{"krate":0,"index":6180},{"krate":0,"index":6178},{"krate":0,"index":6176},{"krate":0,"index":6173},{"krate":0,"index":6171},{"krate":0,"index":6169},{"krate":0,"index":6167},{"krate":0,"index":6161},{"krate":0,"index":6146},{"krate":0,"index":4644},{"krate":0,"index":6183},{"krate":0,"index":6220},{"krate":0,"index":6219},{"krate":0,"index":6217},{"krate":0,"index":6215},{"krate":0,"index":6212},{"krate":0,"index":6210},{"krate":0,"index":6208},{"krate":0,"index":6206},{"krate":0,"index":6200},{"krate":0,"index":6185},{"krate":0,"index":4646},{"krate":0,"index":6222},{"krate":0,"index":6259},{"krate":0,"index":6258},{"krate":0,"index":6256},{"krate":0,"index":6254},{"krate":0,"index":6251},{"krate":0,"index":6249},{"krate":0,"index":6247},{"krate":0,"index":6245},{"krate":0,"index":6239},{"krate":0,"index":6224},{"krate":0,"index":4648},{"krate":0,"index":6261},{"krate":0,"index":6298},{"krate":0,"index":6297},{"krate":0,"index":6295},{"krate":0,"index":6293},{"krate":0,"index":6290},{"krate":0,"index":6288},{"krate":0,"index":6286},{"krate":0,"index":6284},{"krate":0,"index":6278},{"krate":0,"index":6263},{"krate":0,"index":4650},{"krate":0,"index":6300},{"krate":0,"index":6337},{"krate":0,"index":6336},{"krate":0,"index":6334},{"krate":0,"index":6332},{"krate":0,"index":6329},{"krate":0,"index":6327},{"krate":0,"index":6325},{"krate":0,"index":6323},{"krate":0,"index":6317},{"krate":0,"index":6302},{"krate":0,"index":4652},{"krate":0,"index":6339},{"krate":0,"index":6376},{"krate":0,"index":6375},{"krate":0,"index":6373},{"krate":0,"index":6371},{"krate":0,"index":6368},{"krate":0,"index":6366},{"krate":0,"index":6364},{"krate":0,"index":6362},{"krate":0,"index":6356},{"krate":0,"index":6341},{"krate":0,"index":4654},{"krate":0,"index":6378},{"krate":0,"index":6415},{"krate":0,"index":6414},{"krate":0,"index":6412},{"krate":0,"index":6410},{"krate":0,"index":6407},{"krate":0,"index":6405},{"krate":0,"index":6403},{"krate":0,"index":6401},{"krate":0,"index":6395},{"krate":0,"index":6380},{"krate":0,"index":4656},{"krate":0,"index":6417},{"krate":0,"index":6454},{"krate":0,"index":6453},{"krate":0,"index":6451},{"krate":0,"index":6449},{"krate":0,"index":6446},{"krate":0,"index":6444},{"krate":0,"index":6442},{"krate":0,"index":6440},{"krate":0,"index":6434},{"krate":0,"index":6419},{"krate":0,"index":4658},{"krate":0,"index":6456},{"krate":0,"index":6493},{"krate":0,"index":6492},{"krate":0,"index":6490},{"krate":0,"index":6488},{"krate":0,"index":6485},{"krate":0,"index":6483},{"krate":0,"index":6481},{"krate":0,"index":6479},{"krate":0,"index":6473},{"krate":0,"index":6458},{"krate":0,"index":4660},{"krate":0,"index":6495},{"krate":0,"index":6532},{"krate":0,"index":6531},{"krate":0,"index":6529},{"krate":0,"index":6527},{"krate":0,"index":6524},{"krate":0,"index":6522},{"krate":0,"index":6520},{"krate":0,"index":6518},{"krate":0,"index":6512},{"krate":0,"index":6497},{"krate":0,"index":4662},{"krate":0,"index":6534},{"krate":0,"index":6571},{"krate":0,"index":6570},{"krate":0,"index":6568},{"krate":0,"index":6566},{"krate":0,"index":6563},{"krate":0,"index":6561},{"krate":0,"index":6559},{"krate":0,"index":6557},{"krate":0,"index":6551},{"krate":0,"index":6536},{"krate":0,"index":4664},{"krate":0,"index":6573},{"krate":0,"index":6610},{"krate":0,"index":6609},{"krate":0,"index":6607},{"krate":0,"index":6605},{"krate":0,"index":6602},{"krate":0,"index":6600},{"krate":0,"index":6598},{"krate":0,"index":6596},{"krate":0,"index":6590},{"krate":0,"index":6575},{"krate":0,"index":4666},{"krate":0,"index":6612},{"krate":0,"index":6649},{"krate":0,"index":6648},{"krate":0,"index":6646},{"krate":0,"index":6644},{"krate":0,"index":6641},{"krate":0,"index":6639},{"krate":0,"index":6637},{"krate":0,"index":6635},{"krate":0,"index":6629},{"krate":0,"index":6614},{"krate":0,"index":4668},{"krate":0,"index":6651},{"krate":0,"index":6688},{"krate":0,"index":6687},{"krate":0,"index":6685},{"krate":0,"index":6683},{"krate":0,"index":6680},{"krate":0,"index":6678},{"krate":0,"index":6676},{"krate":0,"index":6674},{"krate":0,"index":6668},{"krate":0,"index":6653},{"krate":0,"index":4670},{"krate":0,"index":6690},{"krate":0,"index":6727},{"krate":0,"index":6726},{"krate":0,"index":6724},{"krate":0,"index":6722},{"krate":0,"index":6719},{"krate":0,"index":6717},{"krate":0,"index":6715},{"krate":0,"index":6713},{"krate":0,"index":6707},{"krate":0,"index":6692},{"krate":0,"index":4672},{"krate":0,"index":6729},{"krate":0,"index":6766},{"krate":0,"index":6765},{"krate":0,"index":6763},{"krate":0,"index":6761},{"krate":0,"index":6758},{"krate":0,"index":6756},{"krate":0,"index":6754},{"krate":0,"index":6752},{"krate":0,"index":6746},{"krate":0,"index":6731},{"krate":0,"index":4674},{"krate":0,"index":6768},{"krate":0,"index":6805},{"krate":0,"index":6804},{"krate":0,"index":6802},{"krate":0,"index":6800},{"krate":0,"index":6797},{"krate":0,"index":6795},{"krate":0,"index":6793},{"krate":0,"index":6791},{"krate":0,"index":6785},{"krate":0,"index":6770},{"krate":0,"index":4676},{"krate":0,"index":6807},{"krate":0,"index":6844},{"krate":0,"index":6843},{"krate":0,"index":6841},{"krate":0,"index":6839},{"krate":0,"index":6836},{"krate":0,"index":6834},{"krate":0,"index":6832},{"krate":0,"index":6830},{"krate":0,"index":6824},{"krate":0,"index":6809},{"krate":0,"index":4678},{"krate":0,"index":6846},{"krate":0,"index":6883},{"krate":0,"index":6882},{"krate":0,"index":6880},{"krate":0,"index":6878},{"krate":0,"index":6875},{"krate":0,"index":6873},{"krate":0,"index":6871},{"krate":0,"index":6869},{"krate":0,"index":6863},{"krate":0,"index":6848},{"krate":0,"index":4680},{"krate":0,"index":6885},{"krate":0,"index":6922},{"krate":0,"index":6921},{"krate":0,"index":6919},{"krate":0,"index":6917},{"krate":0,"index":6914},{"krate":0,"index":6912},{"krate":0,"index":6910},{"krate":0,"index":6908},{"krate":0,"index":6902},{"krate":0,"index":6887},{"krate":0,"index":4682},{"krate":0,"index":6924},{"krate":0,"index":6961},{"krate":0,"index":6960},{"krate":0,"index":6958},{"krate":0,"index":6956},{"krate":0,"index":6953},{"krate":0,"index":6951},{"krate":0,"index":6949},{"krate":0,"index":6947},{"krate":0,"index":6941},{"krate":0,"index":6926},{"krate":0,"index":4684},{"krate":0,"index":6963},{"krate":0,"index":7000},{"krate":0,"index":6999},{"krate":0,"index":6997},{"krate":0,"index":6995},{"krate":0,"index":6992},{"krate":0,"index":6990},{"krate":0,"index":6988},{"krate":0,"index":6986},{"krate":0,"index":6980},{"krate":0,"index":6965},{"krate":0,"index":4686},{"krate":0,"index":7002},{"krate":0,"index":7039},{"krate":0,"index":7038},{"krate":0,"index":7036},{"krate":0,"index":7034},{"krate":0,"index":7031},{"krate":0,"index":7029},{"krate":0,"index":7027},{"krate":0,"index":7025},{"krate":0,"index":7019},{"krate":0,"index":7004},{"krate":0,"index":4688},{"krate":0,"index":7041},{"krate":0,"index":7078},{"krate":0,"index":7077},{"krate":0,"index":7075},{"krate":0,"index":7073},{"krate":0,"index":7070},{"krate":0,"index":7068},{"krate":0,"index":7066},{"krate":0,"index":7064},{"krate":0,"index":7058},{"krate":0,"index":7043},{"krate":0,"index":4690},{"krate":0,"index":7080},{"krate":0,"index":7117},{"krate":0,"index":7116},{"krate":0,"index":7114},{"krate":0,"index":7112},{"krate":0,"index":7109},{"krate":0,"index":7107},{"krate":0,"index":7105},{"krate":0,"index":7103},{"krate":0,"index":7097},{"krate":0,"index":7082},{"krate":0,"index":4692},{"krate":0,"index":7119},{"krate":0,"index":7156},{"krate":0,"index":7155},{"krate":0,"index":7153},{"krate":0,"index":7151},{"krate":0,"index":7148},{"krate":0,"index":7146},{"krate":0,"index":7144},{"krate":0,"index":7142},{"krate":0,"index":7136},{"krate":0,"index":7121},{"krate":0,"index":4694},{"krate":0,"index":7158},{"krate":0,"index":7195},{"krate":0,"index":7194},{"krate":0,"index":7192},{"krate":0,"index":7190},{"krate":0,"index":7187},{"krate":0,"index":7185},{"krate":0,"index":7183},{"krate":0,"index":7181},{"krate":0,"index":7175},{"krate":0,"index":7160},{"krate":0,"index":4696},{"krate":0,"index":7197},{"krate":0,"index":7234},{"krate":0,"index":7233},{"krate":0,"index":7231},{"krate":0,"index":7229},{"krate":0,"index":7226},{"krate":0,"index":7224},{"krate":0,"index":7222},{"krate":0,"index":7220},{"krate":0,"index":7214},{"krate":0,"index":7199},{"krate":0,"index":4698},{"krate":0,"index":7236},{"krate":0,"index":7273},{"krate":0,"index":7272},{"krate":0,"index":7270},{"krate":0,"index":7268},{"krate":0,"index":7265},{"krate":0,"index":7263},{"krate":0,"index":7261},{"krate":0,"index":7259},{"krate":0,"index":7253},{"krate":0,"index":7238},{"krate":0,"index":4700},{"krate":0,"index":7275},{"krate":0,"index":7312},{"krate":0,"index":7311},{"krate":0,"index":7309},{"krate":0,"index":7307},{"krate":0,"index":7304},{"krate":0,"index":7302},{"krate":0,"index":7300},{"krate":0,"index":7298},{"krate":0,"index":7292},{"krate":0,"index":7277},{"krate":0,"index":4702},{"krate":0,"index":7314},{"krate":0,"index":7351},{"krate":0,"index":7350},{"krate":0,"index":7348},{"krate":0,"index":7346},{"krate":0,"index":7343},{"krate":0,"index":7341},{"krate":0,"index":7339},{"krate":0,"index":7337},{"krate":0,"index":7331},{"krate":0,"index":7316},{"krate":0,"index":4704},{"krate":0,"index":7353},{"krate":0,"index":7390},{"krate":0,"index":7389},{"krate":0,"index":7387},{"krate":0,"index":7385},{"krate":0,"index":7382},{"krate":0,"index":7380},{"krate":0,"index":7378},{"krate":0,"index":7376},{"krate":0,"index":7370},{"krate":0,"index":7355},{"krate":0,"index":4706},{"krate":0,"index":7392},{"krate":0,"index":7429},{"krate":0,"index":7428},{"krate":0,"index":7426},{"krate":0,"index":7424},{"krate":0,"index":7421},{"krate":0,"index":7419},{"krate":0,"index":7417},{"krate":0,"index":7415},{"krate":0,"index":7409},{"krate":0,"index":7394},{"krate":0,"index":4708},{"krate":0,"index":7431},{"krate":0,"index":7468},{"krate":0,"index":7467},{"krate":0,"index":7465},{"krate":0,"index":7463},{"krate":0,"index":7460},{"krate":0,"index":7458},{"krate":0,"index":7456},{"krate":0,"index":7454},{"krate":0,"index":7448},{"krate":0,"index":7433},{"krate":0,"index":4710},{"krate":0,"index":7470},{"krate":0,"index":7507},{"krate":0,"index":7506},{"krate":0,"index":7504},{"krate":0,"index":7502},{"krate":0,"index":7499},{"krate":0,"index":7497},{"krate":0,"index":7495},{"krate":0,"index":7493},{"krate":0,"index":7487},{"krate":0,"index":7472},{"krate":0,"index":4712},{"krate":0,"index":7509},{"krate":0,"index":7546},{"krate":0,"index":7545},{"krate":0,"index":7543},{"krate":0,"index":7541},{"krate":0,"index":7538},{"krate":0,"index":7536},{"krate":0,"index":7534},{"krate":0,"index":7532},{"krate":0,"index":7526},{"krate":0,"index":7511},{"krate":0,"index":4714},{"krate":0,"index":7548},{"krate":0,"index":7585},{"krate":0,"index":7584},{"krate":0,"index":7582},{"krate":0,"index":7580},{"krate":0,"index":7577},{"krate":0,"index":7575},{"krate":0,"index":7573},{"krate":0,"index":7571},{"krate":0,"index":7565},{"krate":0,"index":7550},{"krate":0,"index":4716},{"krate":0,"index":7587},{"krate":0,"index":7624},{"krate":0,"index":7623},{"krate":0,"index":7621},{"krate":0,"index":7619},{"krate":0,"index":7616},{"krate":0,"index":7614},{"krate":0,"index":7612},{"krate":0,"index":7610},{"krate":0,"index":7604},{"krate":0,"index":7589},{"krate":0,"index":4718},{"krate":0,"index":7626},{"krate":0,"index":7663},{"krate":0,"index":7662},{"krate":0,"index":7660},{"krate":0,"index":7658},{"krate":0,"index":7655},{"krate":0,"index":7653},{"krate":0,"index":7651},{"krate":0,"index":7649},{"krate":0,"index":7643},{"krate":0,"index":7628},{"krate":0,"index":4720},{"krate":0,"index":7665},{"krate":0,"index":7702},{"krate":0,"index":7701},{"krate":0,"index":7699},{"krate":0,"index":7697},{"krate":0,"index":7694},{"krate":0,"index":7692},{"krate":0,"index":7690},{"krate":0,"index":7688},{"krate":0,"index":7682},{"krate":0,"index":7667},{"krate":0,"index":4722},{"krate":0,"index":7704},{"krate":0,"index":7741},{"krate":0,"index":7740},{"krate":0,"index":7738},{"krate":0,"index":7736},{"krate":0,"index":7733},{"krate":0,"index":7731},{"krate":0,"index":7729},{"krate":0,"index":7727},{"krate":0,"index":7721},{"krate":0,"index":7706},{"krate":0,"index":4724},{"krate":0,"index":7743},{"krate":0,"index":7780},{"krate":0,"index":7779},{"krate":0,"index":7777},{"krate":0,"index":7775},{"krate":0,"index":7772},{"krate":0,"index":7770},{"krate":0,"index":7768},{"krate":0,"index":7766},{"krate":0,"index":7760},{"krate":0,"index":7745},{"krate":0,"index":4726},{"krate":0,"index":7782},{"krate":0,"index":7819},{"krate":0,"index":7818},{"krate":0,"index":7816},{"krate":0,"index":7814},{"krate":0,"index":7811},{"krate":0,"index":7809},{"krate":0,"index":7807},{"krate":0,"index":7805},{"krate":0,"index":7799},{"krate":0,"index":7784},{"krate":0,"index":4728},{"krate":0,"index":7821},{"krate":0,"index":7858},{"krate":0,"index":7857},{"krate":0,"index":7855},{"krate":0,"index":7853},{"krate":0,"index":7850},{"krate":0,"index":7848},{"krate":0,"index":7846},{"krate":0,"index":7844},{"krate":0,"index":7838},{"krate":0,"index":7823},{"krate":0,"index":4730},{"krate":0,"index":7860},{"krate":0,"index":7897},{"krate":0,"index":7896},{"krate":0,"index":7894},{"krate":0,"index":7892},{"krate":0,"index":7889},{"krate":0,"index":7887},{"krate":0,"index":7885},{"krate":0,"index":7883},{"krate":0,"index":7877},{"krate":0,"index":7862},{"krate":0,"index":4732},{"krate":0,"index":7899},{"krate":0,"index":7936},{"krate":0,"index":7935},{"krate":0,"index":7933},{"krate":0,"index":7931},{"krate":0,"index":7928},{"krate":0,"index":7926},{"krate":0,"index":7924},{"krate":0,"index":7922},{"krate":0,"index":7916},{"krate":0,"index":7901},{"krate":0,"index":4734},{"krate":0,"index":7938},{"krate":0,"index":7975},{"krate":0,"index":7974},{"krate":0,"index":7972},{"krate":0,"index":7970},{"krate":0,"index":7967},{"krate":0,"index":7965},{"krate":0,"index":7963},{"krate":0,"index":7961},{"krate":0,"index":7955},{"krate":0,"index":7940},{"krate":0,"index":4736},{"krate":0,"index":7977},{"krate":0,"index":8014},{"krate":0,"index":8013},{"krate":0,"index":8011},{"krate":0,"index":8009},{"krate":0,"index":8006},{"krate":0,"index":8004},{"krate":0,"index":8002},{"krate":0,"index":8000},{"krate":0,"index":7994},{"krate":0,"index":7979},{"krate":0,"index":4738},{"krate":0,"index":8016},{"krate":0,"index":8053},{"krate":0,"index":8052},{"krate":0,"index":8050},{"krate":0,"index":8048},{"krate":0,"index":8045},{"krate":0,"index":8043},{"krate":0,"index":8041},{"krate":0,"index":8039},{"krate":0,"index":8033},{"krate":0,"index":8018},{"krate":0,"index":4740},{"krate":0,"index":8055},{"krate":0,"index":8092},{"krate":0,"index":8091},{"krate":0,"index":8089},{"krate":0,"index":8087},{"krate":0,"index":8084},{"krate":0,"index":8082},{"krate":0,"index":8080},{"krate":0,"index":8078},{"krate":0,"index":8072},{"krate":0,"index":8057},{"krate":0,"index":4742},{"krate":0,"index":8094},{"krate":0,"index":8131},{"krate":0,"index":8130},{"krate":0,"index":8128},{"krate":0,"index":8126},{"krate":0,"index":8123},{"krate":0,"index":8121},{"krate":0,"index":8119},{"krate":0,"index":8117},{"krate":0,"index":8111},{"krate":0,"index":8096},{"krate":0,"index":4744},{"krate":0,"index":8133},{"krate":0,"index":8170},{"krate":0,"index":8169},{"krate":0,"index":8167},{"krate":0,"index":8165},{"krate":0,"index":8162},{"krate":0,"index":8160},{"krate":0,"index":8158},{"krate":0,"index":8156},{"krate":0,"index":8150},{"krate":0,"index":8135},{"krate":0,"index":4746},{"krate":0,"index":8172},{"krate":0,"index":8209},{"krate":0,"index":8208},{"krate":0,"index":8206},{"krate":0,"index":8204},{"krate":0,"index":8201},{"krate":0,"index":8199},{"krate":0,"index":8197},{"krate":0,"index":8195},{"krate":0,"index":8189},{"krate":0,"index":8174},{"krate":0,"index":4748},{"krate":0,"index":8211},{"krate":0,"index":8248},{"krate":0,"index":8247},{"krate":0,"index":8245},{"krate":0,"index":8243},{"krate":0,"index":8240},{"krate":0,"index":8238},{"krate":0,"index":8236},{"krate":0,"index":8234},{"krate":0,"index":8228},{"krate":0,"index":8213},{"krate":0,"index":4750},{"krate":0,"index":8250},{"krate":0,"index":8287},{"krate":0,"index":8286},{"krate":0,"index":8284},{"krate":0,"index":8282},{"krate":0,"index":8279},{"krate":0,"index":8277},{"krate":0,"index":8275},{"krate":0,"index":8273},{"krate":0,"index":8267},{"krate":0,"index":8252},{"krate":0,"index":4752},{"krate":0,"index":8289},{"krate":0,"index":8326},{"krate":0,"index":8325},{"krate":0,"index":8323},{"krate":0,"index":8321},{"krate":0,"index":8318},{"krate":0,"index":8316},{"krate":0,"index":8314},{"krate":0,"index":8312},{"krate":0,"index":8306},{"krate":0,"index":8291},{"krate":0,"index":4754},{"krate":0,"index":8328},{"krate":0,"index":8365},{"krate":0,"index":8364},{"krate":0,"index":8362},{"krate":0,"index":8360},{"krate":0,"index":8357},{"krate":0,"index":8355},{"krate":0,"index":8353},{"krate":0,"index":8351},{"krate":0,"index":8345},{"krate":0,"index":8330},{"krate":0,"index":4756},{"krate":0,"index":8367},{"krate":0,"index":8404},{"krate":0,"index":8403},{"krate":0,"index":8401},{"krate":0,"index":8399},{"krate":0,"index":8396},{"krate":0,"index":8394},{"krate":0,"index":8392},{"krate":0,"index":8390},{"krate":0,"index":8384},{"krate":0,"index":8369},{"krate":0,"index":4758},{"krate":0,"index":8406},{"krate":0,"index":8443},{"krate":0,"index":8442},{"krate":0,"index":8440},{"krate":0,"index":8438},{"krate":0,"index":8435},{"krate":0,"index":8433},{"krate":0,"index":8431},{"krate":0,"index":8429},{"krate":0,"index":8423},{"krate":0,"index":8408},{"krate":0,"index":4760},{"krate":0,"index":8445},{"krate":0,"index":8482},{"krate":0,"index":8481},{"krate":0,"index":8479},{"krate":0,"index":8477},{"krate":0,"index":8474},{"krate":0,"index":8472},{"krate":0,"index":8470},{"krate":0,"index":8468},{"krate":0,"index":8462},{"krate":0,"index":8447},{"krate":0,"index":4762},{"krate":0,"index":8484},{"krate":0,"index":8521},{"krate":0,"index":8520},{"krate":0,"index":8518},{"krate":0,"index":8516},{"krate":0,"index":8513},{"krate":0,"index":8511},{"krate":0,"index":8509},{"krate":0,"index":8507},{"krate":0,"index":8501},{"krate":0,"index":8486},{"krate":0,"index":4764},{"krate":0,"index":8523},{"krate":0,"index":8560},{"krate":0,"index":8559},{"krate":0,"index":8557},{"krate":0,"index":8555},{"krate":0,"index":8552},{"krate":0,"index":8550},{"krate":0,"index":8548},{"krate":0,"index":8546},{"krate":0,"index":8540},{"krate":0,"index":8525},{"krate":0,"index":4766},{"krate":0,"index":8562},{"krate":0,"index":8599},{"krate":0,"index":8598},{"krate":0,"index":8596},{"krate":0,"index":8594},{"krate":0,"index":8591},{"krate":0,"index":8589},{"krate":0,"index":8587},{"krate":0,"index":8585},{"krate":0,"index":8579},{"krate":0,"index":8564},{"krate":0,"index":4768},{"krate":0,"index":8601},{"krate":0,"index":8638},{"krate":0,"index":8637},{"krate":0,"index":8635},{"krate":0,"index":8633},{"krate":0,"index":8630},{"krate":0,"index":8628},{"krate":0,"index":8626},{"krate":0,"index":8624},{"krate":0,"index":8618},{"krate":0,"index":8603},{"krate":0,"index":4770},{"krate":0,"index":8640},{"krate":0,"index":8677},{"krate":0,"index":8676},{"krate":0,"index":8674},{"krate":0,"index":8672},{"krate":0,"index":8669},{"krate":0,"index":8667},{"krate":0,"index":8665},{"krate":0,"index":8663},{"krate":0,"index":8657},{"krate":0,"index":8642},{"krate":0,"index":4772},{"krate":0,"index":8679},{"krate":0,"index":8716},{"krate":0,"index":8715},{"krate":0,"index":8713},{"krate":0,"index":8711},{"krate":0,"index":8708},{"krate":0,"index":8706},{"krate":0,"index":8704},{"krate":0,"index":8702},{"krate":0,"index":8696},{"krate":0,"index":8681},{"krate":0,"index":4774},{"krate":0,"index":8718},{"krate":0,"index":8755},{"krate":0,"index":8754},{"krate":0,"index":8752},{"krate":0,"index":8750},{"krate":0,"index":8747},{"krate":0,"index":8745},{"krate":0,"index":8743},{"krate":0,"index":8741},{"krate":0,"index":8735},{"krate":0,"index":8720},{"krate":0,"index":4776},{"krate":0,"index":8757},{"krate":0,"index":8794},{"krate":0,"index":8793},{"krate":0,"index":8791},{"krate":0,"index":8789},{"krate":0,"index":8786},{"krate":0,"index":8784},{"krate":0,"index":8782},{"krate":0,"index":8780},{"krate":0,"index":8774},{"krate":0,"index":8759},{"krate":0,"index":4778},{"krate":0,"index":8796},{"krate":0,"index":8833},{"krate":0,"index":8832},{"krate":0,"index":8830},{"krate":0,"index":8828},{"krate":0,"index":8825},{"krate":0,"index":8823},{"krate":0,"index":8821},{"krate":0,"index":8819},{"krate":0,"index":8813},{"krate":0,"index":8798},{"krate":0,"index":4780},{"krate":0,"index":8835},{"krate":0,"index":8872},{"krate":0,"index":8871},{"krate":0,"index":8869},{"krate":0,"index":8867},{"krate":0,"index":8864},{"krate":0,"index":8862},{"krate":0,"index":8860},{"krate":0,"index":8858},{"krate":0,"index":8852},{"krate":0,"index":8837},{"krate":0,"index":4782},{"krate":0,"index":8874},{"krate":0,"index":8911},{"krate":0,"index":8910},{"krate":0,"index":8908},{"krate":0,"index":8906},{"krate":0,"index":8903},{"krate":0,"index":8901},{"krate":0,"index":8899},{"krate":0,"index":8897},{"krate":0,"index":8891},{"krate":0,"index":8876},{"krate":0,"index":4784},{"krate":0,"index":8913},{"krate":0,"index":8950},{"krate":0,"index":8949},{"krate":0,"index":8947},{"krate":0,"index":8945},{"krate":0,"index":8942},{"krate":0,"index":8940},{"krate":0,"index":8938},{"krate":0,"index":8936},{"krate":0,"index":8930},{"krate":0,"index":8915},{"krate":0,"index":4786},{"krate":0,"index":8952},{"krate":0,"index":8989},{"krate":0,"index":8988},{"krate":0,"index":8986},{"krate":0,"index":8984},{"krate":0,"index":8981},{"krate":0,"index":8979},{"krate":0,"index":8977},{"krate":0,"index":8975},{"krate":0,"index":8969},{"krate":0,"index":8954},{"krate":0,"index":4788},{"krate":0,"index":8991},{"krate":0,"index":9028},{"krate":0,"index":9027},{"krate":0,"index":9025},{"krate":0,"index":9023},{"krate":0,"index":9020},{"krate":0,"index":9018},{"krate":0,"index":9016},{"krate":0,"index":9014},{"krate":0,"index":9008},{"krate":0,"index":8993},{"krate":0,"index":4790},{"krate":0,"index":9030},{"krate":0,"index":9067},{"krate":0,"index":9066},{"krate":0,"index":9064},{"krate":0,"index":9062},{"krate":0,"index":9059},{"krate":0,"index":9057},{"krate":0,"index":9055},{"krate":0,"index":9053},{"krate":0,"index":9047},{"krate":0,"index":9032},{"krate":0,"index":4792},{"krate":0,"index":9069},{"krate":0,"index":9106},{"krate":0,"index":9105},{"krate":0,"index":9103},{"krate":0,"index":9101},{"krate":0,"index":9098},{"krate":0,"index":9096},{"krate":0,"index":9094},{"krate":0,"index":9092},{"krate":0,"index":9086},{"krate":0,"index":9071},{"krate":0,"index":4794},{"krate":0,"index":9108},{"krate":0,"index":9145},{"krate":0,"index":9144},{"krate":0,"index":9142},{"krate":0,"index":9140},{"krate":0,"index":9137},{"krate":0,"index":9135},{"krate":0,"index":9133},{"krate":0,"index":9131},{"krate":0,"index":9125},{"krate":0,"index":9110},{"krate":0,"index":4796},{"krate":0,"index":9147},{"krate":0,"index":9184},{"krate":0,"index":9183},{"krate":0,"index":9181},{"krate":0,"index":9179},{"krate":0,"index":9176},{"krate":0,"index":9174},{"krate":0,"index":9172},{"krate":0,"index":9170},{"krate":0,"index":9164},{"krate":0,"index":9149},{"krate":0,"index":4798},{"krate":0,"index":9186},{"krate":0,"index":9223},{"krate":0,"index":9222},{"krate":0,"index":9220},{"krate":0,"index":9218},{"krate":0,"index":9215},{"krate":0,"index":9213},{"krate":0,"index":9211},{"krate":0,"index":9209},{"krate":0,"index":9203},{"krate":0,"index":9188},{"krate":0,"index":4800},{"krate":0,"index":9225},{"krate":0,"index":9262},{"krate":0,"index":9261},{"krate":0,"index":9259},{"krate":0,"index":9257},{"krate":0,"index":9254},{"krate":0,"index":9252},{"krate":0,"index":9250},{"krate":0,"index":9248},{"krate":0,"index":9242},{"krate":0,"index":9227},{"krate":0,"index":4802},{"krate":0,"index":9264},{"krate":0,"index":9301},{"krate":0,"index":9300},{"krate":0,"index":9298},{"krate":0,"index":9296},{"krate":0,"index":9293},{"krate":0,"index":9291},{"krate":0,"index":9289},{"krate":0,"index":9287},{"krate":0,"index":9281},{"krate":0,"index":9266},{"krate":0,"index":4804},{"krate":0,"index":9303},{"krate":0,"index":9340},{"krate":0,"index":9339},{"krate":0,"index":9337},{"krate":0,"index":9335},{"krate":0,"index":9332},{"krate":0,"index":9330},{"krate":0,"index":9328},{"krate":0,"index":9326},{"krate":0,"index":9320},{"krate":0,"index":9305},{"krate":0,"index":4806},{"krate":0,"index":9342},{"krate":0,"index":9379},{"krate":0,"index":9378},{"krate":0,"index":9376},{"krate":0,"index":9374},{"krate":0,"index":9371},{"krate":0,"index":9369},{"krate":0,"index":9367},{"krate":0,"index":9365},{"krate":0,"index":9359},{"krate":0,"index":9344},{"krate":0,"index":4808},{"krate":0,"index":9381},{"krate":0,"index":9418},{"krate":0,"index":9417},{"krate":0,"index":9415},{"krate":0,"index":9413},{"krate":0,"index":9410},{"krate":0,"index":9408},{"krate":0,"index":9406},{"krate":0,"index":9404},{"krate":0,"index":9398},{"krate":0,"index":9383},{"krate":0,"index":4810},{"krate":0,"index":9420},{"krate":0,"index":9457},{"krate":0,"index":9456},{"krate":0,"index":9454},{"krate":0,"index":9452},{"krate":0,"index":9449},{"krate":0,"index":9447},{"krate":0,"index":9445},{"krate":0,"index":9443},{"krate":0,"index":9437},{"krate":0,"index":9422},{"krate":0,"index":4812},{"krate":0,"index":9459},{"krate":0,"index":9496},{"krate":0,"index":9495},{"krate":0,"index":9493},{"krate":0,"index":9491},{"krate":0,"index":9488},{"krate":0,"index":9486},{"krate":0,"index":9484},{"krate":0,"index":9482},{"krate":0,"index":9476},{"krate":0,"index":9461},{"krate":0,"index":4814},{"krate":0,"index":9498},{"krate":0,"index":9535},{"krate":0,"index":9534},{"krate":0,"index":9532},{"krate":0,"index":9530},{"krate":0,"index":9527},{"krate":0,"index":9525},{"krate":0,"index":9523},{"krate":0,"index":9521},{"krate":0,"index":9515},{"krate":0,"index":9500},{"krate":0,"index":4816},{"krate":0,"index":9537},{"krate":0,"index":9574},{"krate":0,"index":9573},{"krate":0,"index":9571},{"krate":0,"index":9569},{"krate":0,"index":9566},{"krate":0,"index":9564},{"krate":0,"index":9562},{"krate":0,"index":9560},{"krate":0,"index":9554},{"krate":0,"index":9539},{"krate":0,"index":4818},{"krate":0,"index":9576},{"krate":0,"index":9613},{"krate":0,"index":9612},{"krate":0,"index":9610},{"krate":0,"index":9608},{"krate":0,"index":9605},{"krate":0,"index":9603},{"krate":0,"index":9601},{"krate":0,"index":9599},{"krate":0,"index":9593},{"krate":0,"index":9578},{"krate":0,"index":4820},{"krate":0,"index":9615},{"krate":0,"index":9652},{"krate":0,"index":9651},{"krate":0,"index":9649},{"krate":0,"index":9647},{"krate":0,"index":9644},{"krate":0,"index":9642},{"krate":0,"index":9640},{"krate":0,"index":9638},{"krate":0,"index":9632},{"krate":0,"index":9617},{"krate":0,"index":4822},{"krate":0,"index":9654},{"krate":0,"index":9691},{"krate":0,"index":9690},{"krate":0,"index":9688},{"krate":0,"index":9686},{"krate":0,"index":9683},{"krate":0,"index":9681},{"krate":0,"index":9679},{"krate":0,"index":9677},{"krate":0,"index":9671},{"krate":0,"index":9656},{"krate":0,"index":4824},{"krate":0,"index":9693},{"krate":0,"index":9730},{"krate":0,"index":9729},{"krate":0,"index":9727},{"krate":0,"index":9725},{"krate":0,"index":9722},{"krate":0,"index":9720},{"krate":0,"index":9718},{"krate":0,"index":9716},{"krate":0,"index":9710},{"krate":0,"index":9695},{"krate":0,"index":4826},{"krate":0,"index":9732},{"krate":0,"index":9769},{"krate":0,"index":9768},{"krate":0,"index":9766},{"krate":0,"index":9764},{"krate":0,"index":9761},{"krate":0,"index":9759},{"krate":0,"index":9757},{"krate":0,"index":9755},{"krate":0,"index":9749},{"krate":0,"index":9734},{"krate":0,"index":4828},{"krate":0,"index":9771},{"krate":0,"index":9808},{"krate":0,"index":9807},{"krate":0,"index":9805},{"krate":0,"index":9803},{"krate":0,"index":9800},{"krate":0,"index":9798},{"krate":0,"index":9796},{"krate":0,"index":9794},{"krate":0,"index":9788},{"krate":0,"index":9773},{"krate":0,"index":4830},{"krate":0,"index":9810},{"krate":0,"index":9847},{"krate":0,"index":9846},{"krate":0,"index":9844},{"krate":0,"index":9842},{"krate":0,"index":9839},{"krate":0,"index":9837},{"krate":0,"index":9835},{"krate":0,"index":9833},{"krate":0,"index":9827},{"krate":0,"index":9812},{"krate":0,"index":4832},{"krate":0,"index":9849},{"krate":0,"index":9886},{"krate":0,"index":9885},{"krate":0,"index":9883},{"krate":0,"index":9881},{"krate":0,"index":9878},{"krate":0,"index":9876},{"krate":0,"index":9874},{"krate":0,"index":9872},{"krate":0,"index":9866},{"krate":0,"index":9851},{"krate":0,"index":4834},{"krate":0,"index":9888},{"krate":0,"index":9925},{"krate":0,"index":9924},{"krate":0,"index":9922},{"krate":0,"index":9920},{"krate":0,"index":9917},{"krate":0,"index":9915},{"krate":0,"index":9913},{"krate":0,"index":9911},{"krate":0,"index":9905},{"krate":0,"index":9890},{"krate":0,"index":4836},{"krate":0,"index":9927},{"krate":0,"index":9964},{"krate":0,"index":9963},{"krate":0,"index":9961},{"krate":0,"index":9959},{"krate":0,"index":9956},{"krate":0,"index":9954},{"krate":0,"index":9952},{"krate":0,"index":9950},{"krate":0,"index":9944},{"krate":0,"index":9929},{"krate":0,"index":4838},{"krate":0,"index":9966},{"krate":0,"index":10003},{"krate":0,"index":10002},{"krate":0,"index":10000},{"krate":0,"index":9998},{"krate":0,"index":9995},{"krate":0,"index":9993},{"krate":0,"index":9991},{"krate":0,"index":9989},{"krate":0,"index":9983},{"krate":0,"index":9968},{"krate":0,"index":4840},{"krate":0,"index":10005},{"krate":0,"index":10042},{"krate":0,"index":10041},{"krate":0,"index":10039},{"krate":0,"index":10037},{"krate":0,"index":10034},{"krate":0,"index":10032},{"krate":0,"index":10030},{"krate":0,"index":10028},{"krate":0,"index":10022},{"krate":0,"index":10007},{"krate":0,"index":4842},{"krate":0,"index":10044},{"krate":0,"index":10081},{"krate":0,"index":10080},{"krate":0,"index":10078},{"krate":0,"index":10076},{"krate":0,"index":10073},{"krate":0,"index":10071},{"krate":0,"index":10069},{"krate":0,"index":10067},{"krate":0,"index":10061},{"krate":0,"index":10046},{"krate":0,"index":4844},{"krate":0,"index":10083},{"krate":0,"index":10120},{"krate":0,"index":10119},{"krate":0,"index":10117},{"krate":0,"index":10115},{"krate":0,"index":10112},{"krate":0,"index":10110},{"krate":0,"index":10108},{"krate":0,"index":10106},{"krate":0,"index":10100},{"krate":0,"index":10085},{"krate":0,"index":4846},{"krate":0,"index":10122},{"krate":0,"index":10159},{"krate":0,"index":10158},{"krate":0,"index":10156},{"krate":0,"index":10154},{"krate":0,"index":10151},{"krate":0,"index":10149},{"krate":0,"index":10147},{"krate":0,"index":10145},{"krate":0,"index":10139},{"krate":0,"index":10124},{"krate":0,"index":4848},{"krate":0,"index":10161},{"krate":0,"index":10198},{"krate":0,"index":10197},{"krate":0,"index":10195},{"krate":0,"index":10193},{"krate":0,"index":10190},{"krate":0,"index":10188},{"krate":0,"index":10186},{"krate":0,"index":10184},{"krate":0,"index":10178},{"krate":0,"index":10163},{"krate":0,"index":4850},{"krate":0,"index":10200},{"krate":0,"index":10237},{"krate":0,"index":10236},{"krate":0,"index":10234},{"krate":0,"index":10232},{"krate":0,"index":10229},{"krate":0,"index":10227},{"krate":0,"index":10225},{"krate":0,"index":10223},{"krate":0,"index":10217},{"krate":0,"index":10202},{"krate":0,"index":4852},{"krate":0,"index":10239},{"krate":0,"index":10276},{"krate":0,"index":10275},{"krate":0,"index":10273},{"krate":0,"index":10271},{"krate":0,"index":10268},{"krate":0,"index":10266},{"krate":0,"index":10264},{"krate":0,"index":10262},{"krate":0,"index":10256},{"krate":0,"index":10241},{"krate":0,"index":4854},{"krate":0,"index":10278},{"krate":0,"index":10315},{"krate":0,"index":10314},{"krate":0,"index":10312},{"krate":0,"index":10310},{"krate":0,"index":10307},{"krate":0,"index":10305},{"krate":0,"index":10303},{"krate":0,"index":10301},{"krate":0,"index":10295},{"krate":0,"index":10280},{"krate":0,"index":4856},{"krate":0,"index":10317},{"krate":0,"index":10354},{"krate":0,"index":10353},{"krate":0,"index":10351},{"krate":0,"index":10349},{"krate":0,"index":10346},{"krate":0,"index":10344},{"krate":0,"index":10342},{"krate":0,"index":10340},{"krate":0,"index":10334},{"krate":0,"index":10319},{"krate":0,"index":4858},{"krate":0,"index":10356},{"krate":0,"index":10393},{"krate":0,"index":10392},{"krate":0,"index":10390},{"krate":0,"index":10388},{"krate":0,"index":10385},{"krate":0,"index":10383},{"krate":0,"index":10381},{"krate":0,"index":10379},{"krate":0,"index":10373},{"krate":0,"index":10358},{"krate":0,"index":4860},{"krate":0,"index":10395},{"krate":0,"index":10432},{"krate":0,"index":10431},{"krate":0,"index":10429},{"krate":0,"index":10427},{"krate":0,"index":10424},{"krate":0,"index":10422},{"krate":0,"index":10420},{"krate":0,"index":10418},{"krate":0,"index":10412},{"krate":0,"index":10397},{"krate":0,"index":4862},{"krate":0,"index":10434},{"krate":0,"index":10471},{"krate":0,"index":10470},{"krate":0,"index":10468},{"krate":0,"index":10466},{"krate":0,"index":10463},{"krate":0,"index":10461},{"krate":0,"index":10459},{"krate":0,"index":10457},{"krate":0,"index":10451},{"krate":0,"index":10436},{"krate":0,"index":4864},{"krate":0,"index":10473},{"krate":0,"index":10510},{"krate":0,"index":10509},{"krate":0,"index":10507},{"krate":0,"index":10505},{"krate":0,"index":10502},{"krate":0,"index":10500},{"krate":0,"index":10498},{"krate":0,"index":10496},{"krate":0,"index":10490},{"krate":0,"index":10475},{"krate":0,"index":4866},{"krate":0,"index":10512},{"krate":0,"index":10549},{"krate":0,"index":10548},{"krate":0,"index":10546},{"krate":0,"index":10544},{"krate":0,"index":10541},{"krate":0,"index":10539},{"krate":0,"index":10537},{"krate":0,"index":10535},{"krate":0,"index":10529},{"krate":0,"index":10514},{"krate":0,"index":4868},{"krate":0,"index":10551},{"krate":0,"index":10588},{"krate":0,"index":10587},{"krate":0,"index":10585},{"krate":0,"index":10583},{"krate":0,"index":10580},{"krate":0,"index":10578},{"krate":0,"index":10576},{"krate":0,"index":10574},{"krate":0,"index":10568},{"krate":0,"index":10553},{"krate":0,"index":4870},{"krate":0,"index":10590},{"krate":0,"index":10627},{"krate":0,"index":10626},{"krate":0,"index":10624},{"krate":0,"index":10622},{"krate":0,"index":10619},{"krate":0,"index":10617},{"krate":0,"index":10615},{"krate":0,"index":10613},{"krate":0,"index":10607},{"krate":0,"index":10592},{"krate":0,"index":4872},{"krate":0,"index":10629},{"krate":0,"index":10666},{"krate":0,"index":10665},{"krate":0,"index":10663},{"krate":0,"index":10661},{"krate":0,"index":10658},{"krate":0,"index":10656},{"krate":0,"index":10654},{"krate":0,"index":10652},{"krate":0,"index":10646},{"krate":0,"index":10631},{"krate":0,"index":4874},{"krate":0,"index":10668},{"krate":0,"index":10705},{"krate":0,"index":10704},{"krate":0,"index":10702},{"krate":0,"index":10700},{"krate":0,"index":10697},{"krate":0,"index":10695},{"krate":0,"index":10693},{"krate":0,"index":10691},{"krate":0,"index":10685},{"krate":0,"index":10670},{"krate":0,"index":4876},{"krate":0,"index":10707},{"krate":0,"index":10744},{"krate":0,"index":10743},{"krate":0,"index":10741},{"krate":0,"index":10739},{"krate":0,"index":10736},{"krate":0,"index":10734},{"krate":0,"index":10732},{"krate":0,"index":10730},{"krate":0,"index":10724},{"krate":0,"index":10709},{"krate":0,"index":4878},{"krate":0,"index":10746},{"krate":0,"index":10783},{"krate":0,"index":10782},{"krate":0,"index":10780},{"krate":0,"index":10778},{"krate":0,"index":10775},{"krate":0,"index":10773},{"krate":0,"index":10771},{"krate":0,"index":10769},{"krate":0,"index":10763},{"krate":0,"index":10748},{"krate":0,"index":4880},{"krate":0,"index":10785},{"krate":0,"index":10822},{"krate":0,"index":10821},{"krate":0,"index":10819},{"krate":0,"index":10817},{"krate":0,"index":10814},{"krate":0,"index":10812},{"krate":0,"index":10810},{"krate":0,"index":10808},{"krate":0,"index":10802},{"krate":0,"index":10787},{"krate":0,"index":4882},{"krate":0,"index":10824},{"krate":0,"index":10861},{"krate":0,"index":10860},{"krate":0,"index":10858},{"krate":0,"index":10856},{"krate":0,"index":10853},{"krate":0,"index":10851},{"krate":0,"index":10849},{"krate":0,"index":10847},{"krate":0,"index":10841},{"krate":0,"index":10826},{"krate":0,"index":4884},{"krate":0,"index":10863},{"krate":0,"index":10900},{"krate":0,"index":10899},{"krate":0,"index":10897},{"krate":0,"index":10895},{"krate":0,"index":10892},{"krate":0,"index":10890},{"krate":0,"index":10888},{"krate":0,"index":10886},{"krate":0,"index":10880},{"krate":0,"index":10865},{"krate":0,"index":4886},{"krate":0,"index":10902},{"krate":0,"index":10939},{"krate":0,"index":10938},{"krate":0,"index":10936},{"krate":0,"index":10934},{"krate":0,"index":10931},{"krate":0,"index":10929},{"krate":0,"index":10927},{"krate":0,"index":10925},{"krate":0,"index":10919},{"krate":0,"index":10904},{"krate":0,"index":4888},{"krate":0,"index":10941},{"krate":0,"index":10978},{"krate":0,"index":10977},{"krate":0,"index":10975},{"krate":0,"index":10973},{"krate":0,"index":10970},{"krate":0,"index":10968},{"krate":0,"index":10966},{"krate":0,"index":10964},{"krate":0,"index":10958},{"krate":0,"index":10943},{"krate":0,"index":4890},{"krate":0,"index":10980},{"krate":0,"index":11017},{"krate":0,"index":11016},{"krate":0,"index":11014},{"krate":0,"index":11012},{"krate":0,"index":11009},{"krate":0,"index":11007},{"krate":0,"index":11005},{"krate":0,"index":11003},{"krate":0,"index":10997},{"krate":0,"index":10982},{"krate":0,"index":4892},{"krate":0,"index":11019},{"krate":0,"index":11056},{"krate":0,"index":11055},{"krate":0,"index":11053},{"krate":0,"index":11051},{"krate":0,"index":11048},{"krate":0,"index":11046},{"krate":0,"index":11044},{"krate":0,"index":11042},{"krate":0,"index":11036},{"krate":0,"index":11021},{"krate":0,"index":4894},{"krate":0,"index":11058},{"krate":0,"index":11095},{"krate":0,"index":11094},{"krate":0,"index":11092},{"krate":0,"index":11090},{"krate":0,"index":11087},{"krate":0,"index":11085},{"krate":0,"index":11083},{"krate":0,"index":11081},{"krate":0,"index":11075},{"krate":0,"index":11060},{"krate":0,"index":4896},{"krate":0,"index":11097},{"krate":0,"index":11134},{"krate":0,"index":11133},{"krate":0,"index":11131},{"krate":0,"index":11129},{"krate":0,"index":11126},{"krate":0,"index":11124},{"krate":0,"index":11122},{"krate":0,"index":11120},{"krate":0,"index":11114},{"krate":0,"index":11099},{"krate":0,"index":4898},{"krate":0,"index":11136},{"krate":0,"index":11173},{"krate":0,"index":11172},{"krate":0,"index":11170},{"krate":0,"index":11168},{"krate":0,"index":11165},{"krate":0,"index":11163},{"krate":0,"index":11161},{"krate":0,"index":11159},{"krate":0,"index":11153},{"krate":0,"index":11138},{"krate":0,"index":4900},{"krate":0,"index":11175},{"krate":0,"index":11212},{"krate":0,"index":11211},{"krate":0,"index":11209},{"krate":0,"index":11207},{"krate":0,"index":11204},{"krate":0,"index":11202},{"krate":0,"index":11200},{"krate":0,"index":11198},{"krate":0,"index":11192},{"krate":0,"index":11177},{"krate":0,"index":4902},{"krate":0,"index":11214},{"krate":0,"index":11251},{"krate":0,"index":11250},{"krate":0,"index":11248},{"krate":0,"index":11246},{"krate":0,"index":11243},{"krate":0,"index":11241},{"krate":0,"index":11239},{"krate":0,"index":11237},{"krate":0,"index":11231},{"krate":0,"index":11216},{"krate":0,"index":4904},{"krate":0,"index":11253},{"krate":0,"index":11290},{"krate":0,"index":11289},{"krate":0,"index":11287},{"krate":0,"index":11285},{"krate":0,"index":11282},{"krate":0,"index":11280},{"krate":0,"index":11278},{"krate":0,"index":11276},{"krate":0,"index":11270},{"krate":0,"index":11255},{"krate":0,"index":4906},{"krate":0,"index":11292},{"krate":0,"index":11329},{"krate":0,"index":11328},{"krate":0,"index":11326},{"krate":0,"index":11324},{"krate":0,"index":11321},{"krate":0,"index":11319},{"krate":0,"index":11317},{"krate":0,"index":11315},{"krate":0,"index":11309},{"krate":0,"index":11294},{"krate":0,"index":4908},{"krate":0,"index":11331},{"krate":0,"index":11368},{"krate":0,"index":11367},{"krate":0,"index":11365},{"krate":0,"index":11363},{"krate":0,"index":11360},{"krate":0,"index":11358},{"krate":0,"index":11356},{"krate":0,"index":11354},{"krate":0,"index":11348},{"krate":0,"index":11333},{"krate":0,"index":4910},{"krate":0,"index":11370},{"krate":0,"index":11407},{"krate":0,"index":11406},{"krate":0,"index":11404},{"krate":0,"index":11402},{"krate":0,"index":11399},{"krate":0,"index":11397},{"krate":0,"index":11395},{"krate":0,"index":11393},{"krate":0,"index":11387},{"krate":0,"index":11372},{"krate":0,"index":4912},{"krate":0,"index":11409},{"krate":0,"index":11446},{"krate":0,"index":11445},{"krate":0,"index":11443},{"krate":0,"index":11441},{"krate":0,"index":11438},{"krate":0,"index":11436},{"krate":0,"index":11434},{"krate":0,"index":11432},{"krate":0,"index":11426},{"krate":0,"index":11411},{"krate":0,"index":4914},{"krate":0,"index":11448},{"krate":0,"index":11485},{"krate":0,"index":11484},{"krate":0,"index":11482},{"krate":0,"index":11480},{"krate":0,"index":11477},{"krate":0,"index":11475},{"krate":0,"index":11473},{"krate":0,"index":11471},{"krate":0,"index":11465},{"krate":0,"index":11450},{"krate":0,"index":4916},{"krate":0,"index":11487},{"krate":0,"index":11524},{"krate":0,"index":11523},{"krate":0,"index":11521},{"krate":0,"index":11519},{"krate":0,"index":11516},{"krate":0,"index":11514},{"krate":0,"index":11512},{"krate":0,"index":11510},{"krate":0,"index":11504},{"krate":0,"index":11489},{"krate":0,"index":4918},{"krate":0,"index":11526},{"krate":0,"index":11563},{"krate":0,"index":11562},{"krate":0,"index":11560},{"krate":0,"index":11558},{"krate":0,"index":11555},{"krate":0,"index":11553},{"krate":0,"index":11551},{"krate":0,"index":11549},{"krate":0,"index":11543},{"krate":0,"index":11528},{"krate":0,"index":4920},{"krate":0,"index":11565},{"krate":0,"index":11602},{"krate":0,"index":11601},{"krate":0,"index":11599},{"krate":0,"index":11597},{"krate":0,"index":11594},{"krate":0,"index":11592},{"krate":0,"index":11590},{"krate":0,"index":11588},{"krate":0,"index":11582},{"krate":0,"index":11567},{"krate":0,"index":4922},{"krate":0,"index":11604},{"krate":0,"index":11641},{"krate":0,"index":11640},{"krate":0,"index":11638},{"krate":0,"index":11636},{"krate":0,"index":11633},{"krate":0,"index":11631},{"krate":0,"index":11629},{"krate":0,"index":11627},{"krate":0,"index":11621},{"krate":0,"index":11606},{"krate":0,"index":4924},{"krate":0,"index":11643},{"krate":0,"index":11680},{"krate":0,"index":11679},{"krate":0,"index":11677},{"krate":0,"index":11675},{"krate":0,"index":11672},{"krate":0,"index":11670},{"krate":0,"index":11668},{"krate":0,"index":11666},{"krate":0,"index":11660},{"krate":0,"index":11645},{"krate":0,"index":4926},{"krate":0,"index":11682},{"krate":0,"index":11719},{"krate":0,"index":11718},{"krate":0,"index":11716},{"krate":0,"index":11714},{"krate":0,"index":11711},{"krate":0,"index":11709},{"krate":0,"index":11707},{"krate":0,"index":11705},{"krate":0,"index":11699},{"krate":0,"index":11684},{"krate":0,"index":4928},{"krate":0,"index":11721},{"krate":0,"index":11758},{"krate":0,"index":11757},{"krate":0,"index":11755},{"krate":0,"index":11753},{"krate":0,"index":11750},{"krate":0,"index":11748},{"krate":0,"index":11746},{"krate":0,"index":11744},{"krate":0,"index":11738},{"krate":0,"index":11723},{"krate":0,"index":4930},{"krate":0,"index":11760},{"krate":0,"index":11797},{"krate":0,"index":11796},{"krate":0,"index":11794},{"krate":0,"index":11792},{"krate":0,"index":11789},{"krate":0,"index":11787},{"krate":0,"index":11785},{"krate":0,"index":11783},{"krate":0,"index":11777},{"krate":0,"index":11762},{"krate":0,"index":4932},{"krate":0,"index":11799},{"krate":0,"index":11836},{"krate":0,"index":11835},{"krate":0,"index":11833},{"krate":0,"index":11831},{"krate":0,"index":11828},{"krate":0,"index":11826},{"krate":0,"index":11824},{"krate":0,"index":11822},{"krate":0,"index":11816},{"krate":0,"index":11801},{"krate":0,"index":4934},{"krate":0,"index":11838},{"krate":0,"index":11875},{"krate":0,"index":11874},{"krate":0,"index":11872},{"krate":0,"index":11870},{"krate":0,"index":11867},{"krate":0,"index":11865},{"krate":0,"index":11863},{"krate":0,"index":11861},{"krate":0,"index":11855},{"krate":0,"index":11840},{"krate":0,"index":4936},{"krate":0,"index":11877},{"krate":0,"index":11914},{"krate":0,"index":11913},{"krate":0,"index":11911},{"krate":0,"index":11909},{"krate":0,"index":11906},{"krate":0,"index":11904},{"krate":0,"index":11902},{"krate":0,"index":11900},{"krate":0,"index":11894},{"krate":0,"index":11879},{"krate":0,"index":4938},{"krate":0,"index":11916},{"krate":0,"index":11953},{"krate":0,"index":11952},{"krate":0,"index":11950},{"krate":0,"index":11948},{"krate":0,"index":11945},{"krate":0,"index":11943},{"krate":0,"index":11941},{"krate":0,"index":11939},{"krate":0,"index":11933},{"krate":0,"index":11918},{"krate":0,"index":4940},{"krate":0,"index":11955},{"krate":0,"index":11992},{"krate":0,"index":11991},{"krate":0,"index":11989},{"krate":0,"index":11987},{"krate":0,"index":11984},{"krate":0,"index":11982},{"krate":0,"index":11980},{"krate":0,"index":11978},{"krate":0,"index":11972},{"krate":0,"index":11957},{"krate":0,"index":4942},{"krate":0,"index":11994},{"krate":0,"index":12031},{"krate":0,"index":12030},{"krate":0,"index":12028},{"krate":0,"index":12026},{"krate":0,"index":12023},{"krate":0,"index":12021},{"krate":0,"index":12019},{"krate":0,"index":12017},{"krate":0,"index":12011},{"krate":0,"index":11996},{"krate":0,"index":4944},{"krate":0,"index":12033},{"krate":0,"index":12070},{"krate":0,"index":12069},{"krate":0,"index":12067},{"krate":0,"index":12065},{"krate":0,"index":12062},{"krate":0,"index":12060},{"krate":0,"index":12058},{"krate":0,"index":12056},{"krate":0,"index":12050},{"krate":0,"index":12035},{"krate":0,"index":4946},{"krate":0,"index":12072},{"krate":0,"index":12109},{"krate":0,"index":12108},{"krate":0,"index":12106},{"krate":0,"index":12104},{"krate":0,"index":12101},{"krate":0,"index":12099},{"krate":0,"index":12097},{"krate":0,"index":12095},{"krate":0,"index":12089},{"krate":0,"index":12074},{"krate":0,"index":4948},{"krate":0,"index":12111},{"krate":0,"index":12148},{"krate":0,"index":12147},{"krate":0,"index":12145},{"krate":0,"index":12143},{"krate":0,"index":12140},{"krate":0,"index":12138},{"krate":0,"index":12136},{"krate":0,"index":12134},{"krate":0,"index":12128},{"krate":0,"index":12113},{"krate":0,"index":4950},{"krate":0,"index":12150},{"krate":0,"index":12187},{"krate":0,"index":12186},{"krate":0,"index":12184},{"krate":0,"index":12182},{"krate":0,"index":12179},{"krate":0,"index":12177},{"krate":0,"index":12175},{"krate":0,"index":12173},{"krate":0,"index":12167},{"krate":0,"index":12152},{"krate":0,"index":4952},{"krate":0,"index":12189},{"krate":0,"index":12226},{"krate":0,"index":12225},{"krate":0,"index":12223},{"krate":0,"index":12221},{"krate":0,"index":12218},{"krate":0,"index":12216},{"krate":0,"index":12214},{"krate":0,"index":12212},{"krate":0,"index":12206},{"krate":0,"index":12191},{"krate":0,"index":4954},{"krate":0,"index":12228},{"krate":0,"index":12265},{"krate":0,"index":12264},{"krate":0,"index":12262},{"krate":0,"index":12260},{"krate":0,"index":12257},{"krate":0,"index":12255},{"krate":0,"index":12253},{"krate":0,"index":12251},{"krate":0,"index":12245},{"krate":0,"index":12230},{"krate":0,"index":4956},{"krate":0,"index":12267},{"krate":0,"index":12304},{"krate":0,"index":12303},{"krate":0,"index":12301},{"krate":0,"index":12299},{"krate":0,"index":12296},{"krate":0,"index":12294},{"krate":0,"index":12292},{"krate":0,"index":12290},{"krate":0,"index":12284},{"krate":0,"index":12269},{"krate":0,"index":4958},{"krate":0,"index":12306},{"krate":0,"index":12343},{"krate":0,"index":12342},{"krate":0,"index":12340},{"krate":0,"index":12338},{"krate":0,"index":12335},{"krate":0,"index":12333},{"krate":0,"index":12331},{"krate":0,"index":12329},{"krate":0,"index":12323},{"krate":0,"index":12308},{"krate":0,"index":4960},{"krate":0,"index":12345},{"krate":0,"index":12382},{"krate":0,"index":12381},{"krate":0,"index":12379},{"krate":0,"index":12377},{"krate":0,"index":12374},{"krate":0,"index":12372},{"krate":0,"index":12370},{"krate":0,"index":12368},{"krate":0,"index":12362},{"krate":0,"index":12347},{"krate":0,"index":4962},{"krate":0,"index":12384},{"krate":0,"index":12421},{"krate":0,"index":12420},{"krate":0,"index":12418},{"krate":0,"index":12416},{"krate":0,"index":12413},{"krate":0,"index":12411},{"krate":0,"index":12409},{"krate":0,"index":12407},{"krate":0,"index":12401},{"krate":0,"index":12386},{"krate":0,"index":4964},{"krate":0,"index":12423},{"krate":0,"index":12460},{"krate":0,"index":12459},{"krate":0,"index":12457},{"krate":0,"index":12455},{"krate":0,"index":12452},{"krate":0,"index":12450},{"krate":0,"index":12448},{"krate":0,"index":12446},{"krate":0,"index":12440},{"krate":0,"index":12425},{"krate":0,"index":4966},{"krate":0,"index":12462},{"krate":0,"index":12499},{"krate":0,"index":12498},{"krate":0,"index":12496},{"krate":0,"index":12494},{"krate":0,"index":12491},{"krate":0,"index":12489},{"krate":0,"index":12487},{"krate":0,"index":12485},{"krate":0,"index":12479},{"krate":0,"index":12464},{"krate":0,"index":4968},{"krate":0,"index":12501},{"krate":0,"index":12538},{"krate":0,"index":12537},{"krate":0,"index":12535},{"krate":0,"index":12533},{"krate":0,"index":12530},{"krate":0,"index":12528},{"krate":0,"index":12526},{"krate":0,"index":12524},{"krate":0,"index":12518},{"krate":0,"index":12503},{"krate":0,"index":4970},{"krate":0,"index":12540},{"krate":0,"index":12577},{"krate":0,"index":12576},{"krate":0,"index":12574},{"krate":0,"index":12572},{"krate":0,"index":12569},{"krate":0,"index":12567},{"krate":0,"index":12565},{"krate":0,"index":12563},{"krate":0,"index":12557},{"krate":0,"index":12542},{"krate":0,"index":4972},{"krate":0,"index":12579},{"krate":0,"index":12616},{"krate":0,"index":12615},{"krate":0,"index":12613},{"krate":0,"index":12611},{"krate":0,"index":12608},{"krate":0,"index":12606},{"krate":0,"index":12604},{"krate":0,"index":12602},{"krate":0,"index":12596},{"krate":0,"index":12581},{"krate":0,"index":4974},{"krate":0,"index":12618},{"krate":0,"index":12655},{"krate":0,"index":12654},{"krate":0,"index":12652},{"krate":0,"index":12650},{"krate":0,"index":12647},{"krate":0,"index":12645},{"krate":0,"index":12643},{"krate":0,"index":12641},{"krate":0,"index":12635},{"krate":0,"index":12620},{"krate":0,"index":4976},{"krate":0,"index":12657},{"krate":0,"index":12694},{"krate":0,"index":12693},{"krate":0,"index":12691},{"krate":0,"index":12689},{"krate":0,"index":12686},{"krate":0,"index":12684},{"krate":0,"index":12682},{"krate":0,"index":12680},{"krate":0,"index":12674},{"krate":0,"index":12659},{"krate":0,"index":4978},{"krate":0,"index":12696},{"krate":0,"index":12733},{"krate":0,"index":12732},{"krate":0,"index":12730},{"krate":0,"index":12728},{"krate":0,"index":12725},{"krate":0,"index":12723},{"krate":0,"index":12721},{"krate":0,"index":12719},{"krate":0,"index":12713},{"krate":0,"index":12698},{"krate":0,"index":4980},{"krate":0,"index":12735},{"krate":0,"index":12772},{"krate":0,"index":12771},{"krate":0,"index":12769},{"krate":0,"index":12767},{"krate":0,"index":12764},{"krate":0,"index":12762},{"krate":0,"index":12760},{"krate":0,"index":12758},{"krate":0,"index":12752},{"krate":0,"index":12737},{"krate":0,"index":4982},{"krate":0,"index":12774},{"krate":0,"index":12811},{"krate":0,"index":12810},{"krate":0,"index":12808},{"krate":0,"index":12806},{"krate":0,"index":12803},{"krate":0,"index":12801},{"krate":0,"index":12799},{"krate":0,"index":12797},{"krate":0,"index":12791},{"krate":0,"index":12776},{"krate":0,"index":4984},{"krate":0,"index":12813},{"krate":0,"index":12850},{"krate":0,"index":12849},{"krate":0,"index":12847},{"krate":0,"index":12845},{"krate":0,"index":12842},{"krate":0,"index":12840},{"krate":0,"index":12838},{"krate":0,"index":12836},{"krate":0,"index":12830},{"krate":0,"index":12815},{"krate":0,"index":4986},{"krate":0,"index":12852},{"krate":0,"index":12889},{"krate":0,"index":12888},{"krate":0,"index":12886},{"krate":0,"index":12884},{"krate":0,"index":12881},{"krate":0,"index":12879},{"krate":0,"index":12877},{"krate":0,"index":12875},{"krate":0,"index":12869},{"krate":0,"index":12854},{"krate":0,"index":4988},{"krate":0,"index":12891},{"krate":0,"index":12928},{"krate":0,"index":12927},{"krate":0,"index":12925},{"krate":0,"index":12923},{"krate":0,"index":12920},{"krate":0,"index":12918},{"krate":0,"index":12916},{"krate":0,"index":12914},{"krate":0,"index":12908},{"krate":0,"index":12893},{"krate":0,"index":4990},{"krate":0,"index":12930},{"krate":0,"index":12967},{"krate":0,"index":12966},{"krate":0,"index":12964},{"krate":0,"index":12962},{"krate":0,"index":12959},{"krate":0,"index":12957},{"krate":0,"index":12955},{"krate":0,"index":12953},{"krate":0,"index":12947},{"krate":0,"index":12932},{"krate":0,"index":4992},{"krate":0,"index":785},{"krate":0,"index":791},{"krate":0,"index":793},{"krate":0,"index":796},{"krate":0,"index":799}],"decl_id":null,"docs":" Universal format specification.\n Applicable to textures, views, and vertex buffers.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3404},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":124998,"byte_end":125005,"line_start":19,"line_end":19,"column_start":16,"column_end":23},"name":"Aspects","qualname":"::format::Aspects","value":"Aspects {  }","parent":null,"children":[{"krate":0,"index":3405}],"decl_id":null,"docs":" Bitflags which describe what properties of an image\n a format specifies or does not specify.  For example,\n the `Rgba8Unorm` format only specifies a `COLOR` aspect,\n while `D32SfloatS8Uint` specifies both a depth and stencil\n aspect but no color.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3488},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":125052,"byte_end":125057,"line_start":21,"line_end":21,"column_start":15,"column_end":20},"name":"COLOR","qualname":"::format::Aspects::COLOR","value":"Aspects","parent":{"krate":0,"index":3487},"children":[],"decl_id":null,"docs":" Color aspect.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3489},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":125105,"byte_end":125110,"line_start":23,"line_end":23,"column_start":15,"column_end":20},"name":"DEPTH","qualname":"::format::Aspects::DEPTH","value":"Aspects","parent":{"krate":0,"index":3487},"children":[],"decl_id":null,"docs":" Depth aspect.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3490},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":125160,"byte_end":125167,"line_start":25,"line_end":25,"column_start":15,"column_end":22},"name":"STENCIL","qualname":"::format::Aspects::STENCIL","value":"Aspects","parent":{"krate":0,"index":3487},"children":[],"decl_id":null,"docs":" Stencil aspect.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3545},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":125293,"byte_end":125303,"line_start":31,"line_end":31,"column_start":12,"column_end":22},"name":"FormatDesc","qualname":"::format::FormatDesc","value":"FormatDesc { bits, dim, packed, aspects }","parent":null,"children":[{"krate":0,"index":3546},{"krate":0,"index":3547},{"krate":0,"index":3548},{"krate":0,"index":3549}],"decl_id":null,"docs":" Description of a format.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3546},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":125861,"byte_end":125865,"line_start":40,"line_end":40,"column_start":9,"column_end":13},"name":"bits","qualname":"::format::FormatDesc::bits","value":"u16","parent":{"krate":0,"index":3545},"children":[],"decl_id":null,"docs":" Total number of bits.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3547},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":125936,"byte_end":125939,"line_start":42,"line_end":42,"column_start":9,"column_end":12},"name":"dim","qualname":"::format::FormatDesc::dim","value":"(u8, u8)","parent":{"krate":0,"index":3545},"children":[],"decl_id":null,"docs":" Dimensions (width, height) of the texel blocks.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3548},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":126167,"byte_end":126173,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"packed","qualname":"::format::FormatDesc::packed","value":"bool","parent":{"krate":0,"index":3545},"children":[],"decl_id":null,"docs":" The format representation depends on the endianness of the platform.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3549},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":126212,"byte_end":126219,"line_start":49,"line_end":49,"column_start":9,"column_end":16},"name":"aspects","qualname":"::format::FormatDesc::aspects","value":"format::Aspects","parent":{"krate":0,"index":3545},"children":[],"decl_id":null,"docs":" Format aspects\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":126305,"byte_end":126318,"line_start":54,"line_end":54,"column_start":12,"column_end":25},"name":"is_compressed","qualname":"<FormatDesc>::is_compressed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the format is compressed.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3583},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":126505,"byte_end":126515,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"FormatBits","qualname":"::format::FormatBits","value":"FormatBits { color, alpha, depth, stencil }","parent":null,"children":[{"krate":0,"index":3584},{"krate":0,"index":3585},{"krate":0,"index":3586},{"krate":0,"index":3587}],"decl_id":null,"docs":" Description of the bits distribution of a format.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3584},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":126632,"byte_end":126637,"line_start":65,"line_end":65,"column_start":9,"column_end":14},"name":"color","qualname":"::format::FormatBits::color","value":"u8","parent":{"krate":0,"index":3583},"children":[],"decl_id":null,"docs":" Number of color bits (summed for R/G/B).","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3585},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":126738,"byte_end":126743,"line_start":69,"line_end":69,"column_start":9,"column_end":14},"name":"alpha","qualname":"::format::FormatBits::alpha","value":"u8","parent":{"krate":0,"index":3583},"children":[],"decl_id":null,"docs":" Number of alpha bits.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3586},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":126786,"byte_end":126791,"line_start":71,"line_end":71,"column_start":9,"column_end":14},"name":"depth","qualname":"::format::FormatBits::depth","value":"u8","parent":{"krate":0,"index":3583},"children":[],"decl_id":null,"docs":" Number of depth bits\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3587},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":126836,"byte_end":126843,"line_start":73,"line_end":73,"column_start":9,"column_end":16},"name":"stencil","qualname":"::format::FormatBits::stencil","value":"u8","parent":{"krate":0,"index":3583},"children":[],"decl_id":null,"docs":" Number of stencil bits\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":776},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":126915,"byte_end":126924,"line_start":77,"line_end":77,"column_start":11,"column_end":20},"name":"BITS_ZERO","qualname":"::format::BITS_ZERO","value":"FormatBits","parent":null,"children":[],"decl_id":null,"docs":" Format bits configuration with no bits assigned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3622},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":127341,"byte_end":127345,"line_start":91,"line_end":91,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Component::Zero","value":"Component::Zero","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Hardcoded zero\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3624},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":127373,"byte_end":127376,"line_start":93,"line_end":93,"column_start":5,"column_end":8},"name":"One","qualname":"::format::Component::One","value":"Component::One","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Hardcoded one\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3626},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":127402,"byte_end":127403,"line_start":95,"line_end":95,"column_start":5,"column_end":6},"name":"R","qualname":"::format::Component::R","value":"Component::R","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Red channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3628},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":127431,"byte_end":127432,"line_start":97,"line_end":97,"column_start":5,"column_end":6},"name":"G","qualname":"::format::Component::G","value":"Component::G","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Green channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3630},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":127459,"byte_end":127460,"line_start":99,"line_end":99,"column_start":5,"column_end":6},"name":"B","qualname":"::format::Component::B","value":"Component::B","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Blue channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3632},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":127489,"byte_end":127490,"line_start":101,"line_end":101,"column_start":5,"column_end":6},"name":"A","qualname":"::format::Component::A","value":"Component::A","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Alpha channel.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3621},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":127302,"byte_end":127311,"line_start":89,"line_end":89,"column_start":10,"column_end":19},"name":"Component","qualname":"::format::Component","value":"Component::{Zero, One, R, G, B, A}","parent":null,"children":[{"krate":0,"index":3622},{"krate":0,"index":3624},{"krate":0,"index":3626},{"krate":0,"index":3628},{"krate":0,"index":3630},{"krate":0,"index":3632}],"decl_id":null,"docs":" Source channel in a swizzle configuration. Some may redirect onto\n different physical channels, some may be hardcoded to 0 or 1.\n","sig":null,"attributes":[{"value":"repr(u8)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":127150,"byte_end":127161,"line_start":86,"line_end":86,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3703},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":128060,"byte_end":128067,"line_start":114,"line_end":114,"column_start":12,"column_end":19},"name":"Swizzle","qualname":"::format::Swizzle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Channel swizzle configuration for the resource views.\n This specifies a \"swizzle\" operation which remaps the various\n channels of a format into a different order.  For example,\n `Swizzle(Component::B, Component::G, Component::R, Component::A)`\n will swap `RGBA` formats into `BGRA` formats and back.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":128229,"byte_end":128231,"line_start":118,"line_end":118,"column_start":15,"column_end":17},"name":"NO","qualname":"::format::Swizzle::NO","value":"Swizzle","parent":{"krate":0,"index":777},"children":[],"decl_id":null,"docs":" A trivially non-swizzling configuration; performs no changes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3765},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":128571,"byte_end":128581,"line_start":130,"line_end":130,"column_start":12,"column_end":22},"name":"Properties","qualname":"::format::Properties","value":"Properties { linear_tiling, optimal_tiling, buffer_features }","parent":null,"children":[{"krate":0,"index":3766},{"krate":0,"index":3767},{"krate":0,"index":3768}],"decl_id":null,"docs":" Format properties of the physical device.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3766},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":128789,"byte_end":128802,"line_start":134,"line_end":134,"column_start":9,"column_end":22},"name":"linear_tiling","qualname":"::format::Properties::linear_tiling","value":"format::ImageFeature","parent":{"krate":0,"index":3765},"children":[],"decl_id":null,"docs":" A bitmask of the features supported when an image with linear tiling is requested.\n Linear tiling has a known layout in-memory so data can be copied to and from host\n memory.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3767},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":129007,"byte_end":129021,"line_start":137,"line_end":137,"column_start":9,"column_end":23},"name":"optimal_tiling","qualname":"::format::Properties::optimal_tiling","value":"format::ImageFeature","parent":{"krate":0,"index":3765},"children":[],"decl_id":null,"docs":" A bitmask of the features supported when an image with optimal tiling is requested.\n Optimal tiling is arranged however the GPU wants; its exact layout is undefined.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3768},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":129088,"byte_end":129103,"line_start":139,"line_end":139,"column_start":9,"column_end":24},"name":"buffer_features","qualname":"::format::Properties::buffer_features","value":"format::BufferFeature","parent":{"krate":0,"index":3765},"children":[],"decl_id":null,"docs":" The features supported by buffers.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3835},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":129268,"byte_end":129280,"line_start":146,"line_end":146,"column_start":16,"column_end":28},"name":"ImageFeature","qualname":"::format::ImageFeature","value":"ImageFeature {  }","parent":null,"children":[{"krate":0,"index":3836}],"decl_id":null,"docs":" Image feature flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3927},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":129341,"byte_end":129348,"line_start":148,"line_end":148,"column_start":15,"column_end":22},"name":"SAMPLED","qualname":"::format::ImageFeature::SAMPLED","value":"ImageFeature","parent":{"krate":0,"index":3926},"children":[],"decl_id":null,"docs":" Image view can be sampled.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3928},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":129423,"byte_end":129430,"line_start":150,"line_end":150,"column_start":15,"column_end":22},"name":"STORAGE","qualname":"::format::ImageFeature::STORAGE","value":"ImageFeature","parent":{"krate":0,"index":3926},"children":[],"decl_id":null,"docs":" Image view can be used as storage image.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3929},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":129520,"byte_end":129534,"line_start":152,"line_end":152,"column_start":15,"column_end":29},"name":"STORAGE_ATOMIC","qualname":"::format::ImageFeature::STORAGE_ATOMIC","value":"ImageFeature","parent":{"krate":0,"index":3926},"children":[],"decl_id":null,"docs":" Image view can be used as storage image (with atomics).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3930},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":129622,"byte_end":129638,"line_start":154,"line_end":154,"column_start":15,"column_end":31},"name":"COLOR_ATTACHMENT","qualname":"::format::ImageFeature::COLOR_ATTACHMENT","value":"ImageFeature","parent":{"krate":0,"index":3926},"children":[],"decl_id":null,"docs":" Image view can be used as color and input attachment.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3931},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":129743,"byte_end":129765,"line_start":156,"line_end":156,"column_start":15,"column_end":37},"name":"COLOR_ATTACHMENT_BLEND","qualname":"::format::ImageFeature::COLOR_ATTACHMENT_BLEND","value":"ImageFeature","parent":{"krate":0,"index":3926},"children":[],"decl_id":null,"docs":" Image view can be used as color (with blending) and input attachment.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3932},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":129863,"byte_end":129887,"line_start":158,"line_end":158,"column_start":15,"column_end":39},"name":"DEPTH_STENCIL_ATTACHMENT","qualname":"::format::ImageFeature::DEPTH_STENCIL_ATTACHMENT","value":"ImageFeature","parent":{"krate":0,"index":3926},"children":[],"decl_id":null,"docs":" Image view can be used as depth-stencil and input attachment.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3933},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":129970,"byte_end":129978,"line_start":160,"line_end":160,"column_start":15,"column_end":23},"name":"BLIT_SRC","qualname":"::format::ImageFeature::BLIT_SRC","value":"ImageFeature","parent":{"krate":0,"index":3926},"children":[],"decl_id":null,"docs":" Image can be used as source for blit commands.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3934},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":130066,"byte_end":130074,"line_start":162,"line_end":162,"column_start":15,"column_end":23},"name":"BLIT_DST","qualname":"::format::ImageFeature::BLIT_DST","value":"ImageFeature","parent":{"krate":0,"index":3926},"children":[],"decl_id":null,"docs":" Image can be used as destination for blit commands.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3935},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":130265,"byte_end":130279,"line_start":166,"line_end":166,"column_start":15,"column_end":29},"name":"SAMPLED_LINEAR","qualname":"::format::ImageFeature::SAMPLED_LINEAR","value":"ImageFeature","parent":{"krate":0,"index":3926},"children":[],"decl_id":null,"docs":" Image can be sampled with a (mipmap) linear sampler or as blit source\n with linear sampling.\n Requires `SAMPLED` or `BLIT_SRC` flag.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4008},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":130446,"byte_end":130459,"line_start":174,"line_end":174,"column_start":16,"column_end":29},"name":"BufferFeature","qualname":"::format::BufferFeature","value":"BufferFeature {  }","parent":null,"children":[{"krate":0,"index":4009}],"decl_id":null,"docs":" Buffer feature flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4095},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":130542,"byte_end":130555,"line_start":176,"line_end":176,"column_start":15,"column_end":28},"name":"UNIFORM_TEXEL","qualname":"::format::BufferFeature::UNIFORM_TEXEL","value":"BufferFeature","parent":{"krate":0,"index":4094},"children":[],"decl_id":null,"docs":" Buffer view can be used as uniform texel buffer.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4096},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":130638,"byte_end":130651,"line_start":178,"line_end":178,"column_start":15,"column_end":28},"name":"STORAGE_TEXEL","qualname":"::format::BufferFeature::STORAGE_TEXEL","value":"BufferFeature","parent":{"krate":0,"index":4094},"children":[],"decl_id":null,"docs":" Buffer view can be used as storage texel buffer.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4097},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":130750,"byte_end":130770,"line_start":180,"line_end":180,"column_start":15,"column_end":35},"name":"STORAGE_TEXEL_ATOMIC","qualname":"::format::BufferFeature::STORAGE_TEXEL_ATOMIC","value":"BufferFeature","parent":{"krate":0,"index":4094},"children":[],"decl_id":null,"docs":" Buffer view can be used as storage texel buffer (with atomics).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4098},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":130846,"byte_end":130852,"line_start":182,"line_end":182,"column_start":15,"column_end":21},"name":"VERTEX","qualname":"::format::BufferFeature::VERTEX","value":"BufferFeature","parent":{"krate":0,"index":4094},"children":[],"decl_id":null,"docs":" Image view can be used as vertex buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4157},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":131172,"byte_end":131177,"line_start":193,"line_end":193,"column_start":5,"column_end":10},"name":"Unorm","qualname":"::format::ChannelType::Unorm","value":"ChannelType::Unorm","parent":{"krate":0,"index":4156},"children":[],"decl_id":null,"docs":" Unsigned normalized.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4159},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":131210,"byte_end":131215,"line_start":195,"line_end":195,"column_start":5,"column_end":10},"name":"Snorm","qualname":"::format::ChannelType::Snorm","value":"ChannelType::Snorm","parent":{"krate":0,"index":4156},"children":[],"decl_id":null,"docs":" Signed normalized.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4161},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":131247,"byte_end":131251,"line_start":197,"line_end":197,"column_start":5,"column_end":9},"name":"Uint","qualname":"::format::ChannelType::Uint","value":"ChannelType::Uint","parent":{"krate":0,"index":4156},"children":[],"decl_id":null,"docs":" Unsigned integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4163},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":131281,"byte_end":131285,"line_start":199,"line_end":199,"column_start":5,"column_end":9},"name":"Sint","qualname":"::format::ChannelType::Sint","value":"ChannelType::Sint","parent":{"krate":0,"index":4156},"children":[],"decl_id":null,"docs":" Signed integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4165},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":131324,"byte_end":131330,"line_start":201,"line_end":201,"column_start":5,"column_end":11},"name":"Ufloat","qualname":"::format::ChannelType::Ufloat","value":"ChannelType::Ufloat","parent":{"krate":0,"index":4156},"children":[],"decl_id":null,"docs":" Unsigned floating-point.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4167},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":131367,"byte_end":131373,"line_start":203,"line_end":203,"column_start":5,"column_end":11},"name":"Sfloat","qualname":"::format::ChannelType::Sfloat","value":"ChannelType::Sfloat","parent":{"krate":0,"index":4156},"children":[],"decl_id":null,"docs":" Signed floating-point.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4169},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":131412,"byte_end":131419,"line_start":205,"line_end":205,"column_start":5,"column_end":12},"name":"Uscaled","qualname":"::format::ChannelType::Uscaled","value":"ChannelType::Uscaled","parent":{"krate":0,"index":4156},"children":[],"decl_id":null,"docs":" Unsigned scaled integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4171},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":131456,"byte_end":131463,"line_start":207,"line_end":207,"column_start":5,"column_end":12},"name":"Sscaled","qualname":"::format::ChannelType::Sscaled","value":"ChannelType::Sscaled","parent":{"krate":0,"index":4156},"children":[],"decl_id":null,"docs":" Signed scaled integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4173},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":131523,"byte_end":131527,"line_start":209,"line_end":209,"column_start":5,"column_end":9},"name":"Srgb","qualname":"::format::ChannelType::Srgb","value":"ChannelType::Srgb","parent":{"krate":0,"index":4156},"children":[],"decl_id":null,"docs":" Unsigned normalized, SRGB non-linear encoded.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4156},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":131125,"byte_end":131136,"line_start":191,"line_end":191,"column_start":10,"column_end":21},"name":"ChannelType","qualname":"::format::ChannelType","value":"ChannelType::{Unorm, Snorm, Uint, Sint, Ufloat, Sfloat, Uscaled, Sscaled, Srgb}","parent":null,"children":[{"krate":0,"index":4157},{"krate":0,"index":4159},{"krate":0,"index":4161},{"krate":0,"index":4163},{"krate":0,"index":4165},{"krate":0,"index":4167},{"krate":0,"index":4169},{"krate":0,"index":4171},{"krate":0,"index":4173}],"decl_id":null,"docs":" Type of a surface channel. This is how we interpret the\n storage allocated with `SurfaceType`.\n","sig":null,"attributes":[{"value":"repr(u8)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":130973,"byte_end":130984,"line_start":188,"line_end":188,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4571},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":137163,"byte_end":137173,"line_start":325,"line_end":325,"column_start":12,"column_end":22},"name":"BaseFormat","qualname":"::format::BaseFormat","value":"","parent":null,"children":[],"decl_id":null,"docs":" Generic run-time base format.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":137256,"byte_end":137264,"line_start":328,"line_end":328,"column_start":11,"column_end":19},"name":"AsFormat","qualname":"::format::AsFormat","value":"AsFormat","parent":null,"children":[{"krate":0,"index":783}],"decl_id":null,"docs":" Conversion trait into `Format`;\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":137304,"byte_end":137308,"line_start":330,"line_end":330,"column_start":11,"column_end":15},"name":"SELF","qualname":"::format::AsFormat::SELF","value":"Format","parent":{"krate":0,"index":782},"children":[],"decl_id":null,"docs":" Associated format.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5793},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139817,"byte_end":139825,"line_start":395,"line_end":395,"column_start":5,"column_end":13},"name":"Rg4Unorm","qualname":"::format::Rg4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5832},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139848,"byte_end":139858,"line_start":396,"line_end":396,"column_start":5,"column_end":15},"name":"Rgba4Unorm","qualname":"::format::Rgba4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5871},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139887,"byte_end":139897,"line_start":397,"line_end":397,"column_start":5,"column_end":15},"name":"Bgra4Unorm","qualname":"::format::Bgra4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5910},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139926,"byte_end":139937,"line_start":398,"line_end":398,"column_start":5,"column_end":16},"name":"R5g6b5Unorm","qualname":"::format::R5g6b5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5949},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139963,"byte_end":139974,"line_start":399,"line_end":399,"column_start":5,"column_end":16},"name":"B5g6r5Unorm","qualname":"::format::B5g6r5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5988},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140000,"byte_end":140013,"line_start":400,"line_end":400,"column_start":5,"column_end":18},"name":"R5g5b5a1Unorm","qualname":"::format::R5g5b5a1Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6027},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140042,"byte_end":140055,"line_start":401,"line_end":401,"column_start":5,"column_end":18},"name":"B5g5r5a1Unorm","qualname":"::format::B5g5r5a1Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6066},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140084,"byte_end":140097,"line_start":402,"line_end":402,"column_start":5,"column_end":18},"name":"A1r5g5b5Unorm","qualname":"::format::A1r5g5b5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6105},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140126,"byte_end":140133,"line_start":403,"line_end":403,"column_start":5,"column_end":12},"name":"R8Unorm","qualname":"::format::R8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6144},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140153,"byte_end":140160,"line_start":404,"line_end":404,"column_start":5,"column_end":12},"name":"R8Snorm","qualname":"::format::R8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6183},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140180,"byte_end":140189,"line_start":405,"line_end":405,"column_start":5,"column_end":14},"name":"R8Uscaled","qualname":"::format::R8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6222},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140211,"byte_end":140220,"line_start":406,"line_end":406,"column_start":5,"column_end":14},"name":"R8Sscaled","qualname":"::format::R8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6261},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140242,"byte_end":140248,"line_start":407,"line_end":407,"column_start":5,"column_end":11},"name":"R8Uint","qualname":"::format::R8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6300},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140267,"byte_end":140273,"line_start":408,"line_end":408,"column_start":5,"column_end":11},"name":"R8Sint","qualname":"::format::R8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6339},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140292,"byte_end":140298,"line_start":409,"line_end":409,"column_start":5,"column_end":11},"name":"R8Srgb","qualname":"::format::R8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6378},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140317,"byte_end":140325,"line_start":410,"line_end":410,"column_start":5,"column_end":13},"name":"Rg8Unorm","qualname":"::format::Rg8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6417},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140348,"byte_end":140356,"line_start":411,"line_end":411,"column_start":5,"column_end":13},"name":"Rg8Snorm","qualname":"::format::Rg8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6456},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140379,"byte_end":140389,"line_start":412,"line_end":412,"column_start":5,"column_end":15},"name":"Rg8Uscaled","qualname":"::format::Rg8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6495},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140414,"byte_end":140424,"line_start":413,"line_end":413,"column_start":5,"column_end":15},"name":"Rg8Sscaled","qualname":"::format::Rg8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6534},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140449,"byte_end":140456,"line_start":414,"line_end":414,"column_start":5,"column_end":12},"name":"Rg8Uint","qualname":"::format::Rg8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6573},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140478,"byte_end":140485,"line_start":415,"line_end":415,"column_start":5,"column_end":12},"name":"Rg8Sint","qualname":"::format::Rg8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6612},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140507,"byte_end":140514,"line_start":416,"line_end":416,"column_start":5,"column_end":12},"name":"Rg8Srgb","qualname":"::format::Rg8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6651},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140536,"byte_end":140545,"line_start":417,"line_end":417,"column_start":5,"column_end":14},"name":"Rgb8Unorm","qualname":"::format::Rgb8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6690},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140571,"byte_end":140580,"line_start":418,"line_end":418,"column_start":5,"column_end":14},"name":"Rgb8Snorm","qualname":"::format::Rgb8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6729},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140606,"byte_end":140617,"line_start":419,"line_end":419,"column_start":5,"column_end":16},"name":"Rgb8Uscaled","qualname":"::format::Rgb8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6768},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140645,"byte_end":140656,"line_start":420,"line_end":420,"column_start":5,"column_end":16},"name":"Rgb8Sscaled","qualname":"::format::Rgb8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6807},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140684,"byte_end":140692,"line_start":421,"line_end":421,"column_start":5,"column_end":13},"name":"Rgb8Uint","qualname":"::format::Rgb8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6846},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140717,"byte_end":140725,"line_start":422,"line_end":422,"column_start":5,"column_end":13},"name":"Rgb8Sint","qualname":"::format::Rgb8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6885},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140750,"byte_end":140758,"line_start":423,"line_end":423,"column_start":5,"column_end":13},"name":"Rgb8Srgb","qualname":"::format::Rgb8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6924},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140783,"byte_end":140792,"line_start":424,"line_end":424,"column_start":5,"column_end":14},"name":"Bgr8Unorm","qualname":"::format::Bgr8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6963},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140818,"byte_end":140827,"line_start":425,"line_end":425,"column_start":5,"column_end":14},"name":"Bgr8Snorm","qualname":"::format::Bgr8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7002},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140853,"byte_end":140864,"line_start":426,"line_end":426,"column_start":5,"column_end":16},"name":"Bgr8Uscaled","qualname":"::format::Bgr8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7041},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140892,"byte_end":140903,"line_start":427,"line_end":427,"column_start":5,"column_end":16},"name":"Bgr8Sscaled","qualname":"::format::Bgr8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7080},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140931,"byte_end":140939,"line_start":428,"line_end":428,"column_start":5,"column_end":13},"name":"Bgr8Uint","qualname":"::format::Bgr8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7119},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140964,"byte_end":140972,"line_start":429,"line_end":429,"column_start":5,"column_end":13},"name":"Bgr8Sint","qualname":"::format::Bgr8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7158},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":140997,"byte_end":141005,"line_start":430,"line_end":430,"column_start":5,"column_end":13},"name":"Bgr8Srgb","qualname":"::format::Bgr8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7197},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141030,"byte_end":141040,"line_start":431,"line_end":431,"column_start":5,"column_end":15},"name":"Rgba8Unorm","qualname":"::format::Rgba8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7236},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141069,"byte_end":141079,"line_start":432,"line_end":432,"column_start":5,"column_end":15},"name":"Rgba8Snorm","qualname":"::format::Rgba8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7275},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141108,"byte_end":141120,"line_start":433,"line_end":433,"column_start":5,"column_end":17},"name":"Rgba8Uscaled","qualname":"::format::Rgba8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7314},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141151,"byte_end":141163,"line_start":434,"line_end":434,"column_start":5,"column_end":17},"name":"Rgba8Sscaled","qualname":"::format::Rgba8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7353},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141194,"byte_end":141203,"line_start":435,"line_end":435,"column_start":5,"column_end":14},"name":"Rgba8Uint","qualname":"::format::Rgba8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7392},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141231,"byte_end":141240,"line_start":436,"line_end":436,"column_start":5,"column_end":14},"name":"Rgba8Sint","qualname":"::format::Rgba8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7431},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141268,"byte_end":141277,"line_start":437,"line_end":437,"column_start":5,"column_end":14},"name":"Rgba8Srgb","qualname":"::format::Rgba8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7470},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141305,"byte_end":141315,"line_start":438,"line_end":438,"column_start":5,"column_end":15},"name":"Bgra8Unorm","qualname":"::format::Bgra8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7509},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141344,"byte_end":141354,"line_start":439,"line_end":439,"column_start":5,"column_end":15},"name":"Bgra8Snorm","qualname":"::format::Bgra8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7548},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141383,"byte_end":141395,"line_start":440,"line_end":440,"column_start":5,"column_end":17},"name":"Bgra8Uscaled","qualname":"::format::Bgra8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7587},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141426,"byte_end":141438,"line_start":441,"line_end":441,"column_start":5,"column_end":17},"name":"Bgra8Sscaled","qualname":"::format::Bgra8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7626},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141469,"byte_end":141478,"line_start":442,"line_end":442,"column_start":5,"column_end":14},"name":"Bgra8Uint","qualname":"::format::Bgra8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7665},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141506,"byte_end":141515,"line_start":443,"line_end":443,"column_start":5,"column_end":14},"name":"Bgra8Sint","qualname":"::format::Bgra8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7704},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141543,"byte_end":141552,"line_start":444,"line_end":444,"column_start":5,"column_end":14},"name":"Bgra8Srgb","qualname":"::format::Bgra8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7743},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141580,"byte_end":141590,"line_start":445,"line_end":445,"column_start":5,"column_end":15},"name":"Abgr8Unorm","qualname":"::format::Abgr8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7782},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141619,"byte_end":141629,"line_start":446,"line_end":446,"column_start":5,"column_end":15},"name":"Abgr8Snorm","qualname":"::format::Abgr8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7821},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141658,"byte_end":141670,"line_start":447,"line_end":447,"column_start":5,"column_end":17},"name":"Abgr8Uscaled","qualname":"::format::Abgr8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7860},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141701,"byte_end":141713,"line_start":448,"line_end":448,"column_start":5,"column_end":17},"name":"Abgr8Sscaled","qualname":"::format::Abgr8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7899},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141744,"byte_end":141753,"line_start":449,"line_end":449,"column_start":5,"column_end":14},"name":"Abgr8Uint","qualname":"::format::Abgr8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7938},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141781,"byte_end":141790,"line_start":450,"line_end":450,"column_start":5,"column_end":14},"name":"Abgr8Sint","qualname":"::format::Abgr8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7977},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141818,"byte_end":141827,"line_start":451,"line_end":451,"column_start":5,"column_end":14},"name":"Abgr8Srgb","qualname":"::format::Abgr8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8016},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141855,"byte_end":141871,"line_start":452,"line_end":452,"column_start":5,"column_end":21},"name":"A2r10g10b10Unorm","qualname":"::format::A2r10g10b10Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8055},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141903,"byte_end":141919,"line_start":453,"line_end":453,"column_start":5,"column_end":21},"name":"A2r10g10b10Snorm","qualname":"::format::A2r10g10b10Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8094},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":141951,"byte_end":141969,"line_start":454,"line_end":454,"column_start":5,"column_end":23},"name":"A2r10g10b10Uscaled","qualname":"::format::A2r10g10b10Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8133},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142003,"byte_end":142021,"line_start":455,"line_end":455,"column_start":5,"column_end":23},"name":"A2r10g10b10Sscaled","qualname":"::format::A2r10g10b10Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8172},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142055,"byte_end":142070,"line_start":456,"line_end":456,"column_start":5,"column_end":20},"name":"A2r10g10b10Uint","qualname":"::format::A2r10g10b10Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8211},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142101,"byte_end":142116,"line_start":457,"line_end":457,"column_start":5,"column_end":20},"name":"A2r10g10b10Sint","qualname":"::format::A2r10g10b10Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8250},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142147,"byte_end":142163,"line_start":458,"line_end":458,"column_start":5,"column_end":21},"name":"A2b10g10r10Unorm","qualname":"::format::A2b10g10r10Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8289},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142195,"byte_end":142211,"line_start":459,"line_end":459,"column_start":5,"column_end":21},"name":"A2b10g10r10Snorm","qualname":"::format::A2b10g10r10Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8328},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142243,"byte_end":142261,"line_start":460,"line_end":460,"column_start":5,"column_end":23},"name":"A2b10g10r10Uscaled","qualname":"::format::A2b10g10r10Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8367},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142295,"byte_end":142313,"line_start":461,"line_end":461,"column_start":5,"column_end":23},"name":"A2b10g10r10Sscaled","qualname":"::format::A2b10g10r10Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8406},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142347,"byte_end":142362,"line_start":462,"line_end":462,"column_start":5,"column_end":20},"name":"A2b10g10r10Uint","qualname":"::format::A2b10g10r10Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8445},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142393,"byte_end":142408,"line_start":463,"line_end":463,"column_start":5,"column_end":20},"name":"A2b10g10r10Sint","qualname":"::format::A2b10g10r10Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8484},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142439,"byte_end":142447,"line_start":464,"line_end":464,"column_start":5,"column_end":13},"name":"R16Unorm","qualname":"::format::R16Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8523},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142468,"byte_end":142476,"line_start":465,"line_end":465,"column_start":5,"column_end":13},"name":"R16Snorm","qualname":"::format::R16Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8562},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142497,"byte_end":142507,"line_start":466,"line_end":466,"column_start":5,"column_end":15},"name":"R16Uscaled","qualname":"::format::R16Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8601},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142530,"byte_end":142540,"line_start":467,"line_end":467,"column_start":5,"column_end":15},"name":"R16Sscaled","qualname":"::format::R16Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8640},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142563,"byte_end":142570,"line_start":468,"line_end":468,"column_start":5,"column_end":12},"name":"R16Uint","qualname":"::format::R16Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8679},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142590,"byte_end":142597,"line_start":469,"line_end":469,"column_start":5,"column_end":12},"name":"R16Sint","qualname":"::format::R16Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8718},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142617,"byte_end":142626,"line_start":470,"line_end":470,"column_start":5,"column_end":14},"name":"R16Sfloat","qualname":"::format::R16Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8757},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142648,"byte_end":142657,"line_start":471,"line_end":471,"column_start":5,"column_end":14},"name":"Rg16Unorm","qualname":"::format::Rg16Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8796},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142682,"byte_end":142691,"line_start":472,"line_end":472,"column_start":5,"column_end":14},"name":"Rg16Snorm","qualname":"::format::Rg16Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8835},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142716,"byte_end":142727,"line_start":473,"line_end":473,"column_start":5,"column_end":16},"name":"Rg16Uscaled","qualname":"::format::Rg16Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8874},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142754,"byte_end":142765,"line_start":474,"line_end":474,"column_start":5,"column_end":16},"name":"Rg16Sscaled","qualname":"::format::Rg16Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8913},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142792,"byte_end":142800,"line_start":475,"line_end":475,"column_start":5,"column_end":13},"name":"Rg16Uint","qualname":"::format::Rg16Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8952},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142824,"byte_end":142832,"line_start":476,"line_end":476,"column_start":5,"column_end":13},"name":"Rg16Sint","qualname":"::format::Rg16Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8991},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142856,"byte_end":142866,"line_start":477,"line_end":477,"column_start":5,"column_end":15},"name":"Rg16Sfloat","qualname":"::format::Rg16Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9030},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142892,"byte_end":142902,"line_start":478,"line_end":478,"column_start":5,"column_end":15},"name":"Rgb16Unorm","qualname":"::format::Rgb16Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9069},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142931,"byte_end":142941,"line_start":479,"line_end":479,"column_start":5,"column_end":15},"name":"Rgb16Snorm","qualname":"::format::Rgb16Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9108},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":142970,"byte_end":142982,"line_start":480,"line_end":480,"column_start":5,"column_end":17},"name":"Rgb16Uscaled","qualname":"::format::Rgb16Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9147},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143013,"byte_end":143025,"line_start":481,"line_end":481,"column_start":5,"column_end":17},"name":"Rgb16Sscaled","qualname":"::format::Rgb16Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9186},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143056,"byte_end":143065,"line_start":482,"line_end":482,"column_start":5,"column_end":14},"name":"Rgb16Uint","qualname":"::format::Rgb16Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9225},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143093,"byte_end":143102,"line_start":483,"line_end":483,"column_start":5,"column_end":14},"name":"Rgb16Sint","qualname":"::format::Rgb16Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9264},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143130,"byte_end":143141,"line_start":484,"line_end":484,"column_start":5,"column_end":16},"name":"Rgb16Sfloat","qualname":"::format::Rgb16Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9303},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143171,"byte_end":143182,"line_start":485,"line_end":485,"column_start":5,"column_end":16},"name":"Rgba16Unorm","qualname":"::format::Rgba16Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9342},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143215,"byte_end":143226,"line_start":486,"line_end":486,"column_start":5,"column_end":16},"name":"Rgba16Snorm","qualname":"::format::Rgba16Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9381},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143259,"byte_end":143272,"line_start":487,"line_end":487,"column_start":5,"column_end":18},"name":"Rgba16Uscaled","qualname":"::format::Rgba16Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9420},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143307,"byte_end":143320,"line_start":488,"line_end":488,"column_start":5,"column_end":18},"name":"Rgba16Sscaled","qualname":"::format::Rgba16Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9459},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143355,"byte_end":143365,"line_start":489,"line_end":489,"column_start":5,"column_end":15},"name":"Rgba16Uint","qualname":"::format::Rgba16Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9498},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143397,"byte_end":143407,"line_start":490,"line_end":490,"column_start":5,"column_end":15},"name":"Rgba16Sint","qualname":"::format::Rgba16Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9537},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143439,"byte_end":143451,"line_start":491,"line_end":491,"column_start":5,"column_end":17},"name":"Rgba16Sfloat","qualname":"::format::Rgba16Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9576},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143485,"byte_end":143492,"line_start":492,"line_end":492,"column_start":5,"column_end":12},"name":"R32Uint","qualname":"::format::R32Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9615},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143512,"byte_end":143519,"line_start":493,"line_end":493,"column_start":5,"column_end":12},"name":"R32Sint","qualname":"::format::R32Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9654},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143539,"byte_end":143548,"line_start":494,"line_end":494,"column_start":5,"column_end":14},"name":"R32Sfloat","qualname":"::format::R32Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9693},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143570,"byte_end":143578,"line_start":495,"line_end":495,"column_start":5,"column_end":13},"name":"Rg32Uint","qualname":"::format::Rg32Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9732},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143602,"byte_end":143610,"line_start":496,"line_end":496,"column_start":5,"column_end":13},"name":"Rg32Sint","qualname":"::format::Rg32Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9771},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143634,"byte_end":143644,"line_start":497,"line_end":497,"column_start":5,"column_end":15},"name":"Rg32Sfloat","qualname":"::format::Rg32Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9810},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143670,"byte_end":143679,"line_start":498,"line_end":498,"column_start":5,"column_end":14},"name":"Rgb32Uint","qualname":"::format::Rgb32Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9849},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143707,"byte_end":143716,"line_start":499,"line_end":499,"column_start":5,"column_end":14},"name":"Rgb32Sint","qualname":"::format::Rgb32Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9888},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143744,"byte_end":143755,"line_start":500,"line_end":500,"column_start":5,"column_end":16},"name":"Rgb32Sfloat","qualname":"::format::Rgb32Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9927},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143785,"byte_end":143795,"line_start":501,"line_end":501,"column_start":5,"column_end":15},"name":"Rgba32Uint","qualname":"::format::Rgba32Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9966},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143827,"byte_end":143837,"line_start":502,"line_end":502,"column_start":5,"column_end":15},"name":"Rgba32Sint","qualname":"::format::Rgba32Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10005},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143869,"byte_end":143881,"line_start":503,"line_end":503,"column_start":5,"column_end":17},"name":"Rgba32Sfloat","qualname":"::format::Rgba32Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10044},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143915,"byte_end":143922,"line_start":504,"line_end":504,"column_start":5,"column_end":12},"name":"R64Uint","qualname":"::format::R64Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10083},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143942,"byte_end":143949,"line_start":505,"line_end":505,"column_start":5,"column_end":12},"name":"R64Sint","qualname":"::format::R64Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10122},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":143969,"byte_end":143978,"line_start":506,"line_end":506,"column_start":5,"column_end":14},"name":"R64Sfloat","qualname":"::format::R64Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10161},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144000,"byte_end":144008,"line_start":507,"line_end":507,"column_start":5,"column_end":13},"name":"Rg64Uint","qualname":"::format::Rg64Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10200},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144032,"byte_end":144040,"line_start":508,"line_end":508,"column_start":5,"column_end":13},"name":"Rg64Sint","qualname":"::format::Rg64Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10239},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144064,"byte_end":144074,"line_start":509,"line_end":509,"column_start":5,"column_end":15},"name":"Rg64Sfloat","qualname":"::format::Rg64Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10278},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144100,"byte_end":144109,"line_start":510,"line_end":510,"column_start":5,"column_end":14},"name":"Rgb64Uint","qualname":"::format::Rgb64Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10317},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144137,"byte_end":144146,"line_start":511,"line_end":511,"column_start":5,"column_end":14},"name":"Rgb64Sint","qualname":"::format::Rgb64Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10356},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144174,"byte_end":144185,"line_start":512,"line_end":512,"column_start":5,"column_end":16},"name":"Rgb64Sfloat","qualname":"::format::Rgb64Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10395},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144215,"byte_end":144225,"line_start":513,"line_end":513,"column_start":5,"column_end":15},"name":"Rgba64Uint","qualname":"::format::Rgba64Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10434},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144257,"byte_end":144267,"line_start":514,"line_end":514,"column_start":5,"column_end":15},"name":"Rgba64Sint","qualname":"::format::Rgba64Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10473},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144299,"byte_end":144311,"line_start":515,"line_end":515,"column_start":5,"column_end":17},"name":"Rgba64Sfloat","qualname":"::format::Rgba64Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10512},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144345,"byte_end":144360,"line_start":516,"line_end":516,"column_start":5,"column_end":20},"name":"B10g11r11Ufloat","qualname":"::format::B10g11r11Ufloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10551},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144390,"byte_end":144404,"line_start":517,"line_end":517,"column_start":5,"column_end":19},"name":"E5b9g9r9Ufloat","qualname":"::format::E5b9g9r9Ufloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10590},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144434,"byte_end":144442,"line_start":518,"line_end":518,"column_start":5,"column_end":13},"name":"D16Unorm","qualname":"::format::D16Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10629},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144463,"byte_end":144473,"line_start":519,"line_end":519,"column_start":5,"column_end":15},"name":"X8D24Unorm","qualname":"::format::X8D24Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10668},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144496,"byte_end":144505,"line_start":520,"line_end":520,"column_start":5,"column_end":14},"name":"D32Sfloat","qualname":"::format::D32Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10707},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144527,"byte_end":144533,"line_start":521,"line_end":521,"column_start":5,"column_end":11},"name":"S8Uint","qualname":"::format::S8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10746},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144552,"byte_end":144566,"line_start":522,"line_end":522,"column_start":5,"column_end":19},"name":"D16UnormS8Uint","qualname":"::format::D16UnormS8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10785},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144590,"byte_end":144604,"line_start":523,"line_end":523,"column_start":5,"column_end":19},"name":"D24UnormS8Uint","qualname":"::format::D24UnormS8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10824},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144628,"byte_end":144643,"line_start":524,"line_end":524,"column_start":5,"column_end":20},"name":"D32SfloatS8Uint","qualname":"::format::D32SfloatS8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10863},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144668,"byte_end":144679,"line_start":525,"line_end":525,"column_start":5,"column_end":16},"name":"Bc1RgbUnorm","qualname":"::format::Bc1RgbUnorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10902},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144704,"byte_end":144714,"line_start":526,"line_end":526,"column_start":5,"column_end":15},"name":"Bc1RgbSrgb","qualname":"::format::Bc1RgbSrgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10941},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144738,"byte_end":144750,"line_start":527,"line_end":527,"column_start":5,"column_end":17},"name":"Bc1RgbaUnorm","qualname":"::format::Bc1RgbaUnorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":10980},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144776,"byte_end":144787,"line_start":528,"line_end":528,"column_start":5,"column_end":16},"name":"Bc1RgbaSrgb","qualname":"::format::Bc1RgbaSrgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11019},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144812,"byte_end":144820,"line_start":529,"line_end":529,"column_start":5,"column_end":13},"name":"Bc2Unorm","qualname":"::format::Bc2Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11058},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144841,"byte_end":144848,"line_start":530,"line_end":530,"column_start":5,"column_end":12},"name":"Bc2Srgb","qualname":"::format::Bc2Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11097},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144868,"byte_end":144876,"line_start":531,"line_end":531,"column_start":5,"column_end":13},"name":"Bc3Unorm","qualname":"::format::Bc3Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11136},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144897,"byte_end":144904,"line_start":532,"line_end":532,"column_start":5,"column_end":12},"name":"Bc3Srgb","qualname":"::format::Bc3Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11175},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144924,"byte_end":144932,"line_start":533,"line_end":533,"column_start":5,"column_end":13},"name":"Bc4Unorm","qualname":"::format::Bc4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11214},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144953,"byte_end":144961,"line_start":534,"line_end":534,"column_start":5,"column_end":13},"name":"Bc4Snorm","qualname":"::format::Bc4Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11253},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":144982,"byte_end":144990,"line_start":535,"line_end":535,"column_start":5,"column_end":13},"name":"Bc5Unorm","qualname":"::format::Bc5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11292},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145011,"byte_end":145019,"line_start":536,"line_end":536,"column_start":5,"column_end":13},"name":"Bc5Snorm","qualname":"::format::Bc5Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11331},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145040,"byte_end":145050,"line_start":537,"line_end":537,"column_start":5,"column_end":15},"name":"Bc6hUfloat","qualname":"::format::Bc6hUfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11370},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145072,"byte_end":145082,"line_start":538,"line_end":538,"column_start":5,"column_end":15},"name":"Bc6hSfloat","qualname":"::format::Bc6hSfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11409},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145104,"byte_end":145112,"line_start":539,"line_end":539,"column_start":5,"column_end":13},"name":"Bc7Unorm","qualname":"::format::Bc7Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11448},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145133,"byte_end":145140,"line_start":540,"line_end":540,"column_start":5,"column_end":12},"name":"Bc7Srgb","qualname":"::format::Bc7Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11487},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145160,"byte_end":145175,"line_start":541,"line_end":541,"column_start":5,"column_end":20},"name":"Etc2R8g8b8Unorm","qualname":"::format::Etc2R8g8b8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11526},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145206,"byte_end":145220,"line_start":542,"line_end":542,"column_start":5,"column_end":19},"name":"Etc2R8g8b8Srgb","qualname":"::format::Etc2R8g8b8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11565},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145250,"byte_end":145267,"line_start":543,"line_end":543,"column_start":5,"column_end":22},"name":"Etc2R8g8b8a1Unorm","qualname":"::format::Etc2R8g8b8a1Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11604},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145301,"byte_end":145317,"line_start":544,"line_end":544,"column_start":5,"column_end":21},"name":"Etc2R8g8b8a1Srgb","qualname":"::format::Etc2R8g8b8a1Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11643},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145350,"byte_end":145367,"line_start":545,"line_end":545,"column_start":5,"column_end":22},"name":"Etc2R8g8b8a8Unorm","qualname":"::format::Etc2R8g8b8a8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11682},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145401,"byte_end":145417,"line_start":546,"line_end":546,"column_start":5,"column_end":21},"name":"Etc2R8g8b8a8Srgb","qualname":"::format::Etc2R8g8b8a8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11721},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145450,"byte_end":145461,"line_start":547,"line_end":547,"column_start":5,"column_end":16},"name":"EacR11Unorm","qualname":"::format::EacR11Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11760},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145486,"byte_end":145497,"line_start":548,"line_end":548,"column_start":5,"column_end":16},"name":"EacR11Snorm","qualname":"::format::EacR11Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11799},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145522,"byte_end":145536,"line_start":549,"line_end":549,"column_start":5,"column_end":19},"name":"EacR11g11Unorm","qualname":"::format::EacR11g11Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11838},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145565,"byte_end":145579,"line_start":550,"line_end":550,"column_start":5,"column_end":19},"name":"EacR11g11Snorm","qualname":"::format::EacR11g11Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11877},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145608,"byte_end":145620,"line_start":551,"line_end":551,"column_start":5,"column_end":17},"name":"Astc4x4Unorm","qualname":"::format::Astc4x4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11916},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145646,"byte_end":145657,"line_start":552,"line_end":552,"column_start":5,"column_end":16},"name":"Astc4x4Srgb","qualname":"::format::Astc4x4Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11955},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145682,"byte_end":145694,"line_start":553,"line_end":553,"column_start":5,"column_end":17},"name":"Astc5x4Unorm","qualname":"::format::Astc5x4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":11994},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145720,"byte_end":145731,"line_start":554,"line_end":554,"column_start":5,"column_end":16},"name":"Astc5x4Srgb","qualname":"::format::Astc5x4Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12033},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145756,"byte_end":145768,"line_start":555,"line_end":555,"column_start":5,"column_end":17},"name":"Astc5x5Unorm","qualname":"::format::Astc5x5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12072},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145794,"byte_end":145805,"line_start":556,"line_end":556,"column_start":5,"column_end":16},"name":"Astc5x5Srgb","qualname":"::format::Astc5x5Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12111},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145830,"byte_end":145842,"line_start":557,"line_end":557,"column_start":5,"column_end":17},"name":"Astc6x5Unorm","qualname":"::format::Astc6x5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12150},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145868,"byte_end":145879,"line_start":558,"line_end":558,"column_start":5,"column_end":16},"name":"Astc6x5Srgb","qualname":"::format::Astc6x5Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12189},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145904,"byte_end":145916,"line_start":559,"line_end":559,"column_start":5,"column_end":17},"name":"Astc6x6Unorm","qualname":"::format::Astc6x6Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12228},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145942,"byte_end":145953,"line_start":560,"line_end":560,"column_start":5,"column_end":16},"name":"Astc6x6Srgb","qualname":"::format::Astc6x6Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12267},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":145978,"byte_end":145990,"line_start":561,"line_end":561,"column_start":5,"column_end":17},"name":"Astc8x5Unorm","qualname":"::format::Astc8x5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12306},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146016,"byte_end":146027,"line_start":562,"line_end":562,"column_start":5,"column_end":16},"name":"Astc8x5Srgb","qualname":"::format::Astc8x5Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12345},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146052,"byte_end":146064,"line_start":563,"line_end":563,"column_start":5,"column_end":17},"name":"Astc8x6Unorm","qualname":"::format::Astc8x6Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12384},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146090,"byte_end":146101,"line_start":564,"line_end":564,"column_start":5,"column_end":16},"name":"Astc8x6Srgb","qualname":"::format::Astc8x6Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12423},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146126,"byte_end":146138,"line_start":565,"line_end":565,"column_start":5,"column_end":17},"name":"Astc8x8Unorm","qualname":"::format::Astc8x8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12462},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146164,"byte_end":146175,"line_start":566,"line_end":566,"column_start":5,"column_end":16},"name":"Astc8x8Srgb","qualname":"::format::Astc8x8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12501},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146200,"byte_end":146213,"line_start":567,"line_end":567,"column_start":5,"column_end":18},"name":"Astc10x5Unorm","qualname":"::format::Astc10x5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12540},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146240,"byte_end":146252,"line_start":568,"line_end":568,"column_start":5,"column_end":17},"name":"Astc10x5Srgb","qualname":"::format::Astc10x5Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12579},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146278,"byte_end":146291,"line_start":569,"line_end":569,"column_start":5,"column_end":18},"name":"Astc10x6Unorm","qualname":"::format::Astc10x6Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12618},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146318,"byte_end":146330,"line_start":570,"line_end":570,"column_start":5,"column_end":17},"name":"Astc10x6Srgb","qualname":"::format::Astc10x6Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12657},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146356,"byte_end":146369,"line_start":571,"line_end":571,"column_start":5,"column_end":18},"name":"Astc10x8Unorm","qualname":"::format::Astc10x8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12696},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146396,"byte_end":146408,"line_start":572,"line_end":572,"column_start":5,"column_end":17},"name":"Astc10x8Srgb","qualname":"::format::Astc10x8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12735},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146434,"byte_end":146448,"line_start":573,"line_end":573,"column_start":5,"column_end":19},"name":"Astc10x10Unorm","qualname":"::format::Astc10x10Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12774},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146476,"byte_end":146489,"line_start":574,"line_end":574,"column_start":5,"column_end":18},"name":"Astc10x10Srgb","qualname":"::format::Astc10x10Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12813},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146516,"byte_end":146530,"line_start":575,"line_end":575,"column_start":5,"column_end":19},"name":"Astc12x10Unorm","qualname":"::format::Astc12x10Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12852},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146558,"byte_end":146571,"line_start":576,"line_end":576,"column_start":5,"column_end":18},"name":"Astc12x10Srgb","qualname":"::format::Astc12x10Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12891},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146598,"byte_end":146612,"line_start":577,"line_end":577,"column_start":5,"column_end":19},"name":"Astc12x12Unorm","qualname":"::format::Astc12x12Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":12930},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146640,"byte_end":146653,"line_start":578,"line_end":578,"column_start":5,"column_end":18},"name":"Astc12x12Srgb","qualname":"::format::Astc12x12Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":139387,"byte_end":139409,"line_start":380,"line_end":380,"column_start":13,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146786,"byte_end":146797,"line_start":585,"line_end":585,"column_start":12,"column_end":23},"name":"base_format","qualname":"<Format>::base_format","value":"fn (self) -> BaseFormat","parent":null,"children":[],"decl_id":null,"docs":" Get base format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":147003,"byte_end":147015,"line_start":591,"line_end":591,"column_start":12,"column_end":24},"name":"surface_desc","qualname":"<Format>::surface_desc","value":"fn (&self) -> FormatDesc","parent":null,"children":[],"decl_id":null,"docs":" A shortcut to obtain surface format description.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":147143,"byte_end":147151,"line_start":596,"line_end":596,"column_start":12,"column_end":20},"name":"is_color","qualname":"<Format>::is_color","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the format has a color aspect.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":147297,"byte_end":147305,"line_start":601,"line_end":601,"column_start":12,"column_end":20},"name":"is_depth","qualname":"<Format>::is_depth","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the format has a depth aspect.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":147453,"byte_end":147463,"line_start":606,"line_end":606,"column_start":12,"column_end":22},"name":"is_stencil","qualname":"<Format>::is_stencil","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the format has a stencil aspect.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"image","qualname":"::image","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","parent":null,"children":[{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":12969},{"krate":0,"index":13037},{"krate":0,"index":13036},{"krate":0,"index":13034},{"krate":0,"index":13032},{"krate":0,"index":13029},{"krate":0,"index":13026},{"krate":0,"index":13024},{"krate":0,"index":13018},{"krate":0,"index":12973},{"krate":0,"index":815},{"krate":0,"index":13039},{"krate":0,"index":13105},{"krate":0,"index":13104},{"krate":0,"index":13102},{"krate":0,"index":13099},{"krate":0,"index":13096},{"krate":0,"index":13094},{"krate":0,"index":13088},{"krate":0,"index":13043},{"krate":0,"index":819},{"krate":0,"index":13107},{"krate":0,"index":13171},{"krate":0,"index":13170},{"krate":0,"index":13168},{"krate":0,"index":13166},{"krate":0,"index":13163},{"krate":0,"index":13161},{"krate":0,"index":13159},{"krate":0,"index":13157},{"krate":0,"index":13151},{"krate":0,"index":13112},{"krate":0,"index":13173},{"krate":0,"index":13210},{"krate":0,"index":13209},{"krate":0,"index":13207},{"krate":0,"index":13204},{"krate":0,"index":13202},{"krate":0,"index":13194},{"krate":0,"index":13199},{"krate":0,"index":822},{"krate":0,"index":13212},{"krate":0,"index":13248},{"krate":0,"index":13246},{"krate":0,"index":13243},{"krate":0,"index":13241},{"krate":0,"index":13233},{"krate":0,"index":13238},{"krate":0,"index":824},{"krate":0,"index":13250},{"krate":0,"index":13275},{"krate":0,"index":13273},{"krate":0,"index":13271},{"krate":0,"index":13268},{"krate":0,"index":13265},{"krate":0,"index":13257},{"krate":0,"index":13262},{"krate":0,"index":13277},{"krate":0,"index":13341},{"krate":0,"index":13340},{"krate":0,"index":13338},{"krate":0,"index":13336},{"krate":0,"index":13333},{"krate":0,"index":13331},{"krate":0,"index":13329},{"krate":0,"index":13327},{"krate":0,"index":13321},{"krate":0,"index":13282},{"krate":0,"index":13343},{"krate":0,"index":13413},{"krate":0,"index":13412},{"krate":0,"index":13410},{"krate":0,"index":13408},{"krate":0,"index":13405},{"krate":0,"index":13403},{"krate":0,"index":13400},{"krate":0,"index":13394},{"krate":0,"index":13388},{"krate":0,"index":13349},{"krate":0,"index":13415},{"krate":0,"index":13495},{"krate":0,"index":13494},{"krate":0,"index":13492},{"krate":0,"index":13490},{"krate":0,"index":13487},{"krate":0,"index":13485},{"krate":0,"index":13483},{"krate":0,"index":13481},{"krate":0,"index":13475},{"krate":0,"index":13428},{"krate":0,"index":826},{"krate":0,"index":13497},{"krate":0,"index":13633},{"krate":0,"index":13632},{"krate":0,"index":13630},{"krate":0,"index":13628},{"krate":0,"index":13625},{"krate":0,"index":13623},{"krate":0,"index":13620},{"krate":0,"index":13590},{"krate":0,"index":13584},{"krate":0,"index":13513},{"krate":0,"index":828},{"krate":0,"index":13635},{"krate":0,"index":13719},{"krate":0,"index":13718},{"krate":0,"index":13716},{"krate":0,"index":13714},{"krate":0,"index":13711},{"krate":0,"index":13709},{"krate":0,"index":13707},{"krate":0,"index":13705},{"krate":0,"index":13699},{"krate":0,"index":13650},{"krate":0,"index":13721},{"krate":0,"index":13783},{"krate":0,"index":13742},{"krate":0,"index":13741},{"krate":0,"index":13738},{"krate":0,"index":13736},{"krate":0,"index":13734},{"krate":0,"index":13728},{"krate":0,"index":13726},{"krate":0,"index":13723},{"krate":0,"index":13789},{"krate":0,"index":13796},{"krate":0,"index":13798},{"krate":0,"index":13800},{"krate":0,"index":13802},{"krate":0,"index":13804},{"krate":0,"index":13813},{"krate":0,"index":13816},{"krate":0,"index":13818},{"krate":0,"index":13821},{"krate":0,"index":13823},{"krate":0,"index":13826},{"krate":0,"index":13828},{"krate":0,"index":13831},{"krate":0,"index":13833},{"krate":0,"index":13836},{"krate":0,"index":13839},{"krate":0,"index":13862},{"krate":0,"index":13924},{"krate":0,"index":13883},{"krate":0,"index":13882},{"krate":0,"index":13879},{"krate":0,"index":13877},{"krate":0,"index":13875},{"krate":0,"index":13869},{"krate":0,"index":13867},{"krate":0,"index":13864},{"krate":0,"index":13930},{"krate":0,"index":13942},{"krate":0,"index":13944},{"krate":0,"index":13946},{"krate":0,"index":13948},{"krate":0,"index":13950},{"krate":0,"index":13964},{"krate":0,"index":13967},{"krate":0,"index":13969},{"krate":0,"index":13972},{"krate":0,"index":13974},{"krate":0,"index":13977},{"krate":0,"index":13979},{"krate":0,"index":13982},{"krate":0,"index":13984},{"krate":0,"index":13987},{"krate":0,"index":13990},{"krate":0,"index":840},{"krate":0,"index":14028},{"krate":0,"index":14100},{"krate":0,"index":14099},{"krate":0,"index":14097},{"krate":0,"index":14095},{"krate":0,"index":14092},{"krate":0,"index":14090},{"krate":0,"index":14088},{"krate":0,"index":14086},{"krate":0,"index":14080},{"krate":0,"index":14037},{"krate":0,"index":14102},{"krate":0,"index":14147},{"krate":0,"index":14146},{"krate":0,"index":14144},{"krate":0,"index":14142},{"krate":0,"index":14139},{"krate":0,"index":14136},{"krate":0,"index":14130},{"krate":0,"index":14124},{"krate":0,"index":14105},{"krate":0,"index":843},{"krate":0,"index":845},{"krate":0,"index":14149},{"krate":0,"index":14194},{"krate":0,"index":14193},{"krate":0,"index":14191},{"krate":0,"index":14189},{"krate":0,"index":14186},{"krate":0,"index":14183},{"krate":0,"index":14177},{"krate":0,"index":14171},{"krate":0,"index":14152},{"krate":0,"index":847},{"krate":0,"index":852},{"krate":0,"index":14196},{"krate":0,"index":14279},{"krate":0,"index":14277},{"krate":0,"index":14275},{"krate":0,"index":14272},{"krate":0,"index":14269},{"krate":0,"index":14263},{"krate":0,"index":14206},{"krate":0,"index":857},{"krate":0,"index":14281},{"krate":0,"index":14374},{"krate":0,"index":14372},{"krate":0,"index":14370},{"krate":0,"index":14367},{"krate":0,"index":14365},{"krate":0,"index":14363},{"krate":0,"index":14357},{"krate":0,"index":14302},{"krate":0,"index":14375},{"krate":0,"index":14437},{"krate":0,"index":14396},{"krate":0,"index":14395},{"krate":0,"index":14392},{"krate":0,"index":14390},{"krate":0,"index":14388},{"krate":0,"index":14382},{"krate":0,"index":14380},{"krate":0,"index":14377},{"krate":0,"index":14443},{"krate":0,"index":14460},{"krate":0,"index":14462},{"krate":0,"index":14464},{"krate":0,"index":14466},{"krate":0,"index":14468},{"krate":0,"index":14487},{"krate":0,"index":14490},{"krate":0,"index":14492},{"krate":0,"index":14495},{"krate":0,"index":14497},{"krate":0,"index":14500},{"krate":0,"index":14502},{"krate":0,"index":14505},{"krate":0,"index":14507},{"krate":0,"index":14510},{"krate":0,"index":14513},{"krate":0,"index":859},{"krate":0,"index":14566},{"krate":0,"index":14632},{"krate":0,"index":14631},{"krate":0,"index":14629},{"krate":0,"index":14626},{"krate":0,"index":14623},{"krate":0,"index":14621},{"krate":0,"index":14615},{"krate":0,"index":14570},{"krate":0,"index":14634},{"krate":0,"index":14699},{"krate":0,"index":14697},{"krate":0,"index":14694},{"krate":0,"index":14691},{"krate":0,"index":14689},{"krate":0,"index":14683},{"krate":0,"index":14638},{"krate":0,"index":14701},{"krate":0,"index":14766},{"krate":0,"index":14764},{"krate":0,"index":14761},{"krate":0,"index":14758},{"krate":0,"index":14756},{"krate":0,"index":14750},{"krate":0,"index":14705},{"krate":0,"index":14768},{"krate":0,"index":14840},{"krate":0,"index":14839},{"krate":0,"index":14837},{"krate":0,"index":14834},{"krate":0,"index":14832},{"krate":0,"index":14829},{"krate":0,"index":14823},{"krate":0,"index":14774},{"krate":0,"index":14842},{"krate":0,"index":14910},{"krate":0,"index":14908},{"krate":0,"index":14905},{"krate":0,"index":14903},{"krate":0,"index":14900},{"krate":0,"index":14894},{"krate":0,"index":14847}],"decl_id":null,"docs":" Image related structures.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148159,"byte_end":148163,"line_start":13,"line_end":13,"column_start":10,"column_end":14},"name":"Size","qualname":"::image::Size","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Dimension size.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148208,"byte_end":148218,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"NumSamples","qualname":"::image::NumSamples","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Number of MSAA samples.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148251,"byte_end":148256,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"name":"Layer","qualname":"::image::Layer","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" Image layer.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":813},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148297,"byte_end":148302,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"name":"Level","qualname":"::image::Level","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Image mipmap level.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148368,"byte_end":148377,"line_start":21,"line_end":21,"column_start":11,"column_end":20},"name":"MAX_LEVEL","qualname":"::image::MAX_LEVEL","value":"Level","parent":null,"children":[],"decl_id":null,"docs":" Maximum accessible mipmap level of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12969},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148600,"byte_end":148606,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"Extent","qualname":"::image::Extent","value":"Extent { width, height, depth }","parent":null,"children":[{"krate":0,"index":12970},{"krate":0,"index":12971},{"krate":0,"index":12972}],"decl_id":null,"docs":" Describes the size of an image, which may be up to three dimensional.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":12970},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148637,"byte_end":148642,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"width","qualname":"::image::Extent::width","value":"u32","parent":{"krate":0,"index":12969},"children":[],"decl_id":null,"docs":" Image width\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":12971},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148679,"byte_end":148685,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"name":"height","qualname":"::image::Extent::height","value":"u32","parent":{"krate":0,"index":12969},"children":[],"decl_id":null,"docs":" Image height\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":12972},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148722,"byte_end":148727,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"name":"depth","qualname":"::image::Extent::depth","value":"u32","parent":{"krate":0,"index":12969},"children":[],"decl_id":null,"docs":" Image depth.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148817,"byte_end":148825,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Extent>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if one of the dimensions is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148976,"byte_end":148984,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"at_level","qualname":"<Extent>::at_level","value":"fn (&self, level: Level) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get the extent at a particular mipmap level.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":149256,"byte_end":149260,"line_start":49,"line_end":49,"column_start":12,"column_end":16},"name":"rect","qualname":"<Extent>::rect","value":"fn (&self) -> Rect","parent":null,"children":[],"decl_id":null,"docs":" Get a rectangle for the full area of extent.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13039},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":149546,"byte_end":149552,"line_start":62,"line_end":62,"column_start":12,"column_end":18},"name":"Offset","qualname":"::image::Offset","value":"Offset { x, y, z }","parent":null,"children":[{"krate":0,"index":13040},{"krate":0,"index":13041},{"krate":0,"index":13042}],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":13040},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":149571,"byte_end":149572,"line_start":64,"line_end":64,"column_start":9,"column_end":10},"name":"x","qualname":"::image::Offset::x","value":"i32","parent":{"krate":0,"index":13039},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":13041},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":149595,"byte_end":149596,"line_start":66,"line_end":66,"column_start":9,"column_end":10},"name":"y","qualname":"::image::Offset::y","value":"i32","parent":{"krate":0,"index":13039},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":13042},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":149619,"byte_end":149620,"line_start":68,"line_end":68,"column_start":9,"column_end":10},"name":"z","qualname":"::image::Offset::z","value":"i32","parent":{"krate":0,"index":13039},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":149688,"byte_end":149692,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::image::Offset::ZERO","value":"Self","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Zero offset shortcut.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":149807,"byte_end":149818,"line_start":76,"line_end":76,"column_start":12,"column_end":23},"name":"into_bounds","qualname":"<Offset>::into_bounds","value":"fn (self, extent: &Extent) -> Range<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Convert the offset into 2-sided bounds given the extent.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13108},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":150324,"byte_end":150331,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"Optimal","qualname":"::image::Tiling::Optimal","value":"Tiling::Optimal","parent":{"krate":0,"index":13107},"children":[],"decl_id":null,"docs":" Optimal tiling for GPU memory access. Implementation-dependent.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13110},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":150461,"byte_end":150467,"line_start":95,"line_end":95,"column_start":5,"column_end":11},"name":"Linear","qualname":"::image::Tiling::Linear","value":"Tiling::Linear","parent":{"krate":0,"index":13107},"children":[],"decl_id":null,"docs":" Optimal for CPU read/write. Texels are laid out in row-major order,\n possibly with some padding on each row.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":13107},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":150239,"byte_end":150245,"line_start":90,"line_end":90,"column_start":10,"column_end":16},"name":"Tiling","qualname":"::image::Tiling","value":"Tiling::{Optimal, Linear}","parent":null,"children":[{"krate":0,"index":13108},{"krate":0,"index":13110}],"decl_id":null,"docs":" Image tiling modes.\n","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":150086,"byte_end":150098,"line_start":87,"line_end":87,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13174},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":150667,"byte_end":150678,"line_start":103,"line_end":103,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::image::CreationError::OutOfMemory","value":"CreationError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":13173},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":150635,"byte_end":150662,"line_start":102,"line_end":102,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13177},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":150835,"byte_end":150841,"line_start":106,"line_end":106,"column_start":5,"column_end":11},"name":"Format","qualname":"::image::CreationError::Format","value":"CreationError::Format(format::Format)","parent":{"krate":0,"index":13173},"children":[],"decl_id":null,"docs":" The format is not supported by the device.\n","sig":null,"attributes":[{"value":"fail(display = \"Failed to map a given format ({:?}) to the device\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":150756,"byte_end":150830,"line_start":105,"line_end":105,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13180},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":150993,"byte_end":150997,"line_start":109,"line_end":109,"column_start":5,"column_end":9},"name":"Kind","qualname":"::image::CreationError::Kind","value":"CreationError::Kind","parent":{"krate":0,"index":13173},"children":[],"decl_id":null,"docs":" The kind doesn't support a particular operation.\n","sig":null,"attributes":[{"value":"fail(display = \"The kind doesn't support a particular operation\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":150920,"byte_end":150988,"line_start":108,"line_end":108,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13182},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":151176,"byte_end":151183,"line_start":115,"line_end":115,"column_start":5,"column_end":12},"name":"Samples","qualname":"::image::CreationError::Samples","value":"CreationError::Samples(NumSamples)","parent":{"krate":0,"index":13173},"children":[],"decl_id":null,"docs":" Failed to map a given multisampled kind to the device.\n","sig":null,"attributes":[{"value":"fail(display = \"Failed to map a given multisampled kind ({}) to the device\",\n       _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":151066,"byte_end":151171,"line_start":111,"line_end":114,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13185},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":151328,"byte_end":151332,"line_start":118,"line_end":118,"column_start":5,"column_end":9},"name":"Size","qualname":"::image::CreationError::Size","value":"CreationError::Size(Size)","parent":{"krate":0,"index":13173},"children":[],"decl_id":null,"docs":" Unsupported size in one of the dimensions.\n","sig":null,"attributes":[{"value":"fail(display = \"Unsupported size ({}) in one of the dimensions\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":151252,"byte_end":151323,"line_start":117,"line_end":117,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13188},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":151537,"byte_end":151541,"line_start":124,"line_end":124,"column_start":5,"column_end":9},"name":"Data","qualname":"::image::CreationError::Data","value":"CreationError::Data(usize)","parent":{"krate":0,"index":13173},"children":[],"decl_id":null,"docs":" The given data has a different size than the target image slice.\n","sig":null,"attributes":[{"value":"fail(display =\n       \"The given data has a different size ({}) than the target image slice\",\n       _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":151417,"byte_end":151532,"line_start":120,"line_end":123,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13191},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":151726,"byte_end":151731,"line_start":130,"line_end":130,"column_start":5,"column_end":10},"name":"Usage","qualname":"::image::CreationError::Usage","value":"CreationError::Usage(Usage)","parent":{"krate":0,"index":13173},"children":[],"decl_id":null,"docs":" The mentioned usage mode is not supported\n","sig":null,"attributes":[{"value":"fail(display =\n       \"The expected image usage mode ({:?}) is not supported by a graphic API\",\n       _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":151604,"byte_end":151721,"line_start":126,"line_end":129,"column_start":5,"column_end":7}}]},{"kind":"Enum","id":{"krate":0,"index":13173},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":150570,"byte_end":150583,"line_start":100,"line_end":100,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::image::CreationError","value":"CreationError::{OutOfMemory, Format, Kind, Samples, Size, Data, Usage}","parent":null,"children":[{"krate":0,"index":13174},{"krate":0,"index":13177},{"krate":0,"index":13180},{"krate":0,"index":13182},{"krate":0,"index":13185},{"krate":0,"index":13188},{"krate":0,"index":13191}],"decl_id":null,"docs":" Pure image object creation error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13213},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152171,"byte_end":152176,"line_start":147,"line_end":147,"column_start":5,"column_end":10},"name":"Usage","qualname":"::image::ViewError::Usage","value":"ViewError::Usage(Usage)","parent":{"krate":0,"index":13212},"children":[],"decl_id":null,"docs":" The required usage flag is not present in the image.\n","sig":null,"attributes":[{"value":"fail(display = \"The required usage flag ({:?}) is not present in the image\",\n       _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152061,"byte_end":152166,"line_start":143,"line_end":146,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13216},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152299,"byte_end":152304,"line_start":150,"line_end":150,"column_start":5,"column_end":10},"name":"Level","qualname":"::image::ViewError::Level","value":"ViewError::Level(Level)","parent":{"krate":0,"index":13212},"children":[],"decl_id":null,"docs":" Selected mip levels doesn't exist.\n","sig":null,"attributes":[{"value":"fail(display = \"Selected mip level ({}) doesn't exist\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152232,"byte_end":152294,"line_start":149,"line_end":149,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13219},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152428,"byte_end":152433,"line_start":153,"line_end":153,"column_start":5,"column_end":10},"name":"Layer","qualname":"::image::ViewError::Layer","value":"ViewError::Layer(LayerError)","parent":{"krate":0,"index":13212},"children":[],"decl_id":null,"docs":" Selected array layer doesn't exist.\n","sig":null,"attributes":[{"value":"fail(display = \"Selected mip layer ({}) doesn't exist\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152361,"byte_end":152423,"line_start":152,"line_end":152,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13222},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152618,"byte_end":152627,"line_start":159,"line_end":159,"column_start":5,"column_end":14},"name":"BadFormat","qualname":"::image::ViewError::BadFormat","value":"ViewError::BadFormat(format::Format)","parent":{"krate":0,"index":13212},"children":[],"decl_id":null,"docs":" An incompatible format was requested for the view.\n","sig":null,"attributes":[{"value":"fail(display = \"An incompatible format ({:?}) was requested for the view\",\n       _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152510,"byte_end":152613,"line_start":155,"line_end":158,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13225},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152764,"byte_end":152771,"line_start":162,"line_end":162,"column_start":5,"column_end":12},"name":"BadKind","qualname":"::image::ViewError::BadKind","value":"ViewError::BadKind(ViewKind)","parent":{"krate":0,"index":13212},"children":[],"decl_id":null,"docs":" Unsupported view kind.\n","sig":null,"attributes":[{"value":"fail(display = \"An incompatible kind ({:?}) was requested for the view\",\n       _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152680,"byte_end":152759,"line_start":161,"line_end":161,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13228},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152863,"byte_end":152874,"line_start":165,"line_end":165,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::image::ViewError::OutOfMemory","value":"ViewError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":13212},"children":[],"decl_id":null,"docs":" Out of either Host or Device memory\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152831,"byte_end":152858,"line_start":164,"line_end":164,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13231},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":153007,"byte_end":153018,"line_start":168,"line_end":168,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ViewError::Unsupported","value":"ViewError::Unsupported","parent":{"krate":0,"index":13212},"children":[],"decl_id":null,"docs":" The backend refused for some reason.\n","sig":null,"attributes":[{"value":"fail(display = \"The backend refused for some reason\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":152946,"byte_end":153002,"line_start":167,"line_end":167,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":13212},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":151984,"byte_end":151993,"line_start":141,"line_end":141,"column_start":10,"column_end":19},"name":"ViewError","qualname":"::image::ViewError","value":"ViewError::{Usage, Level, Layer, BadFormat, BadKind, OutOfMemory, Unsupported}","parent":null,"children":[{"krate":0,"index":13213},{"krate":0,"index":13216},{"krate":0,"index":13219},{"krate":0,"index":13222},{"krate":0,"index":13225},{"krate":0,"index":13228},{"krate":0,"index":13231}],"decl_id":null,"docs":" Error creating an `ImageView`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13251},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":153464,"byte_end":153475,"line_start":185,"line_end":185,"column_start":5,"column_end":16},"name":"NotExpected","qualname":"::image::LayerError::NotExpected","value":"LayerError::NotExpected(Kind)","parent":{"krate":0,"index":13250},"children":[],"decl_id":null,"docs":" The source image kind doesn't support array slices.\n","sig":null,"attributes":[{"value":"fail(display = \"The source image kind ({:?}) doesn't support array slices\",\n       _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":153355,"byte_end":153459,"line_start":181,"line_end":184,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":13254},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":153652,"byte_end":153663,"line_start":191,"line_end":191,"column_start":5,"column_end":16},"name":"OutOfBounds","qualname":"::image::LayerError::OutOfBounds","value":"LayerError::OutOfBounds(Range<Layer>)","parent":{"krate":0,"index":13250},"children":[],"decl_id":null,"docs":" Selected layer is outside of the provided range.\n","sig":null,"attributes":[{"value":"fail(display = \"Selected layers ({:?}) are outside of the provided range\",\n       _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":153544,"byte_end":153647,"line_start":187,"line_end":190,"column_start":5,"column_end":7}}]},{"kind":"Enum","id":{"krate":0,"index":13250},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":153278,"byte_end":153288,"line_start":179,"line_end":179,"column_start":10,"column_end":20},"name":"LayerError","qualname":"::image::LayerError","value":"LayerError::{NotExpected, OutOfBounds}","parent":null,"children":[{"krate":0,"index":13251},{"krate":0,"index":13254}],"decl_id":null,"docs":" An error associated with selected image layer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13278},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":154152,"byte_end":154159,"line_start":203,"line_end":203,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::image::Filter::Nearest","value":"Filter::Nearest","parent":{"krate":0,"index":13277},"children":[],"decl_id":null,"docs":" Selects a single texel from the current mip level and uses its value.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13280},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":154381,"byte_end":154387,"line_start":208,"line_end":208,"column_start":5,"column_end":11},"name":"Linear","qualname":"::image::Filter::Linear","value":"Filter::Linear","parent":{"krate":0,"index":13277},"children":[],"decl_id":null,"docs":" Selects multiple texels and calculates the value via multivariate interpolation.\n     * 1D: Linear interpolation\n     * 2D/Cube: Bilinear interpolation\n     * 3D: Trilinear interpolation\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":13277},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":153988,"byte_end":153994,"line_start":199,"line_end":199,"column_start":10,"column_end":16},"name":"Filter","qualname":"::image::Filter","value":"Filter::{Nearest, Linear}","parent":null,"children":[{"krate":0,"index":13278},{"krate":0,"index":13280}],"decl_id":null,"docs":" How to [filter](https://en.wikipedia.org/wiki/Texture_filtering) the\n image when sampling. They correspond to increasing levels of quality,\n but also cost.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13344},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":154644,"byte_end":154647,"line_start":216,"line_end":216,"column_start":5,"column_end":8},"name":"Off","qualname":"::image::Anisotropic::Off","value":"Anisotropic::Off","parent":{"krate":0,"index":13343},"children":[],"decl_id":null,"docs":" Disable anisotropic filtering.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13346},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":154723,"byte_end":154725,"line_start":218,"line_end":218,"column_start":5,"column_end":7},"name":"On","qualname":"::image::Anisotropic::On","value":"Anisotropic::On(u8)","parent":{"krate":0,"index":13343},"children":[],"decl_id":null,"docs":" Enable anisotropic filtering with the anisotropy clamp value.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":13343},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":154587,"byte_end":154598,"line_start":214,"line_end":214,"column_start":10,"column_end":21},"name":"Anisotropic","qualname":"::image::Anisotropic","value":"Anisotropic::{Off, On}","parent":null,"children":[{"krate":0,"index":13344},{"krate":0,"index":13346}],"decl_id":null,"docs":" Anisotropic filtering description for the sampler.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13416},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":154976,"byte_end":154980,"line_start":227,"line_end":227,"column_start":5,"column_end":9},"name":"PosX","qualname":"::image::CubeFace::PosX","value":"CubeFace::PosX","parent":{"krate":0,"index":13415},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13418},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":154986,"byte_end":154990,"line_start":228,"line_end":228,"column_start":5,"column_end":9},"name":"NegX","qualname":"::image::CubeFace::NegX","value":"CubeFace::NegX","parent":{"krate":0,"index":13415},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13420},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":154996,"byte_end":155000,"line_start":229,"line_end":229,"column_start":5,"column_end":9},"name":"PosY","qualname":"::image::CubeFace::PosY","value":"CubeFace::PosY","parent":{"krate":0,"index":13415},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13422},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":155006,"byte_end":155010,"line_start":230,"line_end":230,"column_start":5,"column_end":9},"name":"NegY","qualname":"::image::CubeFace::NegY","value":"CubeFace::NegY","parent":{"krate":0,"index":13415},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13424},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":155016,"byte_end":155020,"line_start":231,"line_end":231,"column_start":5,"column_end":9},"name":"PosZ","qualname":"::image::CubeFace::PosZ","value":"CubeFace::PosZ","parent":{"krate":0,"index":13415},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13426},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":155026,"byte_end":155030,"line_start":232,"line_end":232,"column_start":5,"column_end":9},"name":"NegZ","qualname":"::image::CubeFace::NegZ","value":"CubeFace::NegZ","parent":{"krate":0,"index":13415},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":13415},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":154961,"byte_end":154969,"line_start":226,"line_end":226,"column_start":10,"column_end":18},"name":"CubeFace","qualname":"::image::CubeFace","value":"CubeFace::{PosX, NegX, PosY, NegY, PosZ, NegZ}","parent":null,"children":[{"krate":0,"index":13416},{"krate":0,"index":13418},{"krate":0,"index":13420},{"krate":0,"index":13422},{"krate":0,"index":13424},{"krate":0,"index":13426}],"decl_id":null,"docs":" The face of a cube image to do an operation on.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":154786,"byte_end":154808,"line_start":222,"line_end":222,"column_start":1,"column_end":23}},{"value":"repr(u8)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":154940,"byte_end":154951,"line_start":225,"line_end":225,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":155119,"byte_end":155129,"line_start":236,"line_end":236,"column_start":11,"column_end":21},"name":"CUBE_FACES","qualname":"::image::CUBE_FACES","value":"[CubeFace; 6]","parent":null,"children":[],"decl_id":null,"docs":" A constant array of cube faces in the order they map to the hardware.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13498},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":155524,"byte_end":155526,"line_start":250,"line_end":250,"column_start":5,"column_end":7},"name":"D1","qualname":"::image::Kind::D1","value":"Kind::D1(Size, Layer)","parent":{"krate":0,"index":13497},"children":[],"decl_id":null,"docs":" A single one-dimensional row of texels.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13502},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":155576,"byte_end":155578,"line_start":252,"line_end":252,"column_start":5,"column_end":7},"name":"D2","qualname":"::image::Kind::D2","value":"Kind::D2(Size, Size, Layer, NumSamples)","parent":{"krate":0,"index":13497},"children":[],"decl_id":null,"docs":" Two-dimensional image.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13508},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":155641,"byte_end":155643,"line_start":254,"line_end":254,"column_start":5,"column_end":7},"name":"D3","qualname":"::image::Kind::D3","value":"Kind::D3(Size, Size, Size)","parent":{"krate":0,"index":13497},"children":[],"decl_id":null,"docs":" Volumetric image.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":13497},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":155465,"byte_end":155469,"line_start":248,"line_end":248,"column_start":10,"column_end":14},"name":"Kind","qualname":"::image::Kind","value":"Kind::{D1, D2, D3}","parent":null,"children":[{"krate":0,"index":13498},{"krate":0,"index":13502},{"krate":0,"index":13508}],"decl_id":null,"docs":" Specifies the kind of an image to be allocated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":155719,"byte_end":155725,"line_start":259,"line_end":259,"column_start":12,"column_end":18},"name":"extent","qualname":"<Kind>::extent","value":"fn (&self) -> Extent","parent":null,"children":[],"decl_id":null,"docs":" Get the image extent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":156264,"byte_end":156276,"line_start":280,"line_end":280,"column_start":12,"column_end":24},"name":"level_extent","qualname":"<Kind>::level_extent","value":"fn (&self, level: Level) -> Extent","parent":null,"children":[],"decl_id":null,"docs":" Get the extent of a particular mipmap level.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":156977,"byte_end":156987,"line_start":304,"line_end":304,"column_start":12,"column_end":22},"name":"num_levels","qualname":"<Kind>::num_levels","value":"fn (&self) -> Level","parent":null,"children":[],"decl_id":null,"docs":" Count the number of mipmap levels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":157560,"byte_end":157570,"line_start":322,"line_end":322,"column_start":12,"column_end":22},"name":"num_layers","qualname":"<Kind>::num_layers","value":"fn (&self) -> Layer","parent":null,"children":[],"decl_id":null,"docs":" Return the number of layers in an array type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":157782,"byte_end":157793,"line_start":330,"line_end":330,"column_start":12,"column_end":23},"name":"num_samples","qualname":"<Kind>::num_samples","value":"fn (&self) -> NumSamples","parent":null,"children":[],"decl_id":null,"docs":" Return the number of MSAA samples for the kind.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13636},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":158203,"byte_end":158205,"line_start":344,"line_end":344,"column_start":5,"column_end":7},"name":"D1","qualname":"::image::ViewKind::D1","value":"ViewKind::D1","parent":{"krate":0,"index":13635},"children":[],"decl_id":null,"docs":" A single one-dimensional row of texels.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13638},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":158406,"byte_end":158413,"line_start":348,"line_end":348,"column_start":5,"column_end":12},"name":"D1Array","qualname":"::image::ViewKind::D1Array","value":"ViewKind::D1Array","parent":{"krate":0,"index":13635},"children":[],"decl_id":null,"docs":" An array of rows of texels. Equivalent to `D2` except that texels\n in different rows are not sampled, so filtering will be constrained\n to a single row of texels at a time.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13640},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":158484,"byte_end":158486,"line_start":350,"line_end":350,"column_start":5,"column_end":7},"name":"D2","qualname":"::image::ViewKind::D2","value":"ViewKind::D2","parent":{"krate":0,"index":13635},"children":[],"decl_id":null,"docs":" A traditional 2D image, with rows arranged contiguously.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13642},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":158613,"byte_end":158620,"line_start":353,"line_end":353,"column_start":5,"column_end":12},"name":"D2Array","qualname":"::image::ViewKind::D2Array","value":"ViewKind::D2Array","parent":{"krate":0,"index":13635},"children":[],"decl_id":null,"docs":" An array of 2D images. Equivalent to `D3` except that texels in\n a different depth level are not sampled.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13644},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":158692,"byte_end":158694,"line_start":355,"line_end":355,"column_start":5,"column_end":7},"name":"D3","qualname":"::image::ViewKind::D3","value":"ViewKind::D3","parent":{"krate":0,"index":13635},"children":[],"decl_id":null,"docs":" A volume image, with each 2D layer arranged contiguously.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13646},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":158759,"byte_end":158763,"line_start":357,"line_end":357,"column_start":5,"column_end":9},"name":"Cube","qualname":"::image::ViewKind::Cube","value":"ViewKind::Cube","parent":{"krate":0,"index":13635},"children":[],"decl_id":null,"docs":" A set of 6 2D images, one for each face of a cube.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":13648},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":158802,"byte_end":158811,"line_start":359,"line_end":359,"column_start":5,"column_end":14},"name":"CubeArray","qualname":"::image::ViewKind::CubeArray","value":"ViewKind::CubeArray","parent":{"krate":0,"index":13635},"children":[],"decl_id":null,"docs":" An array of Cube images.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":13635},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":158140,"byte_end":158148,"line_start":342,"line_end":342,"column_start":10,"column_end":18},"name":"ViewKind","qualname":"::image::ViewKind","value":"ViewKind::{D1, D1Array, D2, D2Array, D3, Cube, CubeArray}","parent":null,"children":[{"krate":0,"index":13636},{"krate":0,"index":13638},{"krate":0,"index":13640},{"krate":0,"index":13642},{"krate":0,"index":13644},{"krate":0,"index":13646},{"krate":0,"index":13648}],"decl_id":null,"docs":" Specifies the kind of an image view.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13721},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":158961,"byte_end":158977,"line_start":365,"line_end":365,"column_start":16,"column_end":32},"name":"ViewCapabilities","qualname":"::image::ViewCapabilities","value":"ViewCapabilities {  }","parent":null,"children":[{"krate":0,"index":13722}],"decl_id":null,"docs":" Capabilities to create views into an image.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13805},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":159061,"byte_end":159075,"line_start":367,"line_end":367,"column_start":15,"column_end":29},"name":"MUTABLE_FORMAT","qualname":"::image::ViewCapabilities::MUTABLE_FORMAT","value":"ViewCapabilities","parent":{"krate":0,"index":13804},"children":[],"decl_id":null,"docs":" Support creation of views with different formats.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13806},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":159176,"byte_end":159185,"line_start":369,"line_end":369,"column_start":15,"column_end":24},"name":"KIND_CUBE","qualname":"::image::ViewCapabilities::KIND_CUBE","value":"ViewCapabilities","parent":{"krate":0,"index":13804},"children":[],"decl_id":null,"docs":" Support creation of `Cube` and `CubeArray` kinds of views.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13807},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":159276,"byte_end":159289,"line_start":371,"line_end":371,"column_start":15,"column_end":28},"name":"KIND_2D_ARRAY","qualname":"::image::ViewCapabilities::KIND_2D_ARRAY","value":"ViewCapabilities","parent":{"krate":0,"index":13804},"children":[],"decl_id":null,"docs":" Support creation of `D2Array` kind of view.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13862},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":159560,"byte_end":159565,"line_start":380,"line_end":380,"column_start":16,"column_end":21},"name":"Usage","qualname":"::image::Usage","value":"Usage {  }","parent":null,"children":[{"krate":0,"index":13863}],"decl_id":null,"docs":" TODO: Find out if TRANSIENT_ATTACHMENT + INPUT_ATTACHMENT\n are applicable on backends other than Vulkan. --AP\n Image usage flags\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13951},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":159639,"byte_end":159651,"line_start":382,"line_end":382,"column_start":15,"column_end":27},"name":"TRANSFER_SRC","qualname":"::image::Usage::TRANSFER_SRC","value":"Usage","parent":{"krate":0,"index":13950},"children":[],"decl_id":null,"docs":" The image is used as a transfer source.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13952},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":159730,"byte_end":159742,"line_start":384,"line_end":384,"column_start":15,"column_end":27},"name":"TRANSFER_DST","qualname":"::image::Usage::TRANSFER_DST","value":"Usage","parent":{"krate":0,"index":13950},"children":[],"decl_id":null,"docs":" The image is used as a transfer destination.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13953},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":159903,"byte_end":159910,"line_start":386,"line_end":386,"column_start":15,"column_end":22},"name":"SAMPLED","qualname":"::image::Usage::SAMPLED","value":"Usage","parent":{"krate":0,"index":13950},"children":[],"decl_id":null,"docs":" The image is a [sampled image](https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-sampledimage)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13954},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":160071,"byte_end":160078,"line_start":388,"line_end":388,"column_start":15,"column_end":22},"name":"STORAGE","qualname":"::image::Usage::STORAGE","value":"Usage","parent":{"krate":0,"index":13950},"children":[],"decl_id":null,"docs":" The image is a [storage image](https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-storageimage)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13955},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":160197,"byte_end":160213,"line_start":390,"line_end":390,"column_start":15,"column_end":31},"name":"COLOR_ATTACHMENT","qualname":"::image::Usage::COLOR_ATTACHMENT","value":"Usage","parent":{"krate":0,"index":13950},"children":[],"decl_id":null,"docs":" The image is used as a color attachment -- that is, color input to a rendering pass.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13956},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":160289,"byte_end":160313,"line_start":392,"line_end":392,"column_start":15,"column_end":39},"name":"DEPTH_STENCIL_ATTACHMENT","qualname":"::image::Usage::DEPTH_STENCIL_ATTACHMENT","value":"Usage","parent":{"krate":0,"index":13950},"children":[],"decl_id":null,"docs":" The image is used as a depth attachment.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13957},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":160348,"byte_end":160368,"line_start":394,"line_end":394,"column_start":15,"column_end":35},"name":"TRANSIENT_ATTACHMENT","qualname":"::image::Usage::TRANSIENT_ATTACHMENT","value":"Usage","parent":{"krate":0,"index":13950},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13958},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":160403,"byte_end":160419,"line_start":396,"line_end":396,"column_start":15,"column_end":31},"name":"INPUT_ATTACHMENT","qualname":"::image::Usage::INPUT_ATTACHMENT","value":"Usage","parent":{"krate":0,"index":13950},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":160534,"byte_end":160546,"line_start":403,"line_end":403,"column_start":12,"column_end":24},"name":"can_transfer","qualname":"<Usage>::can_transfer","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this image can be used in transfer operations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":160709,"byte_end":160719,"line_start":408,"line_end":408,"column_start":12,"column_end":22},"name":"can_target","qualname":"<Usage>::can_target","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this image can be used as a target.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14029},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":161222,"byte_end":161226,"line_start":420,"line_end":420,"column_start":5,"column_end":9},"name":"Tile","qualname":"::image::WrapMode::Tile","value":"WrapMode::Tile","parent":{"krate":0,"index":14028},"children":[],"decl_id":null,"docs":" Tile the image, that is, sample the coordinate modulo `1.0`, so\n addressing the image beyond an edge will \"wrap\" back from the\n other edge.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14031},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":161308,"byte_end":161314,"line_start":422,"line_end":422,"column_start":5,"column_end":11},"name":"Mirror","qualname":"::image::WrapMode::Mirror","value":"WrapMode::Mirror","parent":{"krate":0,"index":14028},"children":[],"decl_id":null,"docs":" Mirror the image. Like tile, but uses abs(coord) before the modulo.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14033},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":161389,"byte_end":161394,"line_start":424,"line_end":424,"column_start":5,"column_end":10},"name":"Clamp","qualname":"::image::WrapMode::Clamp","value":"WrapMode::Clamp","parent":{"krate":0,"index":14028},"children":[],"decl_id":null,"docs":" Clamp the image to the value at `0.0` or `1.0` respectively.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14035},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":161426,"byte_end":161432,"line_start":426,"line_end":426,"column_start":5,"column_end":11},"name":"Border","qualname":"::image::WrapMode::Border","value":"WrapMode::Border","parent":{"krate":0,"index":14028},"children":[],"decl_id":null,"docs":" Use border color.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":14028},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":161045,"byte_end":161053,"line_start":416,"line_end":416,"column_start":10,"column_end":18},"name":"WrapMode","qualname":"::image::WrapMode","value":"WrapMode::{Tile, Mirror, Clamp, Border}","parent":null,"children":[{"krate":0,"index":14029},{"krate":0,"index":14031},{"krate":0,"index":14033},{"krate":0,"index":14035}],"decl_id":null,"docs":" Specifies how image coordinates outside the range `[0, 1]` are handled.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14102},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":161619,"byte_end":161622,"line_start":432,"line_end":432,"column_start":12,"column_end":15},"name":"Lod","qualname":"::image::Lod","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper for the LOD level of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14149},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":162022,"byte_end":162033,"line_start":449,"line_end":449,"column_start":12,"column_end":23},"name":"PackedColor","qualname":"::image::PackedColor","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper for an RGBA color with 8 bits per texel, encoded as a u32.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14196},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":162765,"byte_end":162776,"line_start":476,"line_end":476,"column_start":12,"column_end":23},"name":"SamplerInfo","qualname":"::image::SamplerInfo","value":"SamplerInfo { min_filter, mag_filter, mip_filter, wrap_mode, lod_bias, lod_range, comparison, border, anisotropic }","parent":null,"children":[{"krate":0,"index":14197},{"krate":0,"index":14198},{"krate":0,"index":14199},{"krate":0,"index":14200},{"krate":0,"index":14201},{"krate":0,"index":14202},{"krate":0,"index":14203},{"krate":0,"index":14204},{"krate":0,"index":14205}],"decl_id":null,"docs":" Specifies how to sample from an image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14197},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":162830,"byte_end":162840,"line_start":478,"line_end":478,"column_start":9,"column_end":19},"name":"min_filter","qualname":"::image::SamplerInfo::min_filter","value":"image::Filter","parent":{"krate":0,"index":14196},"children":[],"decl_id":null,"docs":" Minification filter method to use.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14198},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":162902,"byte_end":162912,"line_start":480,"line_end":480,"column_start":9,"column_end":19},"name":"mag_filter","qualname":"::image::SamplerInfo::mag_filter","value":"image::Filter","parent":{"krate":0,"index":14196},"children":[],"decl_id":null,"docs":" Magnification filter method to use.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14199},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":162964,"byte_end":162974,"line_start":482,"line_end":482,"column_start":9,"column_end":19},"name":"mip_filter","qualname":"::image::SamplerInfo::mip_filter","value":"image::Filter","parent":{"krate":0,"index":14196},"children":[],"decl_id":null,"docs":" Mip filter method to use.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14200},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":163086,"byte_end":163095,"line_start":485,"line_end":485,"column_start":9,"column_end":18},"name":"wrap_mode","qualname":"::image::SamplerInfo::wrap_mode","value":"(image::WrapMode, image::WrapMode, image::WrapMode)","parent":{"krate":0,"index":14196},"children":[],"decl_id":null,"docs":" Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL\n speak).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14201},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":163321,"byte_end":163329,"line_start":489,"line_end":489,"column_start":9,"column_end":17},"name":"lod_bias","qualname":"::image::SamplerInfo::lod_bias","value":"image::Lod","parent":{"krate":0,"index":14196},"children":[],"decl_id":null,"docs":" This bias is added to every computed mipmap level (N + lod_bias). For\n example, if it would select mipmap level 2 and lod_bias is 1, it will\n use mipmap level 3.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14202},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":163409,"byte_end":163418,"line_start":491,"line_end":491,"column_start":9,"column_end":18},"name":"lod_range","qualname":"::image::SamplerInfo::lod_range","value":"std::ops::Range<image::Lod>","parent":{"krate":0,"index":14196},"children":[],"decl_id":null,"docs":" This range is used to clamp LOD level used for sampling.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14203},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":163496,"byte_end":163506,"line_start":493,"line_end":493,"column_start":9,"column_end":19},"name":"comparison","qualname":"::image::SamplerInfo::comparison","value":"std::option::Option<pso::output_merger::Comparison>","parent":{"krate":0,"index":14196},"children":[],"decl_id":null,"docs":" Comparison mode, used primary for a shadow map.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14204},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":163610,"byte_end":163616,"line_start":495,"line_end":495,"column_start":9,"column_end":15},"name":"border","qualname":"::image::SamplerInfo::border","value":"image::PackedColor","parent":{"krate":0,"index":14196},"children":[],"decl_id":null,"docs":" Border color is used when one of the wrap modes is set to border.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14205},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":163670,"byte_end":163681,"line_start":497,"line_end":497,"column_start":9,"column_end":20},"name":"anisotropic","qualname":"::image::SamplerInfo::anisotropic","value":"image::Anisotropic","parent":{"krate":0,"index":14196},"children":[],"decl_id":null,"docs":" Anisotropic filtering.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":163883,"byte_end":163886,"line_start":503,"line_end":503,"column_start":12,"column_end":15},"name":"new","qualname":"<SamplerInfo>::new","value":"fn (filter: Filter, wrap: WrapMode) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new sampler description with a given filter method for all filtering operations\n and a wrapping mode, using no LOD modifications.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14282},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":164988,"byte_end":164995,"line_start":530,"line_end":530,"column_start":5,"column_end":12},"name":"General","qualname":"::image::Layout::General","value":"Layout::General","parent":{"krate":0,"index":14281},"children":[],"decl_id":null,"docs":" General purpose, no restrictions on usage.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14284},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":165067,"byte_end":165089,"line_start":532,"line_end":532,"column_start":5,"column_end":27},"name":"ColorAttachmentOptimal","qualname":"::image::Layout::ColorAttachmentOptimal","value":"Layout::ColorAttachmentOptimal","parent":{"krate":0,"index":14281},"children":[],"decl_id":null,"docs":" Must only be used as a color attachment in a framebuffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14286},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":165161,"byte_end":165190,"line_start":534,"line_end":534,"column_start":5,"column_end":34},"name":"DepthStencilAttachmentOptimal","qualname":"::image::Layout::DepthStencilAttachmentOptimal","value":"Layout::DepthStencilAttachmentOptimal","parent":{"krate":0,"index":14281},"children":[],"decl_id":null,"docs":" Must only be used as a depth attachment in a framebuffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14288},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":165325,"byte_end":165352,"line_start":537,"line_end":537,"column_start":5,"column_end":32},"name":"DepthStencilReadOnlyOptimal","qualname":"::image::Layout::DepthStencilReadOnlyOptimal","value":"Layout::DepthStencilReadOnlyOptimal","parent":{"krate":0,"index":14281},"children":[],"decl_id":null,"docs":" Must only be used as a depth attachment in a framebuffer,\n or as a read-only depth or stencil buffer in a shader.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14290},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":165418,"byte_end":165439,"line_start":539,"line_end":539,"column_start":5,"column_end":26},"name":"ShaderReadOnlyOptimal","qualname":"::image::Layout::ShaderReadOnlyOptimal","value":"Layout::ShaderReadOnlyOptimal","parent":{"krate":0,"index":14281},"children":[],"decl_id":null,"docs":" Must only be used as a read-only image in a shader.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14292},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":165509,"byte_end":165527,"line_start":541,"line_end":541,"column_start":5,"column_end":23},"name":"TransferSrcOptimal","qualname":"::image::Layout::TransferSrcOptimal","value":"Layout::TransferSrcOptimal","parent":{"krate":0,"index":14281},"children":[],"decl_id":null,"docs":" Must only be used as the source for a transfer command.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14294},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":165602,"byte_end":165620,"line_start":543,"line_end":543,"column_start":5,"column_end":23},"name":"TransferDstOptimal","qualname":"::image::Layout::TransferDstOptimal","value":"Layout::TransferDstOptimal","parent":{"krate":0,"index":14281},"children":[],"decl_id":null,"docs":" Must only be used as the destination for a transfer command.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14296},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":165884,"byte_end":165893,"line_start":548,"line_end":548,"column_start":5,"column_end":14},"name":"Undefined","qualname":"::image::Layout::Undefined","value":"Layout::Undefined","parent":{"krate":0,"index":14281},"children":[],"decl_id":null,"docs":" No layout, does not support device access.  Only valid as a\n source layout when transforming data to a specific destination\n layout or initializing data.  Does NOT guarentee that the contents\n of the source buffer are preserved.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14298},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":166041,"byte_end":166055,"line_start":551,"line_end":551,"column_start":5,"column_end":19},"name":"Preinitialized","qualname":"::image::Layout::Preinitialized","value":"Layout::Preinitialized","parent":{"krate":0,"index":14281},"children":[],"decl_id":null,"docs":" Like `Undefined`, but does guarentee that the contents of the source\n buffer are preserved.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":14300},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":166137,"byte_end":166144,"line_start":553,"line_end":553,"column_start":5,"column_end":12},"name":"Present","qualname":"::image::Layout::Present","value":"Layout::Present","parent":{"krate":0,"index":14281},"children":[],"decl_id":null,"docs":" The layout that an image must be in to be presented to the display.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":14281},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":164924,"byte_end":164930,"line_start":528,"line_end":528,"column_start":10,"column_end":16},"name":"Layout","qualname":"::image::Layout","value":"Layout::{General, ColorAttachmentOptimal, DepthStencilAttachmentOptimal, DepthStencilReadOnlyOptimal, ShaderReadOnlyOptimal, TransferSrcOptimal, TransferDstOptimal, Undefined, Preinitialized, Present}","parent":null,"children":[{"krate":0,"index":14282},{"krate":0,"index":14284},{"krate":0,"index":14286},{"krate":0,"index":14288},{"krate":0,"index":14290},{"krate":0,"index":14292},{"krate":0,"index":14294},{"krate":0,"index":14296},{"krate":0,"index":14298},{"krate":0,"index":14300}],"decl_id":null,"docs":" Specifies options for how memory for an image is arranged.\n These are hints to the GPU driver and may or may not have actual\n performance effects, but describe constraints on how the data\n may be used that a program *must* obey. They do not specify\n how channel values or such are laid out in memory; the actual\n image data is considered opaque.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14375},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":166321,"byte_end":166327,"line_start":559,"line_end":559,"column_start":16,"column_end":22},"name":"Access","qualname":"::image::Access","value":"Access {  }","parent":null,"children":[{"krate":0,"index":14376}],"decl_id":null,"docs":" Bitflags to describe how memory in an image or buffer can be accessed.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14469},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":166427,"byte_end":166448,"line_start":561,"line_end":561,"column_start":15,"column_end":36},"name":"INPUT_ATTACHMENT_READ","qualname":"::image::Access::INPUT_ATTACHMENT_READ","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Read access to an input attachment from within a fragment shader.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14470},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":166573,"byte_end":166584,"line_start":563,"line_end":563,"column_start":15,"column_end":26},"name":"SHADER_READ","qualname":"::image::Access::SHADER_READ","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Read-only state for SRV access, or combine with `SHADER_WRITE` to have r/w access to UAV.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14471},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":166717,"byte_end":166729,"line_start":566,"line_end":566,"column_start":15,"column_end":27},"name":"SHADER_WRITE","qualname":"::image::Access::SHADER_WRITE","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Writeable state for UAV access.\n Combine with `SHADER_READ` to have r/w access to UAV.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14472},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":166831,"byte_end":166852,"line_start":568,"line_end":568,"column_start":15,"column_end":36},"name":"COLOR_ATTACHMENT_READ","qualname":"::image::Access::COLOR_ATTACHMENT_READ","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Read state but can only be combined with `COLOR_ATTACHMENT_WRITE`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14473},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":166954,"byte_end":166976,"line_start":570,"line_end":570,"column_start":15,"column_end":37},"name":"COLOR_ATTACHMENT_WRITE","qualname":"::image::Access::COLOR_ATTACHMENT_WRITE","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Write-only state but can be combined with `COLOR_ATTACHMENT_READ`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14474},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":167087,"byte_end":167116,"line_start":572,"line_end":572,"column_start":15,"column_end":44},"name":"DEPTH_STENCIL_ATTACHMENT_READ","qualname":"::image::Access::DEPTH_STENCIL_ATTACHMENT_READ","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Read access to a depth/stencil attachment in a depth or stencil operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14475},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":167228,"byte_end":167258,"line_start":574,"line_end":574,"column_start":15,"column_end":45},"name":"DEPTH_STENCIL_ATTACHMENT_WRITE","qualname":"::image::Access::DEPTH_STENCIL_ATTACHMENT_WRITE","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Write access to a depth/stencil attachment in a depth or stencil operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14476},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":167341,"byte_end":167354,"line_start":576,"line_end":576,"column_start":15,"column_end":28},"name":"TRANSFER_READ","qualname":"::image::Access::TRANSFER_READ","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Read access to the buffer in a copy operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14477},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":167438,"byte_end":167452,"line_start":578,"line_end":578,"column_start":15,"column_end":29},"name":"TRANSFER_WRITE","qualname":"::image::Access::TRANSFER_WRITE","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Write access to the buffer in a copy operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14478},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":167561,"byte_end":167570,"line_start":580,"line_end":580,"column_start":15,"column_end":24},"name":"HOST_READ","qualname":"::image::Access::HOST_READ","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Read access for raw memory to be accessed by the host system (ie, CPU).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14479},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":167670,"byte_end":167680,"line_start":582,"line_end":582,"column_start":15,"column_end":25},"name":"HOST_WRITE","qualname":"::image::Access::HOST_WRITE","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Write access for raw memory to be accessed by the host system.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14480},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":167898,"byte_end":167909,"line_start":586,"line_end":586,"column_start":15,"column_end":26},"name":"MEMORY_READ","qualname":"::image::Access::MEMORY_READ","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Read access for memory to be accessed by a non-specific entity.  This may\n be the host system, or it may be something undefined or specified by an\n extension.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14481},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":168011,"byte_end":168023,"line_start":588,"line_end":588,"column_start":15,"column_end":27},"name":"MEMORY_WRITE","qualname":"::image::Access::MEMORY_WRITE","value":"Access","parent":{"krate":0,"index":14468},"children":[],"decl_id":null,"docs":" Write access for memory to be accessed by a non-specific entity.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":859},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":168120,"byte_end":168125,"line_start":593,"line_end":593,"column_start":10,"column_end":15},"name":"State","qualname":"::image::State","value":"(Access, Layout)","parent":null,"children":[],"decl_id":null,"docs":" Image state, combining access methods and the image's layout.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14566},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":168324,"byte_end":168335,"line_start":598,"line_end":598,"column_start":12,"column_end":23},"name":"Subresource","qualname":"::image::Subresource","value":"Subresource { aspects, level, layer }","parent":null,"children":[{"krate":0,"index":14567},{"krate":0,"index":14568},{"krate":0,"index":14569}],"decl_id":null,"docs":" Selector of a concrete subresource in an image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14567},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":168392,"byte_end":168399,"line_start":600,"line_end":600,"column_start":9,"column_end":16},"name":"aspects","qualname":"::image::Subresource::aspects","value":"format::Aspects","parent":{"krate":0,"index":14566},"children":[],"decl_id":null,"docs":" Included aspects: color/depth/stencil\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14568},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":168456,"byte_end":168461,"line_start":602,"line_end":602,"column_start":9,"column_end":14},"name":"level","qualname":"::image::Subresource::level","value":"u8","parent":{"krate":0,"index":14566},"children":[],"decl_id":null,"docs":" Selected mipmap level\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14569},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":168507,"byte_end":168512,"line_start":604,"line_end":604,"column_start":9,"column_end":14},"name":"layer","qualname":"::image::Subresource::layer","value":"u16","parent":{"krate":0,"index":14566},"children":[],"decl_id":null,"docs":" Selected array level\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14634},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":168710,"byte_end":168727,"line_start":610,"line_end":610,"column_start":12,"column_end":29},"name":"SubresourceLayers","qualname":"::image::SubresourceLayers","value":"SubresourceLayers { aspects, level, layers }","parent":null,"children":[{"krate":0,"index":14635},{"krate":0,"index":14636},{"krate":0,"index":14637}],"decl_id":null,"docs":" A subset of resource layers contained within an image's level.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14635},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":168784,"byte_end":168791,"line_start":612,"line_end":612,"column_start":9,"column_end":16},"name":"aspects","qualname":"::image::SubresourceLayers::aspects","value":"format::Aspects","parent":{"krate":0,"index":14634},"children":[],"decl_id":null,"docs":" Included aspects: color/depth/stencil\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14636},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":168848,"byte_end":168853,"line_start":614,"line_end":614,"column_start":9,"column_end":14},"name":"level","qualname":"::image::SubresourceLayers::level","value":"u8","parent":{"krate":0,"index":14634},"children":[],"decl_id":null,"docs":" Selected mipmap level\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14637},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":168900,"byte_end":168906,"line_start":616,"line_end":616,"column_start":9,"column_end":15},"name":"layers","qualname":"::image::SubresourceLayers::layers","value":"std::ops::Range<u16>","parent":{"krate":0,"index":14634},"children":[],"decl_id":null,"docs":" Included array levels\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14701},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":169097,"byte_end":169113,"line_start":622,"line_end":622,"column_start":12,"column_end":28},"name":"SubresourceRange","qualname":"::image::SubresourceRange","value":"SubresourceRange { aspects, levels, layers }","parent":null,"children":[{"krate":0,"index":14702},{"krate":0,"index":14703},{"krate":0,"index":14704}],"decl_id":null,"docs":" A subset of resources contained within an image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14702},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":169170,"byte_end":169177,"line_start":624,"line_end":624,"column_start":9,"column_end":16},"name":"aspects","qualname":"::image::SubresourceRange::aspects","value":"format::Aspects","parent":{"krate":0,"index":14701},"children":[],"decl_id":null,"docs":" Included aspects: color/depth/stencil\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14703},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":169235,"byte_end":169241,"line_start":626,"line_end":626,"column_start":9,"column_end":15},"name":"levels","qualname":"::image::SubresourceRange::levels","value":"std::ops::Range<u8>","parent":{"krate":0,"index":14701},"children":[],"decl_id":null,"docs":" Included mipmap levels\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14704},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":169295,"byte_end":169301,"line_start":628,"line_end":628,"column_start":9,"column_end":15},"name":"layers","qualname":"::image::SubresourceRange::layers","value":"std::ops::Range<u16>","parent":{"krate":0,"index":14701},"children":[],"decl_id":null,"docs":" Included array levels\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14768},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":169474,"byte_end":169490,"line_start":634,"line_end":634,"column_start":12,"column_end":28},"name":"FormatProperties","qualname":"::image::FormatProperties","value":"FormatProperties { max_extent, max_levels, max_layers, sample_count_mask, max_resource_size }","parent":null,"children":[{"krate":0,"index":14769},{"krate":0,"index":14770},{"krate":0,"index":14771},{"krate":0,"index":14772},{"krate":0,"index":14773}],"decl_id":null,"docs":" Image format properties.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14769},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":169525,"byte_end":169535,"line_start":636,"line_end":636,"column_start":9,"column_end":19},"name":"max_extent","qualname":"::image::FormatProperties::max_extent","value":"image::Extent","parent":{"krate":0,"index":14768},"children":[],"decl_id":null,"docs":" Maximum extent.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14770},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":169590,"byte_end":169600,"line_start":638,"line_end":638,"column_start":9,"column_end":19},"name":"max_levels","qualname":"::image::FormatProperties::max_levels","value":"u8","parent":{"krate":0,"index":14768},"children":[],"decl_id":null,"docs":" Max number of mipmap levels.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14771},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":169653,"byte_end":169663,"line_start":640,"line_end":640,"column_start":9,"column_end":19},"name":"max_layers","qualname":"::image::FormatProperties::max_layers","value":"u16","parent":{"krate":0,"index":14768},"children":[],"decl_id":null,"docs":" Max number of array layers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14772},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":169725,"byte_end":169742,"line_start":642,"line_end":642,"column_start":9,"column_end":26},"name":"sample_count_mask","qualname":"::image::FormatProperties::sample_count_mask","value":"u8","parent":{"krate":0,"index":14768},"children":[],"decl_id":null,"docs":" Bit mask of supported sample counts.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14773},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":169811,"byte_end":169828,"line_start":644,"line_end":644,"column_start":9,"column_end":26},"name":"max_resource_size","qualname":"::image::FormatProperties::max_resource_size","value":"usize","parent":{"krate":0,"index":14768},"children":[],"decl_id":null,"docs":" Maximum size of the resource in bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14842},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":170001,"byte_end":170021,"line_start":650,"line_end":650,"column_start":12,"column_end":32},"name":"SubresourceFootprint","qualname":"::image::SubresourceFootprint","value":"SubresourceFootprint { slice, row_pitch, array_pitch, depth_pitch }","parent":null,"children":[{"krate":0,"index":14843},{"krate":0,"index":14844},{"krate":0,"index":14845},{"krate":0,"index":14846}],"decl_id":null,"docs":" Footprint of a subresource in memory.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14843},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":170080,"byte_end":170085,"line_start":652,"line_end":652,"column_start":9,"column_end":14},"name":"slice","qualname":"::image::SubresourceFootprint::slice","value":"std::ops::Range<u64>","parent":{"krate":0,"index":14842},"children":[],"decl_id":null,"docs":" Byte slice occupied by the subresource.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14844},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":170149,"byte_end":170158,"line_start":654,"line_end":654,"column_start":9,"column_end":18},"name":"row_pitch","qualname":"::image::SubresourceFootprint::row_pitch","value":"u64","parent":{"krate":0,"index":14842},"children":[],"decl_id":null,"docs":" Byte distance between rows.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14845},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":170223,"byte_end":170234,"line_start":656,"line_end":656,"column_start":9,"column_end":20},"name":"array_pitch","qualname":"::image::SubresourceFootprint::array_pitch","value":"u64","parent":{"krate":0,"index":14842},"children":[],"decl_id":null,"docs":" Byte distance between array layers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":14846},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":170299,"byte_end":170310,"line_start":658,"line_end":658,"column_start":9,"column_end":20},"name":"depth_pitch","qualname":"::image::SubresourceFootprint::depth_pitch","value":"u64","parent":{"krate":0,"index":14842},"children":[],"decl_id":null,"docs":" Byte distance between depth slices.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":860},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mapping","qualname":"::mapping","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":14912},{"krate":0,"index":14938},{"krate":0,"index":14937},{"krate":0,"index":14935},{"krate":0,"index":14933},{"krate":0,"index":14930},{"krate":0,"index":14922},{"krate":0,"index":14927},{"krate":0,"index":866},{"krate":0,"index":14940},{"krate":0,"index":14947},{"krate":0,"index":868},{"krate":0,"index":873},{"krate":0,"index":14952},{"krate":0,"index":14960},{"krate":0,"index":879},{"krate":0,"index":884},{"krate":0,"index":890}],"decl_id":null,"docs":" Memory mapping\n","sig":null,"attributes":[{"value":"deny(missing_docs, missing_copy_implementations)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":170326,"byte_end":170378,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":14913},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":170656,"byte_end":170667,"line_start":14,"line_end":14,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::mapping::Error::OutOfMemory","value":"Error::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":14912},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":170624,"byte_end":170651,"line_start":13,"line_end":13,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":14916},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":170852,"byte_end":170865,"line_start":17,"line_end":17,"column_start":5,"column_end":18},"name":"InvalidAccess","qualname":"::mapping::Error::InvalidAccess","value":"Error::InvalidAccess","parent":{"krate":0,"index":14912},"children":[],"decl_id":null,"docs":" The requested mapping access did not match the expected usage.\n","sig":null,"attributes":[{"value":"fail(display =\n       \"The requested mapping access did not match the expected usage\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":170765,"byte_end":170847,"line_start":16,"line_end":16,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":14918},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":171015,"byte_end":171026,"line_start":20,"line_end":20,"column_start":5,"column_end":16},"name":"OutOfBounds","qualname":"::mapping::Error::OutOfBounds","value":"Error::OutOfBounds","parent":{"krate":0,"index":14912},"children":[],"decl_id":null,"docs":" The requested mapping range is outside of the resource.\n","sig":null,"attributes":[{"value":"fail(display = \"The requested mapping range is outside of the resource\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":170935,"byte_end":171010,"line_start":19,"line_end":19,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":14920},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":171162,"byte_end":171175,"line_start":23,"line_end":23,"column_start":5,"column_end":18},"name":"MappingFailed","qualname":"::mapping::Error::MappingFailed","value":"Error::MappingFailed","parent":{"krate":0,"index":14912},"children":[],"decl_id":null,"docs":" Failed to map memory range.\n","sig":null,"attributes":[{"value":"fail(display =\n       \"Unable to allocate an appropriately sized contiguous virtual address\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":171068,"byte_end":171157,"line_start":22,"line_end":22,"column_start":5,"column_end":94}}]},{"kind":"Enum","id":{"krate":0,"index":14912},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":170567,"byte_end":170572,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Error","qualname":"::mapping::Error","value":"Error::{OutOfMemory, InvalidAccess, OutOfBounds, MappingFailed}","parent":null,"children":[{"krate":0,"index":14913},{"krate":0,"index":14916},{"krate":0,"index":14918},{"krate":0,"index":14920}],"decl_id":null,"docs":" Error accessing a mapping.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14940},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":171363,"byte_end":171369,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"Reader","qualname":"::mapping::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":14944},{"krate":0,"index":14945},{"krate":0,"index":14946}],"decl_id":null,"docs":" Mapping reader\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14952},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":172031,"byte_end":172037,"line_start":57,"line_end":57,"column_start":12,"column_end":18},"name":"Writer","qualname":"::mapping::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":14956},{"krate":0,"index":14957},{"krate":0,"index":14958},{"krate":0,"index":14959}],"decl_id":null,"docs":" Mapping writer.\n Currently is not possible to make write-only slice so while it is technically possible\n to read from Writer, it will lead to an undefined behavior. Please do not read from it.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"memory","qualname":"::memory","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":14965},{"krate":0,"index":14966},{"krate":0,"index":14967},{"krate":0,"index":14968},{"krate":0,"index":14969},{"krate":0,"index":14970},{"krate":0,"index":14971},{"krate":0,"index":14972},{"krate":0,"index":14973},{"krate":0,"index":14974},{"krate":0,"index":14975},{"krate":0,"index":14976},{"krate":0,"index":14977},{"krate":0,"index":14980},{"krate":0,"index":14983},{"krate":0,"index":14986},{"krate":0,"index":14989},{"krate":0,"index":14992},{"krate":0,"index":14995},{"krate":0,"index":14998},{"krate":0,"index":15001},{"krate":0,"index":15004},{"krate":0,"index":15007},{"krate":0,"index":15010},{"krate":0,"index":15013},{"krate":0,"index":15016},{"krate":0,"index":15019},{"krate":0,"index":15022},{"krate":0,"index":15025},{"krate":0,"index":15028},{"krate":0,"index":15031},{"krate":0,"index":15034},{"krate":0,"index":15037},{"krate":0,"index":15040},{"krate":0,"index":15043},{"krate":0,"index":15046},{"krate":0,"index":15049},{"krate":0,"index":15052},{"krate":0,"index":15055},{"krate":0,"index":15058},{"krate":0,"index":15061},{"krate":0,"index":15064},{"krate":0,"index":15067},{"krate":0,"index":15070},{"krate":0,"index":15073},{"krate":0,"index":905},{"krate":0,"index":908},{"krate":0,"index":15076},{"krate":0,"index":15138},{"krate":0,"index":15097},{"krate":0,"index":15096},{"krate":0,"index":15093},{"krate":0,"index":15091},{"krate":0,"index":15089},{"krate":0,"index":15083},{"krate":0,"index":15081},{"krate":0,"index":15078},{"krate":0,"index":15144},{"krate":0,"index":15153},{"krate":0,"index":15155},{"krate":0,"index":15157},{"krate":0,"index":15159},{"krate":0,"index":15161},{"krate":0,"index":15172},{"krate":0,"index":15175},{"krate":0,"index":15177},{"krate":0,"index":15180},{"krate":0,"index":15182},{"krate":0,"index":15185},{"krate":0,"index":15187},{"krate":0,"index":15190},{"krate":0,"index":15192},{"krate":0,"index":15195},{"krate":0,"index":15198},{"krate":0,"index":15227},{"krate":0,"index":15289},{"krate":0,"index":15248},{"krate":0,"index":15247},{"krate":0,"index":15244},{"krate":0,"index":15242},{"krate":0,"index":15240},{"krate":0,"index":15234},{"krate":0,"index":15232},{"krate":0,"index":15229},{"krate":0,"index":15295},{"krate":0,"index":15300},{"krate":0,"index":15302},{"krate":0,"index":15304},{"krate":0,"index":15306},{"krate":0,"index":15308},{"krate":0,"index":15315},{"krate":0,"index":15318},{"krate":0,"index":15320},{"krate":0,"index":15323},{"krate":0,"index":15325},{"krate":0,"index":15328},{"krate":0,"index":15330},{"krate":0,"index":15333},{"krate":0,"index":15335},{"krate":0,"index":15338},{"krate":0,"index":15341},{"krate":0,"index":15358},{"krate":0,"index":15381},{"krate":0,"index":15377},{"krate":0,"index":912},{"krate":0,"index":15385},{"krate":0,"index":15392},{"krate":0,"index":15391},{"krate":0,"index":15389}],"decl_id":null,"docs":" Types to describe the properties of memory allocated for gfx resources.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":903},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":173122,"byte_end":173125,"line_start":14,"line_end":14,"column_start":18,"column_end":21},"name":"Pod","qualname":"::memory::Pod","value":"Pod: Copy","parent":null,"children":[],"decl_id":null,"docs":" A trait for plain-old-data types.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":908},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":173591,"byte_end":173601,"line_start":29,"line_end":29,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::memory::cast_slice","value":"fn <A, B> (slice: &[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast a slice from one POD type to another.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15076},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":174033,"byte_end":174043,"line_start":41,"line_end":41,"column_start":16,"column_end":26},"name":"Properties","qualname":"::memory::Properties","value":"Properties {  }","parent":null,"children":[{"krate":0,"index":15077}],"decl_id":null,"docs":" Memory property flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":15162},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":174109,"byte_end":174121,"line_start":43,"line_end":43,"column_start":15,"column_end":27},"name":"DEVICE_LOCAL","qualname":"::memory::Properties::DEVICE_LOCAL","value":"Properties","parent":{"krate":0,"index":15161},"children":[],"decl_id":null,"docs":" Device local memory on the GPU.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":15163},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":174285,"byte_end":174296,"line_start":48,"line_end":48,"column_start":15,"column_end":26},"name":"CPU_VISIBLE","qualname":"::memory::Properties::CPU_VISIBLE","value":"Properties","parent":{"krate":0,"index":15161},"children":[],"decl_id":null,"docs":" Host visible memory can be accessed by the CPU.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":15164},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":174423,"byte_end":174431,"line_start":53,"line_end":53,"column_start":15,"column_end":23},"name":"COHERENT","qualname":"::memory::Properties::COHERENT","value":"Properties","parent":{"krate":0,"index":15161},"children":[],"decl_id":null,"docs":" CPU-GPU coherent.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":15165},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":174495,"byte_end":174505,"line_start":56,"line_end":56,"column_start":15,"column_end":25},"name":"CPU_CACHED","qualname":"::memory::Properties::CPU_CACHED","value":"Properties","parent":{"krate":0,"index":15161},"children":[],"decl_id":null,"docs":" Cached memory by the CPU\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":15166},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":174647,"byte_end":174663,"line_start":60,"line_end":60,"column_start":15,"column_end":31},"name":"LAZILY_ALLOCATED","qualname":"::memory::Properties::LAZILY_ALLOCATED","value":"Properties","parent":{"krate":0,"index":15161},"children":[],"decl_id":null,"docs":" Memory that may be lazily allocated as needed on the GPU\n and *must not* be visible to the CPU.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15227},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":174809,"byte_end":174821,"line_start":67,"line_end":67,"column_start":16,"column_end":28},"name":"Dependencies","qualname":"::memory::Dependencies","value":"Dependencies {  }","parent":null,"children":[{"krate":0,"index":15228}],"decl_id":null,"docs":" Barrier dependency flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":15309},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":174912,"byte_end":174921,"line_start":69,"line_end":69,"column_start":15,"column_end":24},"name":"BY_REGION","qualname":"::memory::Dependencies::BY_REGION","value":"Dependencies","parent":{"krate":0,"index":15308},"children":[],"decl_id":null,"docs":" Specifies the memory dependency to be framebuffer-local.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15361},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":175454,"byte_end":175464,"line_start":83,"line_end":83,"column_start":5,"column_end":15},"name":"AllBuffers","qualname":"::memory::Barrier::AllBuffers","value":"Barrier::AllBuffers(Range<buffer::Access>)","parent":{"krate":0,"index":15358},"children":[],"decl_id":null,"docs":" Applies the given access flags to all buffers in the range.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15364},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":175560,"byte_end":175569,"line_start":85,"line_end":85,"column_start":5,"column_end":14},"name":"AllImages","qualname":"::memory::Barrier::AllImages","value":"Barrier::AllImages(Range<image::Access>)","parent":{"krate":0,"index":15358},"children":[],"decl_id":null,"docs":" Applies the given access flags to all images in the range.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":15367},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":175655,"byte_end":175661,"line_start":87,"line_end":87,"column_start":5,"column_end":11},"name":"Buffer","qualname":"::memory::Barrier::Buffer","value":"Barrier::Buffer { states, target, families, range }","parent":{"krate":0,"index":15358},"children":[],"decl_id":null,"docs":" A memory barrier that defines access to a buffer.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":15372},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":176318,"byte_end":176323,"line_start":99,"line_end":99,"column_start":5,"column_end":10},"name":"Image","qualname":"::memory::Barrier::Image","value":"Barrier::Image { states, target, families, range }","parent":{"krate":0,"index":15358},"children":[],"decl_id":null,"docs":" A memory barrier that defines access to (a subset of) an image.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":15358},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":175356,"byte_end":175363,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"name":"Barrier","qualname":"::memory::Barrier","value":"Barrier::{AllBuffers, AllImages, Buffer, Image}","parent":null,"children":[{"krate":0,"index":15361},{"krate":0,"index":15364},{"krate":0,"index":15367},{"krate":0,"index":15372}],"decl_id":null,"docs":" A [memory barrier](https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-memory-barriers)\n type for either buffers or images.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":175300,"byte_end":175322,"line_start":79,"line_end":79,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":177069,"byte_end":177081,"line_start":114,"line_end":114,"column_start":12,"column_end":24},"name":"whole_buffer","qualname":"<Barrier>::whole_buffer","value":"fn (target: &'a B::Buffer, states: Range<buffer::State>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a barrier for the whole buffer between the given states.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15385},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":177393,"byte_end":177405,"line_start":126,"line_end":126,"column_start":12,"column_end":24},"name":"Requirements","qualname":"::memory::Requirements","value":"Requirements { size, alignment, type_mask }","parent":null,"children":[{"krate":0,"index":15386},{"krate":0,"index":15387},{"krate":0,"index":15388}],"decl_id":null,"docs":" Memory requirements for a certain resource (buffer/image).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15386},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":177444,"byte_end":177448,"line_start":128,"line_end":128,"column_start":9,"column_end":13},"name":"size","qualname":"::memory::Requirements::size","value":"u64","parent":{"krate":0,"index":15385},"children":[],"decl_id":null,"docs":" Size in the memory.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15387},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":177489,"byte_end":177498,"line_start":130,"line_end":130,"column_start":9,"column_end":18},"name":"alignment","qualname":"::memory::Requirements::alignment","value":"u64","parent":{"krate":0,"index":15385},"children":[],"decl_id":null,"docs":" Memory alignment.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15388},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":177545,"byte_end":177554,"line_start":132,"line_end":132,"column_start":9,"column_end":18},"name":"type_mask","qualname":"::memory::Requirements::type_mask","value":"u64","parent":{"krate":0,"index":15385},"children":[],"decl_id":null,"docs":" Supported memory types.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pass","qualname":"::pass","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","parent":null,"children":[{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":15394},{"krate":0,"index":15459},{"krate":0,"index":15457},{"krate":0,"index":15455},{"krate":0,"index":15452},{"krate":0,"index":15450},{"krate":0,"index":15448},{"krate":0,"index":15442},{"krate":0,"index":15401},{"krate":0,"index":15460},{"krate":0,"index":15521},{"krate":0,"index":15519},{"krate":0,"index":15517},{"krate":0,"index":15514},{"krate":0,"index":15512},{"krate":0,"index":15510},{"krate":0,"index":15504},{"krate":0,"index":15465},{"krate":0,"index":922},{"krate":0,"index":15522},{"krate":0,"index":15586},{"krate":0,"index":15584},{"krate":0,"index":15582},{"krate":0,"index":15579},{"krate":0,"index":15577},{"krate":0,"index":15574},{"krate":0,"index":15568},{"krate":0,"index":15525},{"krate":0,"index":923},{"krate":0,"index":15587},{"krate":0,"index":15656},{"krate":0,"index":15654},{"krate":0,"index":15651},{"krate":0,"index":15648},{"krate":0,"index":15642},{"krate":0,"index":15593},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":15658},{"krate":0,"index":15719},{"krate":0,"index":15717},{"krate":0,"index":15715},{"krate":0,"index":15712},{"krate":0,"index":15709},{"krate":0,"index":15703},{"krate":0,"index":15664},{"krate":0,"index":15720},{"krate":0,"index":15780},{"krate":0,"index":15778},{"krate":0,"index":15775},{"krate":0,"index":15769},{"krate":0,"index":15724},{"krate":0,"index":15782},{"krate":0,"index":15789},{"krate":0,"index":932},{"krate":0,"index":15792},{"krate":0,"index":15797},{"krate":0,"index":933},{"krate":0,"index":937},{"krate":0,"index":941},{"krate":0,"index":944}],"decl_id":null,"docs":" RenderPass handling.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15395},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":177988,"byte_end":177992,"line_start":14,"line_end":14,"column_start":5,"column_end":9},"name":"Load","qualname":"::pass::AttachmentLoadOp::Load","value":"AttachmentLoadOp::Load","parent":{"krate":0,"index":15394},"children":[],"decl_id":null,"docs":" Preserve existing content in the attachment.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15397},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178028,"byte_end":178033,"line_start":16,"line_end":16,"column_start":5,"column_end":10},"name":"Clear","qualname":"::pass::AttachmentLoadOp::Clear","value":"AttachmentLoadOp::Clear","parent":{"krate":0,"index":15394},"children":[],"decl_id":null,"docs":" Clear the attachment.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15399},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178085,"byte_end":178093,"line_start":18,"line_end":18,"column_start":5,"column_end":13},"name":"DontCare","qualname":"::pass::AttachmentLoadOp::DontCare","value":"AttachmentLoadOp::DontCare","parent":{"krate":0,"index":15394},"children":[],"decl_id":null,"docs":" Attachment content will be undefined.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":15394},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":177912,"byte_end":177928,"line_start":12,"line_end":12,"column_start":10,"column_end":26},"name":"AttachmentLoadOp","qualname":"::pass::AttachmentLoadOp","value":"AttachmentLoadOp::{Load, Clear, DontCare}","parent":null,"children":[{"krate":0,"index":15395},{"krate":0,"index":15397},{"krate":0,"index":15399}],"decl_id":null,"docs":" Specifies the operation which will be applied at the beginning of a subpass.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15461},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178310,"byte_end":178315,"line_start":26,"line_end":26,"column_start":5,"column_end":10},"name":"Store","qualname":"::pass::AttachmentStoreOp::Store","value":"AttachmentStoreOp::Store","parent":{"krate":0,"index":15460},"children":[],"decl_id":null,"docs":" Content written to the attachment will be preserved.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15463},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178367,"byte_end":178375,"line_start":28,"line_end":28,"column_start":5,"column_end":13},"name":"DontCare","qualname":"::pass::AttachmentStoreOp::DontCare","value":"AttachmentStoreOp::DontCare","parent":{"krate":0,"index":15460},"children":[],"decl_id":null,"docs":" Attachment content will be undefined.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":15460},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178225,"byte_end":178242,"line_start":24,"line_end":24,"column_start":10,"column_end":27},"name":"AttachmentStoreOp","qualname":"::pass::AttachmentStoreOp","value":"AttachmentStoreOp::{Store, DontCare}","parent":null,"children":[{"krate":0,"index":15461},{"krate":0,"index":15463}],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178424,"byte_end":178440,"line_start":32,"line_end":32,"column_start":10,"column_end":26},"name":"AttachmentLayout","qualname":"::pass::AttachmentLayout","value":"image::Layout","parent":null,"children":[],"decl_id":null,"docs":" Image layout of an attachment.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15522},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178611,"byte_end":178624,"line_start":37,"line_end":37,"column_start":12,"column_end":25},"name":"AttachmentOps","qualname":"::pass::AttachmentOps","value":"AttachmentOps { load, store }","parent":null,"children":[{"krate":0,"index":15523},{"krate":0,"index":15524}],"decl_id":null,"docs":" Attachment operations.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15523},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178755,"byte_end":178759,"line_start":40,"line_end":40,"column_start":9,"column_end":13},"name":"load","qualname":"::pass::AttachmentOps::load","value":"pass::AttachmentLoadOp","parent":{"krate":0,"index":15522},"children":[],"decl_id":null,"docs":" Indicates how the data of the attachment will be loaded at first usage at\n the beginning of the subpass.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15524},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178877,"byte_end":178882,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"name":"store","qualname":"::pass::AttachmentOps::store","value":"pass::AttachmentStoreOp","parent":{"krate":0,"index":15522},"children":[],"decl_id":null,"docs":" Whether or not data from the store operation will be preserved after the subpass.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":924},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178998,"byte_end":179007,"line_start":47,"line_end":47,"column_start":15,"column_end":24},"name":"DONT_CARE","qualname":"::pass::AttachmentOps::DONT_CARE","value":"Self","parent":{"krate":0,"index":923},"children":[],"decl_id":null,"docs":" Specifies `DontCare` for both load and store op.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":179203,"byte_end":179211,"line_start":53,"line_end":53,"column_start":15,"column_end":23},"name":"PRESERVE","qualname":"::pass::AttachmentOps::PRESERVE","value":"Self","parent":{"krate":0,"index":923},"children":[],"decl_id":null,"docs":" Specifies `Load` for load op and `Store` for store op.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":179396,"byte_end":179399,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<AttachmentOps>::new","value":"fn (load: AttachmentLoadOp, store: AttachmentStoreOp) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convenience function to create a new `AttachmentOps`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15587},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":180024,"byte_end":180034,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"Attachment","qualname":"::pass::Attachment","value":"Attachment { format, samples, ops, stencil_ops, layouts }","parent":null,"children":[{"krate":0,"index":15588},{"krate":0,"index":15589},{"krate":0,"index":15590},{"krate":0,"index":15591},{"krate":0,"index":15592}],"decl_id":null,"docs":" An `Attachment` is a description of a resource provided to a render subpass.\n It includes things such as render targets, images that were produced from\n previous subpasses, etc.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15588},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":180260,"byte_end":180266,"line_start":82,"line_end":82,"column_start":9,"column_end":15},"name":"format","qualname":"::pass::Attachment::format","value":"std::option::Option<format::Format>","parent":{"krate":0,"index":15587},"children":[],"decl_id":null,"docs":" Attachment format","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15589},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":180319,"byte_end":180326,"line_start":84,"line_end":84,"column_start":9,"column_end":16},"name":"samples","qualname":"::pass::Attachment::samples","value":"u8","parent":{"krate":0,"index":15587},"children":[],"decl_id":null,"docs":" Number of samples.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15590},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":180407,"byte_end":180410,"line_start":86,"line_end":86,"column_start":9,"column_end":12},"name":"ops","qualname":"::pass::Attachment::ops","value":"pass::AttachmentOps","parent":{"krate":0,"index":15587},"children":[],"decl_id":null,"docs":" Load and store operations of the attachment\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15591},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":180578,"byte_end":180589,"line_start":89,"line_end":89,"column_start":9,"column_end":20},"name":"stencil_ops","qualname":"::pass::Attachment::stencil_ops","value":"pass::AttachmentOps","parent":{"krate":0,"index":15587},"children":[],"decl_id":null,"docs":" Load and store operations of the stencil aspect, if any\n","sig":null,"attributes":[{"value":"serde(default = \"AttachmentOps::whatever\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":180525,"byte_end":180567,"line_start":88,"line_end":88,"column_start":35,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":15592},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":180673,"byte_end":180680,"line_start":91,"line_end":91,"column_start":9,"column_end":16},"name":"layouts","qualname":"::pass::Attachment::layouts","value":"std::ops::Range<image::Layout>","parent":{"krate":0,"index":15587},"children":[],"decl_id":null,"docs":" Initial and final image layouts of the renderpass.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":180904,"byte_end":180914,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"has_clears","qualname":"<Attachment>::has_clears","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this attachment has some clear operations. This is useful\n when starting a render pass, since there has to be a clear value provided.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":181111,"byte_end":181123,"line_start":103,"line_end":103,"column_start":10,"column_end":22},"name":"AttachmentId","qualname":"::pass::AttachmentId","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Index of an attachment within a framebuffer/renderpass,\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":931},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":181209,"byte_end":181222,"line_start":105,"line_end":105,"column_start":10,"column_end":23},"name":"AttachmentRef","qualname":"::pass::AttachmentRef","value":"(AttachmentId, AttachmentLayout)","parent":null,"children":[],"decl_id":null,"docs":" Reference to an attachment by index and expected image layout.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15659},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":181575,"byte_end":181583,"line_start":113,"line_end":113,"column_start":5,"column_end":13},"name":"External","qualname":"::pass::SubpassRef::External","value":"SubpassRef::External","parent":{"krate":0,"index":15658},"children":[],"decl_id":null,"docs":" The subpass depends on something that was submitted to the\n queue before or after the render pass began.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15661},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":181823,"byte_end":181827,"line_start":118,"line_end":118,"column_start":5,"column_end":9},"name":"Pass","qualname":"::pass::SubpassRef::Pass","value":"SubpassRef::Pass(usize)","parent":{"krate":0,"index":15658},"children":[],"decl_id":null,"docs":" The subpass depends on another subpass with the given index,\n which must be less than or equal to the index of the current\n subpass. The index here refers to the corresponding\n `SubpassId` of a `Subpass`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":15658},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":181438,"byte_end":181448,"line_start":110,"line_end":110,"column_start":10,"column_end":20},"name":"SubpassRef","qualname":"::pass::SubpassRef","value":"SubpassRef::{External, Pass}","parent":null,"children":[{"krate":0,"index":15659},{"krate":0,"index":15661}],"decl_id":null,"docs":" Which other subpasses a particular subpass depends on.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15720},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":182172,"byte_end":182189,"line_start":127,"line_end":127,"column_start":12,"column_end":29},"name":"SubpassDependency","qualname":"::pass::SubpassDependency","value":"SubpassDependency { passes, stages, accesses }","parent":null,"children":[{"krate":0,"index":15721},{"krate":0,"index":15722},{"krate":0,"index":15723}],"decl_id":null,"docs":" Expresses a dependency between multiple subpasses. This is used\n both to describe a source or destination subpass; data either\n explicitly passes from this subpass to the next or from another\n subpass into this one.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15721},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":182245,"byte_end":182251,"line_start":129,"line_end":129,"column_start":9,"column_end":15},"name":"passes","qualname":"::pass::SubpassDependency::passes","value":"std::ops::Range<pass::SubpassRef>","parent":{"krate":0,"index":15720},"children":[],"decl_id":null,"docs":" Other subpasses this one depends on.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15722},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":182335,"byte_end":182341,"line_start":131,"line_end":131,"column_start":9,"column_end":15},"name":"stages","qualname":"::pass::SubpassDependency::stages","value":"std::ops::Range<pso::PipelineStage>","parent":{"krate":0,"index":15720},"children":[],"decl_id":null,"docs":" Other pipeline stages this subpass depends on.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15723},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":182424,"byte_end":182432,"line_start":133,"line_end":133,"column_start":9,"column_end":17},"name":"accesses","qualname":"::pass::SubpassDependency::accesses","value":"std::ops::Range<image::Access>","parent":{"krate":0,"index":15720},"children":[],"decl_id":null,"docs":" Resource accesses this subpass depends on.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15782},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":182541,"byte_end":182552,"line_start":138,"line_end":138,"column_start":12,"column_end":23},"name":"SubpassDesc","qualname":"::pass::SubpassDesc","value":"SubpassDesc { colors, depth_stencil, inputs, resolves, preserves }","parent":null,"children":[{"krate":0,"index":15784},{"krate":0,"index":15785},{"krate":0,"index":15786},{"krate":0,"index":15787},{"krate":0,"index":15788}],"decl_id":null,"docs":" Description of a subpass for renderpass creation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15784},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":182624,"byte_end":182630,"line_start":140,"line_end":140,"column_start":9,"column_end":15},"name":"colors","qualname":"::pass::SubpassDesc::colors","value":"&'a [(usize, image::Layout)]","parent":{"krate":0,"index":15782},"children":[],"decl_id":null,"docs":" Which attachments will be used as color buffers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15785},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":182726,"byte_end":182739,"line_start":142,"line_end":142,"column_start":9,"column_end":22},"name":"depth_stencil","qualname":"::pass::SubpassDesc::depth_stencil","value":"std::option::Option<&'a (usize, image::Layout)>","parent":{"krate":0,"index":15782},"children":[],"decl_id":null,"docs":" Which attachments will be used as depth/stencil buffers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15786},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":182837,"byte_end":182843,"line_start":144,"line_end":144,"column_start":9,"column_end":15},"name":"inputs","qualname":"::pass::SubpassDesc::inputs","value":"&'a [(usize, image::Layout)]","parent":{"krate":0,"index":15782},"children":[],"decl_id":null,"docs":" Which attachments will be used as input attachments.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15787},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":183213,"byte_end":183221,"line_start":150,"line_end":150,"column_start":9,"column_end":17},"name":"resolves","qualname":"::pass::SubpassDesc::resolves","value":"&'a [(usize, image::Layout)]","parent":{"krate":0,"index":15782},"children":[],"decl_id":null,"docs":" Which attachments will be used as resolve destinations.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15788},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":183373,"byte_end":183382,"line_start":153,"line_end":153,"column_start":9,"column_end":18},"name":"preserves","qualname":"::pass::SubpassDesc::preserves","value":"&'a [usize]","parent":{"krate":0,"index":15782},"children":[],"decl_id":null,"docs":" Attachments that are not used by the subpass but must be preserved to be\n passed on to subsequent passes.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":932},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":183440,"byte_end":183449,"line_start":157,"line_end":157,"column_start":10,"column_end":19},"name":"SubpassId","qualname":"::pass::SubpassId","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Index of a subpass.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15792},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":183521,"byte_end":183528,"line_start":161,"line_end":161,"column_start":12,"column_end":19},"name":"Subpass","qualname":"::pass::Subpass","value":"Subpass { index, main_pass }","parent":null,"children":[{"krate":0,"index":15795},{"krate":0,"index":15796}],"decl_id":null,"docs":" A sub-pass borrow of a pass.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15795},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":183584,"byte_end":183589,"line_start":163,"line_end":163,"column_start":9,"column_end":14},"name":"index","qualname":"::pass::Subpass::index","value":"usize","parent":{"krate":0,"index":15792},"children":[],"decl_id":null,"docs":" Index of the subpass\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15796},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":183636,"byte_end":183645,"line_start":165,"line_end":165,"column_start":9,"column_end":18},"name":"main_pass","qualname":"::pass::Subpass::main_pass","value":"&'a <B as Backend>::RenderPass","parent":{"krate":0,"index":15792},"children":[],"decl_id":null,"docs":" Main pass borrow.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":947},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pool","qualname":"::pool","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":15801},{"krate":0,"index":15863},{"krate":0,"index":15822},{"krate":0,"index":15821},{"krate":0,"index":15818},{"krate":0,"index":15816},{"krate":0,"index":15814},{"krate":0,"index":15808},{"krate":0,"index":15806},{"krate":0,"index":15803},{"krate":0,"index":15869},{"krate":0,"index":15875},{"krate":0,"index":15877},{"krate":0,"index":15879},{"krate":0,"index":15881},{"krate":0,"index":15883},{"krate":0,"index":15891},{"krate":0,"index":15894},{"krate":0,"index":15896},{"krate":0,"index":15899},{"krate":0,"index":15901},{"krate":0,"index":15904},{"krate":0,"index":15906},{"krate":0,"index":15909},{"krate":0,"index":15911},{"krate":0,"index":15914},{"krate":0,"index":15917},{"krate":0,"index":962},{"krate":0,"index":15937},{"krate":0,"index":15942},{"krate":0,"index":970},{"krate":0,"index":983}],"decl_id":null,"docs":" Command pools\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15801},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":184564,"byte_end":184586,"line_start":17,"line_end":17,"column_start":16,"column_end":38},"name":"CommandPoolCreateFlags","qualname":"::pool::CommandPoolCreateFlags","value":"CommandPoolCreateFlags {  }","parent":null,"children":[{"krate":0,"index":15802}],"decl_id":null,"docs":" Command pool creation flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":15884},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":184716,"byte_end":184725,"line_start":20,"line_end":20,"column_start":15,"column_end":24},"name":"TRANSIENT","qualname":"::pool::CommandPoolCreateFlags::TRANSIENT","value":"CommandPoolCreateFlags","parent":{"krate":0,"index":15883},"children":[],"decl_id":null,"docs":" Indicates short-lived command buffers.\n Memory optimization hint for implementations.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":15885},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":184807,"byte_end":184823,"line_start":22,"line_end":22,"column_start":15,"column_end":31},"name":"RESET_INDIVIDUAL","qualname":"::pool::CommandPoolCreateFlags::RESET_INDIVIDUAL","value":"CommandPoolCreateFlags","parent":{"krate":0,"index":15883},"children":[],"decl_id":null,"docs":" Allow command buffers to be reset individually.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":962},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":184933,"byte_end":184947,"line_start":27,"line_end":27,"column_start":11,"column_end":25},"name":"RawCommandPool","qualname":"::pool::RawCommandPool","value":"RawCommandPool<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":968}],"decl_id":null,"docs":" The allocated command buffers are associated with the creating command queue.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":185204,"byte_end":185209,"line_start":31,"line_end":31,"column_start":15,"column_end":20},"name":"reset","qualname":"::pool::RawCommandPool::reset","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":962},"children":[],"decl_id":null,"docs":" Reset the command pool and the corresponding command buffers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":185287,"byte_end":185299,"line_start":34,"line_end":34,"column_start":8,"column_end":20},"name":"allocate_one","qualname":"::pool::RawCommandPool::allocate_one","value":"fn (&mut self, level: RawLevel) -> B::CommandBuffer","parent":{"krate":0,"index":962},"children":[],"decl_id":null,"docs":" Allocate a single command buffers from the pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":185467,"byte_end":185479,"line_start":39,"line_end":39,"column_start":8,"column_end":20},"name":"allocate_vec","qualname":"::pool::RawCommandPool::allocate_vec","value":"fn (&mut self, num: usize, level: RawLevel) -> Vec<B::CommandBuffer>","parent":{"krate":0,"index":962},"children":[],"decl_id":null,"docs":" Allocate new command buffers from the pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":185694,"byte_end":185698,"line_start":44,"line_end":44,"column_start":15,"column_end":19},"name":"free","qualname":"::pool::RawCommandPool::free","value":"fn <I> (&mut self, buffers: I) -> ()","parent":{"krate":0,"index":962},"children":[],"decl_id":null,"docs":" Free command buffers which are allocated from this pool.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15937},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":186132,"byte_end":186143,"line_start":56,"line_end":56,"column_start":12,"column_end":23},"name":"CommandPool","qualname":"::pool::CommandPool","value":"CommandPool {  }","parent":null,"children":[{"krate":0,"index":15940},{"krate":0,"index":15941}],"decl_id":null,"docs":" Strong-typed command pool.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":186534,"byte_end":186537,"line_start":69,"line_end":69,"column_start":19,"column_end":22},"name":"new","qualname":"<CommandPool<B, C>>::new","value":"fn (raw: B::CommandPool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create typed command pool from raw.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":186877,"byte_end":186882,"line_start":79,"line_end":79,"column_start":19,"column_end":24},"name":"reset","qualname":"<CommandPool<B, C>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the command pool and the corresponding command buffers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":187002,"byte_end":187024,"line_start":84,"line_end":84,"column_start":12,"column_end":34},"name":"acquire_command_buffer","qualname":"<CommandPool<B, C>>::acquire_command_buffer","value":"fn <S> (&mut self) -> CommandBuffer<B, C, S>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new primary command buffer from the pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":187264,"byte_end":187296,"line_start":90,"line_end":90,"column_start":12,"column_end":44},"name":"acquire_secondary_command_buffer","qualname":"<CommandPool<B, C>>::acquire_secondary_command_buffer","value":"fn <S> (&mut self) -> SecondaryCommandBuffer<B, C, S>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new secondary command buffer from the pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":187565,"byte_end":187569,"line_start":96,"line_end":96,"column_start":19,"column_end":23},"name":"free","qualname":"<CommandPool<B, C>>::free","value":"fn <I> (&mut self, cmd_buffers: I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Free the given iterator of command buffers from the pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":187845,"byte_end":187853,"line_start":106,"line_end":106,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<CommandPool<B, C>>::into_raw","value":"fn (self) -> B::CommandPool","parent":null,"children":[],"decl_id":null,"docs":" Downgrade a typed command pool to untyped one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":188039,"byte_end":188069,"line_start":113,"line_end":113,"column_start":12,"column_end":42},"name":"acquire_subpass_command_buffer","qualname":"<CommandPool<B, C>>::acquire_subpass_command_buffer","value":"fn <S> (&mut self) -> SubpassCommandBuffer<B, S>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new subpass command buffer from the pool.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":988},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pso","qualname":"::pso","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":993},{"krate":0,"index":997},{"krate":0,"index":1007},{"krate":0,"index":1027},{"krate":0,"index":1058},{"krate":0,"index":1070},{"krate":0,"index":1099},{"krate":0,"index":19017},{"krate":0,"index":19042},{"krate":0,"index":19040},{"krate":0,"index":19037},{"krate":0,"index":19029},{"krate":0,"index":19034},{"krate":0,"index":1105},{"krate":0,"index":19044},{"krate":0,"index":19106},{"krate":0,"index":19065},{"krate":0,"index":19064},{"krate":0,"index":19061},{"krate":0,"index":19059},{"krate":0,"index":19057},{"krate":0,"index":19051},{"krate":0,"index":19049},{"krate":0,"index":19046},{"krate":0,"index":19112},{"krate":0,"index":19131},{"krate":0,"index":19133},{"krate":0,"index":19135},{"krate":0,"index":19137},{"krate":0,"index":19139},{"krate":0,"index":19160},{"krate":0,"index":19163},{"krate":0,"index":19165},{"krate":0,"index":19168},{"krate":0,"index":19170},{"krate":0,"index":19173},{"krate":0,"index":19175},{"krate":0,"index":19178},{"krate":0,"index":19180},{"krate":0,"index":19183},{"krate":0,"index":19186},{"krate":0,"index":19245},{"krate":0,"index":19307},{"krate":0,"index":19266},{"krate":0,"index":19265},{"krate":0,"index":19262},{"krate":0,"index":19260},{"krate":0,"index":19258},{"krate":0,"index":19252},{"krate":0,"index":19250},{"krate":0,"index":19247},{"krate":0,"index":19313},{"krate":0,"index":19325},{"krate":0,"index":19327},{"krate":0,"index":19329},{"krate":0,"index":19331},{"krate":0,"index":19333},{"krate":0,"index":19347},{"krate":0,"index":19350},{"krate":0,"index":19352},{"krate":0,"index":19355},{"krate":0,"index":19357},{"krate":0,"index":19360},{"krate":0,"index":19362},{"krate":0,"index":19365},{"krate":0,"index":19367},{"krate":0,"index":19370},{"krate":0,"index":19373},{"krate":0,"index":19411},{"krate":0,"index":19487},{"krate":0,"index":19486},{"krate":0,"index":19484},{"krate":0,"index":19482},{"krate":0,"index":19479},{"krate":0,"index":19477},{"krate":0,"index":19471},{"krate":0,"index":19424},{"krate":0,"index":1107},{"krate":0,"index":1109},{"krate":0,"index":19489},{"krate":0,"index":19495},{"krate":0,"index":1111},{"krate":0,"index":19499},{"krate":0,"index":19561},{"krate":0,"index":19520},{"krate":0,"index":19519},{"krate":0,"index":19516},{"krate":0,"index":19514},{"krate":0,"index":19512},{"krate":0,"index":19506},{"krate":0,"index":19504},{"krate":0,"index":19501},{"krate":0,"index":19567},{"krate":0,"index":19573},{"krate":0,"index":19575},{"krate":0,"index":19577},{"krate":0,"index":19579},{"krate":0,"index":19581},{"krate":0,"index":19589},{"krate":0,"index":19592},{"krate":0,"index":19594},{"krate":0,"index":19597},{"krate":0,"index":19599},{"krate":0,"index":19602},{"krate":0,"index":19604},{"krate":0,"index":19607},{"krate":0,"index":19609},{"krate":0,"index":19612},{"krate":0,"index":19615},{"krate":0,"index":19635},{"krate":0,"index":19646},{"krate":0,"index":19650},{"krate":0,"index":19655},{"krate":0,"index":19653},{"krate":0,"index":19657},{"krate":0,"index":19664},{"krate":0,"index":19661},{"krate":0,"index":1115},{"krate":0,"index":1117},{"krate":0,"index":19667},{"krate":0,"index":19672},{"krate":0,"index":19670},{"krate":0,"index":1119},{"krate":0,"index":1121},{"krate":0,"index":19674},{"krate":0,"index":19676},{"krate":0,"index":19678},{"krate":0,"index":19683},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":19687},{"krate":0,"index":19769},{"krate":0,"index":19767},{"krate":0,"index":19764},{"krate":0,"index":19761},{"krate":0,"index":19757},{"krate":0,"index":19754},{"krate":0,"index":19750},{"krate":0,"index":19743},{"krate":0,"index":19736},{"krate":0,"index":19694},{"krate":0,"index":1130},{"krate":0,"index":1135}],"decl_id":null,"docs":" Raw Pipeline State Objects","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15946},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\compute.rs","byte_start":199233,"byte_end":199252,"line_start":8,"line_end":8,"column_start":12,"column_end":31},"name":"ComputePipelineDesc","qualname":"::pso::compute::ComputePipelineDesc","value":"ComputePipelineDesc { shader, layout, flags, parent }","parent":null,"children":[{"krate":0,"index":15949},{"krate":0,"index":15950},{"krate":0,"index":15951},{"krate":0,"index":15952}],"decl_id":null,"docs":" A description of the data needed to construct a compute pipeline.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15949},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\compute.rs","byte_start":199341,"byte_end":199347,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"shader","qualname":"::pso::compute::ComputePipelineDesc::shader","value":"pso::EntryPoint<'a, B>","parent":{"krate":0,"index":15946},"children":[],"decl_id":null,"docs":" The shader entry point that performs the computation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15950},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\compute.rs","byte_start":199401,"byte_end":199407,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"name":"layout","qualname":"::pso::compute::ComputePipelineDesc::layout","value":"&'a <B as Backend>::PipelineLayout","parent":{"krate":0,"index":15946},"children":[],"decl_id":null,"docs":" Pipeline layout.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15951},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\compute.rs","byte_start":199495,"byte_end":199500,"line_start":14,"line_end":14,"column_start":9,"column_end":14},"name":"flags","qualname":"::pso::compute::ComputePipelineDesc::flags","value":"pso::PipelineCreationFlags","parent":{"krate":0,"index":15946},"children":[],"decl_id":null,"docs":" Any flags necessary for the pipeline creation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15952},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\compute.rs","byte_start":199582,"byte_end":199588,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"name":"parent","qualname":"::pso::compute::ComputePipelineDesc::parent","value":"pso::BasePipeline<'a, <B as Backend>::ComputePipeline>","parent":{"krate":0,"index":15946},"children":[],"decl_id":null,"docs":" The parent pipeline to this one, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\compute.rs","byte_start":199735,"byte_end":199738,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"new","qualname":"<ComputePipelineDesc>::new","value":"fn (shader: EntryPoint<'a, B>, layout: &'a B::PipelineLayout) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty PSO descriptor.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1015},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":201333,"byte_end":201351,"line_start":29,"line_end":29,"column_start":10,"column_end":28},"name":"DescriptorSetIndex","qualname":"::pso::descriptor::DescriptorSetIndex","value":"u16","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":201372,"byte_end":201389,"line_start":31,"line_end":31,"column_start":10,"column_end":27},"name":"DescriptorBinding","qualname":"::pso::descriptor::DescriptorBinding","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":201410,"byte_end":201430,"line_start":33,"line_end":33,"column_start":10,"column_end":30},"name":"DescriptorArrayIndex","qualname":"::pso::descriptor::DescriptorArrayIndex","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15958},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":201903,"byte_end":201910,"line_start":43,"line_end":43,"column_start":5,"column_end":12},"name":"Sampler","qualname":"::pso::descriptor::DescriptorType::Sampler","value":"DescriptorType::Sampler","parent":{"krate":0,"index":15957},"children":[],"decl_id":null,"docs":" Controls filtering parameters for sampling from images.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15961},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":201928,"byte_end":201948,"line_start":45,"line_end":45,"column_start":5,"column_end":25},"name":"CombinedImageSampler","qualname":"::pso::descriptor::DescriptorType::CombinedImageSampler","value":"DescriptorType::CombinedImageSampler","parent":{"krate":0,"index":15957},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15964},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":202074,"byte_end":202086,"line_start":48,"line_end":48,"column_start":5,"column_end":17},"name":"SampledImage","qualname":"::pso::descriptor::DescriptorType::SampledImage","value":"DescriptorType::SampledImage","parent":{"krate":0,"index":15957},"children":[],"decl_id":null,"docs":" Allows sampling (filtered loading) from associated image memory.\n Usually combined with a `Sampler`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15967},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":202179,"byte_end":202191,"line_start":50,"line_end":50,"column_start":5,"column_end":17},"name":"StorageImage","qualname":"::pso::descriptor::DescriptorType::StorageImage","value":"DescriptorType::StorageImage","parent":{"krate":0,"index":15957},"children":[],"decl_id":null,"docs":" Allows atomic operations, (non-filtered) loads and stores on image memory.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15970},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":202238,"byte_end":202256,"line_start":52,"line_end":52,"column_start":5,"column_end":23},"name":"UniformTexelBuffer","qualname":"::pso::descriptor::DescriptorType::UniformTexelBuffer","value":"DescriptorType::UniformTexelBuffer","parent":{"krate":0,"index":15957},"children":[],"decl_id":null,"docs":" Read-only, formatted buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15973},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":202304,"byte_end":202322,"line_start":54,"line_end":54,"column_start":5,"column_end":23},"name":"StorageTexelBuffer","qualname":"::pso::descriptor::DescriptorType::StorageTexelBuffer","value":"DescriptorType::StorageTexelBuffer","parent":{"krate":0,"index":15957},"children":[],"decl_id":null,"docs":" Read-Write, formatted buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15976},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":202370,"byte_end":202383,"line_start":56,"line_end":56,"column_start":5,"column_end":18},"name":"UniformBuffer","qualname":"::pso::descriptor::DescriptorType::UniformBuffer","value":"DescriptorType::UniformBuffer","parent":{"krate":0,"index":15957},"children":[],"decl_id":null,"docs":" Read-only, structured buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15979},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":202432,"byte_end":202445,"line_start":58,"line_end":58,"column_start":5,"column_end":18},"name":"StorageBuffer","qualname":"::pso::descriptor::DescriptorType::StorageBuffer","value":"DescriptorType::StorageBuffer","parent":{"krate":0,"index":15957},"children":[],"decl_id":null,"docs":" Read-Write, structured buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15982},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":202680,"byte_end":202700,"line_start":62,"line_end":62,"column_start":5,"column_end":25},"name":"UniformBufferDynamic","qualname":"::pso::descriptor::DescriptorType::UniformBufferDynamic","value":"DescriptorType::UniformBufferDynamic","parent":{"krate":0,"index":15957},"children":[],"decl_id":null,"docs":" A uniform buffer that can be bound with an offset into its memory with minimal performance impact,\n usually used to store pieces of \"uniform\" data that change per draw call rather than\n per render pass.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15985},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":202718,"byte_end":202738,"line_start":64,"line_end":64,"column_start":5,"column_end":25},"name":"StorageBufferDynamic","qualname":"::pso::descriptor::DescriptorType::StorageBufferDynamic","value":"DescriptorType::StorageBufferDynamic","parent":{"krate":0,"index":15957},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":15988},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":202824,"byte_end":202839,"line_start":66,"line_end":66,"column_start":5,"column_end":20},"name":"InputAttachment","qualname":"::pso::descriptor::DescriptorType::InputAttachment","value":"DescriptorType::InputAttachment","parent":{"krate":0,"index":15957},"children":[],"decl_id":null,"docs":" Allows unfiltered loads of pixel local data in the fragment shader.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":15957},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":201818,"byte_end":201832,"line_start":41,"line_end":41,"column_start":10,"column_end":24},"name":"DescriptorType","qualname":"::pso::descriptor::DescriptorType","value":"DescriptorType::{Sampler, CombinedImageSampler, SampledImage, StorageImage, UniformTexelBuffer, StorageTexelBuffer, UniformBuffer, StorageBuffer, UniformBufferDynamic, StorageBufferDynamic, InputAttachment}","parent":null,"children":[{"krate":0,"index":15958},{"krate":0,"index":15961},{"krate":0,"index":15964},{"krate":0,"index":15967},{"krate":0,"index":15970},{"krate":0,"index":15973},{"krate":0,"index":15976},{"krate":0,"index":15979},{"krate":0,"index":15982},{"krate":0,"index":15985},{"krate":0,"index":15988}],"decl_id":null,"docs":" DOC TODO: Grasping and remembering the differences between these\n       types is a tough task. We might be able to come up with better names?\n       Or even use tuples to describe functionality instead of coming up with fancy names.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":201684,"byte_end":201694,"line_start":38,"line_end":38,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":16066},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":203589,"byte_end":203615,"line_start":83,"line_end":83,"column_start":12,"column_end":38},"name":"DescriptorSetLayoutBinding","qualname":"::pso::descriptor::DescriptorSetLayoutBinding","value":"DescriptorSetLayoutBinding { binding, ty, count, stage_flags, immutable_samplers }","parent":null,"children":[{"krate":0,"index":16067},{"krate":0,"index":16068},{"krate":0,"index":16069},{"krate":0,"index":16070},{"krate":0,"index":16071}],"decl_id":null,"docs":" Information about the contents of and in which stages descriptors may be bound to a descriptor\n set at a certain binding point. Multiple `DescriptorSetLayoutBinding`s are assembled into\n a `DescriptorSetLayout`, which is then allocated into a `DescriptorSet` using a\n [`DescriptorPool`].","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16067},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":203661,"byte_end":203668,"line_start":85,"line_end":85,"column_start":9,"column_end":16},"name":"binding","qualname":"::pso::descriptor::DescriptorSetLayoutBinding::binding","value":"u32","parent":{"krate":0,"index":16066},"children":[],"decl_id":null,"docs":" Descriptor bindings range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16068},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":203736,"byte_end":203738,"line_start":87,"line_end":87,"column_start":9,"column_end":11},"name":"ty","qualname":"::pso::descriptor::DescriptorSetLayoutBinding::ty","value":"pso::descriptor::DescriptorType","parent":{"krate":0,"index":16066},"children":[],"decl_id":null,"docs":" Type of the bound descriptors.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16069},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":203934,"byte_end":203939,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"name":"count","qualname":"::pso::descriptor::DescriptorSetLayoutBinding::count","value":"usize","parent":{"krate":0,"index":16066},"children":[],"decl_id":null,"docs":" Number of descriptors in the array.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16070},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":204000,"byte_end":204011,"line_start":94,"line_end":94,"column_start":9,"column_end":20},"name":"stage_flags","qualname":"::pso::descriptor::DescriptorSetLayoutBinding::stage_flags","value":"pso::ShaderStageFlags","parent":{"krate":0,"index":16066},"children":[],"decl_id":null,"docs":" Valid shader stages.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16071},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":204094,"byte_end":204112,"line_start":96,"line_end":96,"column_start":9,"column_end":27},"name":"immutable_samplers","qualname":"::pso::descriptor::DescriptorSetLayoutBinding::immutable_samplers","value":"bool","parent":{"krate":0,"index":16066},"children":[],"decl_id":null,"docs":" Use the associated list of immutable samplers.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16131},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":204270,"byte_end":204289,"line_start":102,"line_end":102,"column_start":12,"column_end":31},"name":"DescriptorRangeDesc","qualname":"::pso::descriptor::DescriptorRangeDesc","value":"DescriptorRangeDesc { ty, count }","parent":null,"children":[{"krate":0,"index":16132},{"krate":0,"index":16133}],"decl_id":null,"docs":" Set of descriptors of a specific type.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16132},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":204340,"byte_end":204342,"line_start":104,"line_end":104,"column_start":9,"column_end":11},"name":"ty","qualname":"::pso::descriptor::DescriptorRangeDesc::ty","value":"pso::descriptor::DescriptorType","parent":{"krate":0,"index":16131},"children":[],"decl_id":null,"docs":" Type of the stored descriptors.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16133},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":204393,"byte_end":204398,"line_start":106,"line_end":106,"column_start":9,"column_end":14},"name":"count","qualname":"::pso::descriptor::DescriptorRangeDesc::count","value":"usize","parent":{"krate":0,"index":16131},"children":[],"decl_id":null,"docs":" Amount of space.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16189},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":204724,"byte_end":204739,"line_start":115,"line_end":115,"column_start":5,"column_end":20},"name":"OutOfHostMemory","qualname":"::pso::descriptor::AllocationError::OutOfHostMemory","value":"AllocationError::OutOfHostMemory","parent":{"krate":0,"index":16188},"children":[],"decl_id":null,"docs":" Memory allocation on the host side failed.\n This could be caused by a lack of memory or pool fragmentation.\n","sig":null,"attributes":[{"value":"fail(display = \"Host memory allocation failed.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":204668,"byte_end":204719,"line_start":114,"line_end":114,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":16191},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":204926,"byte_end":204943,"line_start":119,"line_end":119,"column_start":5,"column_end":22},"name":"OutOfDeviceMemory","qualname":"::pso::descriptor::AllocationError::OutOfDeviceMemory","value":"AllocationError::OutOfDeviceMemory","parent":{"krate":0,"index":16188},"children":[],"decl_id":null,"docs":" Memory allocation on the host side failed.\n This could be caused by a lack of memory or pool fragmentation.\n","sig":null,"attributes":[{"value":"fail(display = \"Device memory allocation failed.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":204868,"byte_end":204921,"line_start":118,"line_end":118,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":16193},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":205157,"byte_end":205172,"line_start":123,"line_end":123,"column_start":5,"column_end":20},"name":"OutOfPoolMemory","qualname":"::pso::descriptor::AllocationError::OutOfPoolMemory","value":"AllocationError::OutOfPoolMemory","parent":{"krate":0,"index":16188},"children":[],"decl_id":null,"docs":" Memory allocation failed as there is not enough in the pool.\n This could be caused by too many descriptor sets being created.\n","sig":null,"attributes":[{"value":"fail(display = \"Descriptor pool memory allocation failed.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":205090,"byte_end":205152,"line_start":122,"line_end":122,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":16195},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":205294,"byte_end":205308,"line_start":126,"line_end":126,"column_start":5,"column_end":19},"name":"FragmentedPool","qualname":"::pso::descriptor::AllocationError::FragmentedPool","value":"AllocationError::FragmentedPool","parent":{"krate":0,"index":16188},"children":[],"decl_id":null,"docs":" Memory allocation failed due to pool fragmentation.\n","sig":null,"attributes":[{"value":"fail(display = \"Descriptor pool is fragmented.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":205238,"byte_end":205289,"line_start":125,"line_end":125,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":16197},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":205467,"byte_end":205485,"line_start":129,"line_end":129,"column_start":5,"column_end":23},"name":"IncompatibleLayout","qualname":"::pso::descriptor::AllocationError::IncompatibleLayout","value":"AllocationError::IncompatibleLayout","parent":{"krate":0,"index":16188},"children":[],"decl_id":null,"docs":" Descriptor set allocation failed as the layout is incompatible with the pool.\n","sig":null,"attributes":[{"value":"fail(display = \"Descriptor layout incompatible with pool.\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":205400,"byte_end":205462,"line_start":128,"line_end":128,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":16188},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":204523,"byte_end":204538,"line_start":111,"line_end":111,"column_start":10,"column_end":25},"name":"AllocationError","qualname":"::pso::descriptor::AllocationError","value":"AllocationError::{OutOfHostMemory, OutOfDeviceMemory, OutOfPoolMemory, FragmentedPool, IncompatibleLayout}","parent":null,"children":[{"krate":0,"index":16189},{"krate":0,"index":16191},{"krate":0,"index":16193},{"krate":0,"index":16195},{"krate":0,"index":16197}],"decl_id":null,"docs":" An error allocating descriptor sets from a pool.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":205590,"byte_end":205604,"line_start":133,"line_end":133,"column_start":11,"column_end":25},"name":"DescriptorPool","qualname":"::pso::descriptor::DescriptorPool","value":"DescriptorPool<B: Backend>: Send + Sync + fmt::Debug","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1024},{"krate":0,"index":1026}],"decl_id":null,"docs":" A descriptor pool is a collection of memory from which descriptor sets are allocated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":206245,"byte_end":206257,"line_start":145,"line_end":145,"column_start":15,"column_end":27},"name":"allocate_set","qualname":"::pso::descriptor::DescriptorPool::allocate_set","value":"fn (&mut self, layout: &B::DescriptorSetLayout) -> Result<B::DescriptorSet, AllocationError>","parent":{"krate":0,"index":1018},"children":[],"decl_id":null,"docs":" Allocate a descriptor set from the pool.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":207232,"byte_end":207245,"line_start":166,"line_end":166,"column_start":15,"column_end":28},"name":"allocate_sets","qualname":"::pso::descriptor::DescriptorPool::allocate_sets","value":"fn <I> (&mut self, layouts: I, sets: &mut Vec<B::DescriptorSet>) -> Result<(), AllocationError>","parent":{"krate":0,"index":1018},"children":[],"decl_id":null,"docs":" Allocate one or multiple descriptor sets from the pool.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":207880,"byte_end":207889,"line_start":189,"line_end":189,"column_start":15,"column_end":24},"name":"free_sets","qualname":"::pso::descriptor::DescriptorPool::free_sets","value":"fn <I> (&mut self, descriptor_sets: I) -> ()","parent":{"krate":0,"index":1018},"children":[],"decl_id":null,"docs":" Free the given descriptor sets provided as an iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":208289,"byte_end":208294,"line_start":197,"line_end":197,"column_start":15,"column_end":20},"name":"reset","qualname":"::pso::descriptor::DescriptorPool::reset","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":1018},"children":[],"decl_id":null,"docs":" Resets a descriptor pool, releasing all resources from all the descriptor sets\n allocated from it and freeing the descriptor sets. Invalidates all descriptor\n sets allocated from the pool; trying to use one after the pool has been reset\n is undefined behavior.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16216},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":208506,"byte_end":208524,"line_start":204,"line_end":204,"column_start":12,"column_end":30},"name":"DescriptorSetWrite","qualname":"::pso::descriptor::DescriptorSetWrite","value":"DescriptorSetWrite { set, binding, array_offset, descriptors }","parent":null,"children":[{"krate":0,"index":16220},{"krate":0,"index":16221},{"krate":0,"index":16222},{"krate":0,"index":16223}],"decl_id":null,"docs":" Writes the actual descriptors to be bound into a descriptor set. Should be provided\n to the `write_descriptor_sets` method of a `Device`.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":208455,"byte_end":208477,"line_start":202,"line_end":202,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":16220},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":208624,"byte_end":208627,"line_start":209,"line_end":209,"column_start":9,"column_end":12},"name":"set","qualname":"::pso::descriptor::DescriptorSetWrite::set","value":"&'a <B as Backend>::DescriptorSet","parent":{"krate":0,"index":16216},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16221},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":208903,"byte_end":208910,"line_start":214,"line_end":214,"column_start":9,"column_end":16},"name":"binding","qualname":"::pso::descriptor::DescriptorSetWrite::binding","value":"u32","parent":{"krate":0,"index":16216},"children":[],"decl_id":null,"docs":" *Note*: when there is more descriptors provided than\n array elements left in the specified binding starting\n at specified, offset, the updates are spilled onto\n the next binding (starting with offset 0), and so on.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16222},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":208939,"byte_end":208951,"line_start":215,"line_end":215,"column_start":9,"column_end":21},"name":"array_offset","qualname":"::pso::descriptor::DescriptorSetWrite::array_offset","value":"usize","parent":{"krate":0,"index":16216},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16223},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":208983,"byte_end":208994,"line_start":216,"line_end":216,"column_start":9,"column_end":20},"name":"descriptors","qualname":"::pso::descriptor::DescriptorSetWrite::descriptors","value":"WI","parent":{"krate":0,"index":16216},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16232},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209295,"byte_end":209302,"line_start":226,"line_end":226,"column_start":5,"column_end":12},"name":"Sampler","qualname":"::pso::descriptor::Descriptor::Sampler","value":"Descriptor::Sampler(&'a B::Sampler)","parent":{"krate":0,"index":16229},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16235},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209324,"byte_end":209329,"line_start":227,"line_end":227,"column_start":5,"column_end":10},"name":"Image","qualname":"::pso::descriptor::Descriptor::Image","value":"Descriptor::Image(&'a B::ImageView, Layout)","parent":{"krate":0,"index":16229},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16239},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209361,"byte_end":209381,"line_start":228,"line_end":228,"column_start":5,"column_end":25},"name":"CombinedImageSampler","qualname":"::pso::descriptor::Descriptor::CombinedImageSampler","value":"Descriptor::CombinedImageSampler(&'a B::ImageView, Layout, &'a B::Sampler)","parent":{"krate":0,"index":16229},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16244},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209429,"byte_end":209435,"line_start":229,"line_end":229,"column_start":5,"column_end":11},"name":"Buffer","qualname":"::pso::descriptor::Descriptor::Buffer","value":"Descriptor::Buffer(&'a B::Buffer, Range<Option<Offset>>)","parent":{"krate":0,"index":16229},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16248},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209479,"byte_end":209497,"line_start":230,"line_end":230,"column_start":5,"column_end":23},"name":"UniformTexelBuffer","qualname":"::pso::descriptor::Descriptor::UniformTexelBuffer","value":"Descriptor::UniformTexelBuffer(&'a B::BufferView)","parent":{"krate":0,"index":16229},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16251},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209522,"byte_end":209540,"line_start":231,"line_end":231,"column_start":5,"column_end":23},"name":"StorageTexelBuffer","qualname":"::pso::descriptor::Descriptor::StorageTexelBuffer","value":"Descriptor::StorageTexelBuffer(&'a B::BufferView)","parent":{"krate":0,"index":16229},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":16229},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209262,"byte_end":209272,"line_start":225,"line_end":225,"column_start":10,"column_end":20},"name":"Descriptor","qualname":"::pso::descriptor::Descriptor","value":"Descriptor::{Sampler, Image, CombinedImageSampler, Buffer, UniformTexelBuffer, StorageTexelBuffer}","parent":null,"children":[{"krate":0,"index":16232},{"krate":0,"index":16235},{"krate":0,"index":16239},{"krate":0,"index":16244},{"krate":0,"index":16248},{"krate":0,"index":16251}],"decl_id":null,"docs":" A handle to a specific shader resource that can be bound for use in a `DescriptorSet`.\n Usually provided in a [`DescriptorSetWrite`]","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209206,"byte_end":209228,"line_start":223,"line_end":223,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":16262},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209784,"byte_end":209801,"line_start":238,"line_end":238,"column_start":12,"column_end":29},"name":"DescriptorSetCopy","qualname":"::pso::descriptor::DescriptorSetCopy","value":"DescriptorSetCopy { src_set, src_binding, src_array_offset, dst_set, dst_binding, dst_array_offset, count }","parent":null,"children":[{"krate":0,"index":16265},{"krate":0,"index":16266},{"krate":0,"index":16267},{"krate":0,"index":16268},{"krate":0,"index":16269},{"krate":0,"index":16270},{"krate":0,"index":16271}],"decl_id":null,"docs":" Copies a range of descriptors to be bound from one descriptor set to another Should be\n provided to the `copy_descriptor_sets` method of a `Device`.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209720,"byte_end":209742,"line_start":236,"line_end":236,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":16265},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209828,"byte_end":209835,"line_start":239,"line_end":239,"column_start":9,"column_end":16},"name":"src_set","qualname":"::pso::descriptor::DescriptorSetCopy::src_set","value":"&'a <B as Backend>::DescriptorSet","parent":{"krate":0,"index":16262},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16266},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209867,"byte_end":209878,"line_start":240,"line_end":240,"column_start":9,"column_end":20},"name":"src_binding","qualname":"::pso::descriptor::DescriptorSetCopy::src_binding","value":"u32","parent":{"krate":0,"index":16262},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16267},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209907,"byte_end":209923,"line_start":241,"line_end":241,"column_start":9,"column_end":25},"name":"src_array_offset","qualname":"::pso::descriptor::DescriptorSetCopy::src_array_offset","value":"usize","parent":{"krate":0,"index":16262},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16268},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209955,"byte_end":209962,"line_start":242,"line_end":242,"column_start":9,"column_end":16},"name":"dst_set","qualname":"::pso::descriptor::DescriptorSetCopy::dst_set","value":"&'a <B as Backend>::DescriptorSet","parent":{"krate":0,"index":16262},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16269},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":209994,"byte_end":210005,"line_start":243,"line_end":243,"column_start":9,"column_end":20},"name":"dst_binding","qualname":"::pso::descriptor::DescriptorSetCopy::dst_binding","value":"u32","parent":{"krate":0,"index":16262},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16270},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":210034,"byte_end":210050,"line_start":244,"line_end":244,"column_start":9,"column_end":25},"name":"dst_array_offset","qualname":"::pso::descriptor::DescriptorSetCopy::dst_array_offset","value":"usize","parent":{"krate":0,"index":16262},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16271},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":210082,"byte_end":210087,"line_start":245,"line_end":245,"column_start":9,"column_end":14},"name":"count","qualname":"::pso::descriptor::DescriptorSetCopy::count","value":"usize","parent":{"krate":0,"index":16262},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16283},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":210166,"byte_end":210191,"line_start":250,"line_end":250,"column_start":16,"column_end":41},"name":"DescriptorPoolCreateFlags","qualname":"::pso::descriptor::DescriptorPoolCreateFlags","value":"DescriptorPoolCreateFlags {  }","parent":null,"children":[{"krate":0,"index":16284}],"decl_id":null,"docs":" Descriptor pool creation flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":16318},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":210320,"byte_end":210339,"line_start":253,"line_end":253,"column_start":15,"column_end":34},"name":"FREE_DESCRIPTOR_SET","qualname":"::pso::descriptor::DescriptorPoolCreateFlags::FREE_DESCRIPTOR_SET","value":"DescriptorPoolCreateFlags","parent":{"krate":0,"index":16317},"children":[],"decl_id":null,"docs":" Specifies that descriptor sets are allowed to be freed from the pool\n individually.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16367},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":210877,"byte_end":210881,"line_start":13,"line_end":13,"column_start":12,"column_end":16},"name":"Rect","qualname":"::pso::graphics::Rect","value":"Rect { x, y, w, h }","parent":null,"children":[{"krate":0,"index":16368},{"krate":0,"index":16369},{"krate":0,"index":16370},{"krate":0,"index":16371}],"decl_id":null,"docs":" A simple struct describing a rect with integer coordinates.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16368},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":210912,"byte_end":210913,"line_start":15,"line_end":15,"column_start":9,"column_end":10},"name":"x","qualname":"::pso::graphics::Rect::x","value":"i16","parent":{"krate":0,"index":16367},"children":[],"decl_id":null,"docs":" X position.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16369},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":210948,"byte_end":210949,"line_start":17,"line_end":17,"column_start":9,"column_end":10},"name":"y","qualname":"::pso::graphics::Rect::y","value":"i16","parent":{"krate":0,"index":16367},"children":[],"decl_id":null,"docs":" Y position.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16370},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":210979,"byte_end":210980,"line_start":19,"line_end":19,"column_start":9,"column_end":10},"name":"w","qualname":"::pso::graphics::Rect::w","value":"i16","parent":{"krate":0,"index":16367},"children":[],"decl_id":null,"docs":" Width.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16371},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":211011,"byte_end":211012,"line_start":21,"line_end":21,"column_start":9,"column_end":10},"name":"h","qualname":"::pso::graphics::Rect::h","value":"i16","parent":{"krate":0,"index":16367},"children":[],"decl_id":null,"docs":" Height.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16454},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":211195,"byte_end":211204,"line_start":27,"line_end":27,"column_start":12,"column_end":21},"name":"ClearRect","qualname":"::pso::graphics::ClearRect","value":"ClearRect { rect, layers }","parent":null,"children":[{"krate":0,"index":16455},{"krate":0,"index":16456}],"decl_id":null,"docs":" A simple struct describing a rect with integer coordinates.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16455},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":211234,"byte_end":211238,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"name":"rect","qualname":"::pso::graphics::ClearRect::rect","value":"pso::graphics::Rect","parent":{"krate":0,"index":16454},"children":[],"decl_id":null,"docs":" 2D region.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16456},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":211275,"byte_end":211281,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"name":"layers","qualname":"::pso::graphics::ClearRect::layers","value":"std::ops::Range<u16>","parent":{"krate":0,"index":16454},"children":[],"decl_id":null,"docs":" Layer range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16513},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":211477,"byte_end":211485,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Viewport","qualname":"::pso::graphics::Viewport","value":"Viewport { rect, depth }","parent":null,"children":[{"krate":0,"index":16514},{"krate":0,"index":16515}],"decl_id":null,"docs":" A viewport, generally equating to a window on a display.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16514},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":211529,"byte_end":211533,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"name":"rect","qualname":"::pso::graphics::Viewport::rect","value":"pso::graphics::Rect","parent":{"krate":0,"index":16513},"children":[],"decl_id":null,"docs":" The viewport boundaries.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16515},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":211584,"byte_end":211589,"line_start":41,"line_end":41,"column_start":9,"column_end":14},"name":"depth","qualname":"::pso::graphics::Viewport::depth","value":"std::ops::Range<f32>","parent":{"krate":0,"index":16513},"children":[],"decl_id":null,"docs":" The viewport depth limits.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1047},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":211646,"byte_end":211656,"line_start":45,"line_end":45,"column_start":10,"column_end":20},"name":"ColorValue","qualname":"::pso::graphics::ColorValue","value":"[f32; 4]","parent":null,"children":[],"decl_id":null,"docs":" A single RGBA float color.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1049},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":211724,"byte_end":211734,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"DepthValue","qualname":"::pso::graphics::DepthValue","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" A single depth value from a depth buffer.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":211793,"byte_end":211805,"line_start":49,"line_end":49,"column_start":10,"column_end":22},"name":"StencilValue","qualname":"::pso::graphics::StencilValue","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" A single value from a stencil buffer.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16572},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":212309,"byte_end":212326,"line_start":62,"line_end":62,"column_start":12,"column_end":29},"name":"GraphicsShaderSet","qualname":"::pso::graphics::GraphicsShaderSet","value":"GraphicsShaderSet { vertex, hull, domain, geometry, fragment }","parent":null,"children":[{"krate":0,"index":16575},{"krate":0,"index":16576},{"krate":0,"index":16577},{"krate":0,"index":16578},{"krate":0,"index":16579}],"decl_id":null,"docs":" A complete set of shaders to build a graphics pipeline.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16575},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":212404,"byte_end":212410,"line_start":64,"line_end":64,"column_start":9,"column_end":15},"name":"vertex","qualname":"::pso::graphics::GraphicsShaderSet::vertex","value":"pso::EntryPoint<'a, B>","parent":{"krate":0,"index":16572},"children":[],"decl_id":null,"docs":" A shader that outputs a vertex in a model.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16576},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":212672,"byte_end":212676,"line_start":69,"line_end":69,"column_start":9,"column_end":13},"name":"hull","qualname":"::pso::graphics::GraphicsShaderSet::hull","value":"std::option::Option<pso::EntryPoint<'a, B>>","parent":{"krate":0,"index":16572},"children":[],"decl_id":null,"docs":" A hull shader takes in an input patch (values representing\n a small portion of a shape, which may be actual geometry or may\n be parameters for creating geometry) and produces one or more\n output patches.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16577},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":212843,"byte_end":212849,"line_start":72,"line_end":72,"column_start":9,"column_end":15},"name":"domain","qualname":"::pso::graphics::GraphicsShaderSet::domain","value":"std::option::Option<pso::EntryPoint<'a, B>>","parent":{"krate":0,"index":16572},"children":[],"decl_id":null,"docs":" A shader that takes in domains produced from a hull shader's output\n patches and computes actual vertex positions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16578},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":212985,"byte_end":212993,"line_start":75,"line_end":75,"column_start":9,"column_end":17},"name":"geometry","qualname":"::pso::graphics::GraphicsShaderSet::geometry","value":"std::option::Option<pso::EntryPoint<'a, B>>","parent":{"krate":0,"index":16572},"children":[],"decl_id":null,"docs":" A shader that takes given input vertexes and outputs zero\n or more output vertexes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16579},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":213177,"byte_end":213185,"line_start":79,"line_end":79,"column_start":9,"column_end":17},"name":"fragment","qualname":"::pso::graphics::GraphicsShaderSet::fragment","value":"std::option::Option<pso::EntryPoint<'a, B>>","parent":{"krate":0,"index":16572},"children":[],"decl_id":null,"docs":" A shader that outputs a value for a fragment.\n Usually this value is a color that is then displayed as a\n pixel on a screen.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16588},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":213365,"byte_end":213376,"line_start":85,"line_end":85,"column_start":12,"column_end":23},"name":"BakedStates","qualname":"::pso::graphics::BakedStates","value":"BakedStates { viewport, scissor, blend_color, depth_bounds }","parent":null,"children":[{"krate":0,"index":16589},{"krate":0,"index":16590},{"krate":0,"index":16591},{"krate":0,"index":16592}],"decl_id":null,"docs":" Baked-in pipeline states.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16589},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":213437,"byte_end":213445,"line_start":87,"line_end":87,"column_start":9,"column_end":17},"name":"viewport","qualname":"::pso::graphics::BakedStates::viewport","value":"std::option::Option<pso::graphics::Viewport>","parent":{"krate":0,"index":16588},"children":[],"decl_id":null,"docs":" Static viewport. TODO: multiple viewports\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16590},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":213521,"byte_end":213528,"line_start":89,"line_end":89,"column_start":9,"column_end":16},"name":"scissor","qualname":"::pso::graphics::BakedStates::scissor","value":"std::option::Option<pso::graphics::Rect>","parent":{"krate":0,"index":16588},"children":[],"decl_id":null,"docs":" Static scissor. TODO: multiple scissors\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16591},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":213589,"byte_end":213600,"line_start":91,"line_end":91,"column_start":9,"column_end":20},"name":"blend_color","qualname":"::pso::graphics::BakedStates::blend_color","value":"std::option::Option<[f32; _]>","parent":{"krate":0,"index":16588},"children":[],"decl_id":null,"docs":" Static blend constant color.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16592},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":213659,"byte_end":213671,"line_start":93,"line_end":93,"column_start":9,"column_end":21},"name":"depth_bounds","qualname":"::pso::graphics::BakedStates::depth_bounds","value":"std::option::Option<std::ops::Range<f32>>","parent":{"krate":0,"index":16588},"children":[],"decl_id":null,"docs":" Static depth bounds.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16655},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":213821,"byte_end":213841,"line_start":99,"line_end":99,"column_start":12,"column_end":32},"name":"GraphicsPipelineDesc","qualname":"::pso::graphics::GraphicsPipelineDesc","value":"GraphicsPipelineDesc { shaders, rasterizer, vertex_buffers, attributes, input_assembler, blender, depth_stencil, multisampling, baked_states, layout, subpass, flags, parent }","parent":null,"children":[{"krate":0,"index":16658},{"krate":0,"index":16659},{"krate":0,"index":16660},{"krate":0,"index":16661},{"krate":0,"index":16662},{"krate":0,"index":16663},{"krate":0,"index":16664},{"krate":0,"index":16665},{"krate":0,"index":16666},{"krate":0,"index":16667},{"krate":0,"index":16668},{"krate":0,"index":16669},{"krate":0,"index":16670}],"decl_id":null,"docs":" A description of all the settings that can be altered\n when creating a graphics pipeline.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16658},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":213927,"byte_end":213934,"line_start":101,"line_end":101,"column_start":9,"column_end":16},"name":"shaders","qualname":"::pso::graphics::GraphicsPipelineDesc::shaders","value":"pso::graphics::GraphicsShaderSet<'a, B>","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" A set of graphics shaders to use for the pipeline.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16659},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":213995,"byte_end":214005,"line_start":103,"line_end":103,"column_start":9,"column_end":19},"name":"rasterizer","qualname":"::pso::graphics::GraphicsPipelineDesc::rasterizer","value":"pso::graphics::Rasterizer","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" Rasterizer setup\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16660},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":214055,"byte_end":214069,"line_start":105,"line_end":105,"column_start":9,"column_end":23},"name":"vertex_buffers","qualname":"::pso::graphics::GraphicsPipelineDesc::vertex_buffers","value":"std::vec::Vec<pso::input_assembler::VertexBufferDesc>","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" Vertex buffers (IA)\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16661},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":214133,"byte_end":214143,"line_start":107,"line_end":107,"column_start":9,"column_end":19},"name":"attributes","qualname":"::pso::graphics::GraphicsPipelineDesc::attributes","value":"std::vec::Vec<pso::input_assembler::AttributeDesc>","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" Vertex attributes (IA)\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16662},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":214291,"byte_end":214306,"line_start":110,"line_end":110,"column_start":9,"column_end":24},"name":"input_assembler","qualname":"::pso::graphics::GraphicsPipelineDesc::input_assembler","value":"pso::input_assembler::InputAssemblerDesc","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" Input assembler attributes, describes how\n vertices are assembled into primitives (such as triangles).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16663},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":214401,"byte_end":214408,"line_start":112,"line_end":112,"column_start":9,"column_end":16},"name":"blender","qualname":"::pso::graphics::GraphicsPipelineDesc::blender","value":"pso::graphics::BlendDesc","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" Description of how blend operations should be performed.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16664},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":214457,"byte_end":214470,"line_start":114,"line_end":114,"column_start":9,"column_end":22},"name":"depth_stencil","qualname":"::pso::graphics::GraphicsPipelineDesc::depth_stencil","value":"pso::output_merger::DepthStencilDesc","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" Depth stencil (DSV)\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16665},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":214521,"byte_end":214534,"line_start":116,"line_end":116,"column_start":9,"column_end":22},"name":"multisampling","qualname":"::pso::graphics::GraphicsPipelineDesc::multisampling","value":"std::option::Option<pso::graphics::Multisampling>","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" Multisampling.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16666},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":214599,"byte_end":214611,"line_start":118,"line_end":118,"column_start":9,"column_end":21},"name":"baked_states","qualname":"::pso::graphics::GraphicsPipelineDesc::baked_states","value":"pso::graphics::BakedStates","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" Static pipeline states.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16667},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":214659,"byte_end":214665,"line_start":120,"line_end":120,"column_start":9,"column_end":15},"name":"layout","qualname":"::pso::graphics::GraphicsPipelineDesc::layout","value":"&'a <B as Backend>::PipelineLayout","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" Pipeline layout.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16668},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":214753,"byte_end":214760,"line_start":122,"line_end":122,"column_start":9,"column_end":16},"name":"subpass","qualname":"::pso::graphics::GraphicsPipelineDesc::subpass","value":"pass::Subpass<'a, B>","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" Subpass in which the pipeline can be executed.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16669},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":214854,"byte_end":214859,"line_start":124,"line_end":124,"column_start":9,"column_end":14},"name":"flags","qualname":"::pso::graphics::GraphicsPipelineDesc::flags","value":"pso::PipelineCreationFlags","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" Options that may be set to alter pipeline properties.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16670},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":214964,"byte_end":214970,"line_start":127,"line_end":127,"column_start":9,"column_end":15},"name":"parent","qualname":"::pso::graphics::GraphicsPipelineDesc::parent","value":"pso::BasePipeline<'a, <B as Backend>::GraphicsPipeline>","parent":{"krate":0,"index":16655},"children":[],"decl_id":null,"docs":" The parent pipeline, which may be\n `BasePipeline::None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":215119,"byte_end":215122,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<GraphicsPipelineDesc>::new","value":"fn (shaders: GraphicsShaderSet<'a, B>, primitive: Primitive, rasterizer: Rasterizer, layout: &'a B::PipelineLayout, subpass: pass::Subpass<'a, B>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty PSO descriptor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16676},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":216130,"byte_end":216135,"line_start":163,"line_end":163,"column_start":5,"column_end":10},"name":"Point","qualname":"::pso::graphics::PolygonMode::Point","value":"PolygonMode::Point","parent":{"krate":0,"index":16675},"children":[],"decl_id":null,"docs":" Rasterize as a point.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16678},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":216191,"byte_end":216195,"line_start":165,"line_end":165,"column_start":5,"column_end":9},"name":"Line","qualname":"::pso::graphics::PolygonMode::Line","value":"PolygonMode::Line(f32)","parent":{"krate":0,"index":16675},"children":[],"decl_id":null,"docs":" Rasterize as a line with the given width.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16681},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":216235,"byte_end":216239,"line_start":167,"line_end":167,"column_start":5,"column_end":9},"name":"Fill","qualname":"::pso::graphics::PolygonMode::Fill","value":"PolygonMode::Fill","parent":{"krate":0,"index":16675},"children":[],"decl_id":null,"docs":" Rasterize as a face.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":16675},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":216082,"byte_end":216093,"line_start":161,"line_end":161,"column_start":10,"column_end":21},"name":"PolygonMode","qualname":"::pso::graphics::PolygonMode","value":"PolygonMode::{Point, Line, Fill}","parent":null,"children":[{"krate":0,"index":16676},{"krate":0,"index":16678},{"krate":0,"index":16681}],"decl_id":null,"docs":" Methods for rasterizing polygons, ie, turning the mesh\n into a raster image.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16745},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":216575,"byte_end":216584,"line_start":177,"line_end":177,"column_start":5,"column_end":14},"name":"Clockwise","qualname":"::pso::graphics::FrontFace::Clockwise","value":"FrontFace::Clockwise","parent":{"krate":0,"index":16744},"children":[],"decl_id":null,"docs":" Clockwise winding order.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":16747},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":216631,"byte_end":216647,"line_start":179,"line_end":179,"column_start":5,"column_end":21},"name":"CounterClockwise","qualname":"::pso::graphics::FrontFace::CounterClockwise","value":"FrontFace::CounterClockwise","parent":{"krate":0,"index":16744},"children":[],"decl_id":null,"docs":" Counter-clockwise winding order.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":16744},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":216526,"byte_end":216535,"line_start":175,"line_end":175,"column_start":10,"column_end":19},"name":"FrontFace","qualname":"::pso::graphics::FrontFace","value":"FrontFace::{Clockwise, CounterClockwise}","parent":null,"children":[{"krate":0,"index":16745},{"krate":0,"index":16747}],"decl_id":null,"docs":" The front face winding order of a set of vertices. This is\n the order of vertexes that define which side of a face is\n the \"front\".\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16810},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":217182,"byte_end":217191,"line_start":191,"line_end":191,"column_start":12,"column_end":21},"name":"DepthBias","qualname":"::pso::graphics::DepthBias","value":"DepthBias { const_factor, clamp, slope_factor }","parent":null,"children":[{"krate":0,"index":16811},{"krate":0,"index":16812},{"krate":0,"index":16813}],"decl_id":null,"docs":" A depth bias allows changing the produced depth values\n for fragments slightly but consistently. This permits\n drawing of multiple polygons in the same plane without\n Z-fighting, such as when trying to draw shadows on a wall.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16811},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":217257,"byte_end":217269,"line_start":193,"line_end":193,"column_start":9,"column_end":21},"name":"const_factor","qualname":"::pso::graphics::DepthBias::const_factor","value":"f32","parent":{"krate":0,"index":16810},"children":[],"decl_id":null,"docs":" A constant depth value added to each fragment.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16812},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":217341,"byte_end":217346,"line_start":195,"line_end":195,"column_start":9,"column_end":14},"name":"clamp","qualname":"::pso::graphics::DepthBias::clamp","value":"f32","parent":{"krate":0,"index":16810},"children":[],"decl_id":null,"docs":" The minimum or maximum depth bias of a fragment.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16813},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":217418,"byte_end":217430,"line_start":197,"line_end":197,"column_start":9,"column_end":21},"name":"slope_factor","qualname":"::pso::graphics::DepthBias::slope_factor","value":"f32","parent":{"krate":0,"index":16810},"children":[],"decl_id":null,"docs":" A constant bias applied to the fragment's slope.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16875},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":217580,"byte_end":217590,"line_start":203,"line_end":203,"column_start":12,"column_end":22},"name":"Rasterizer","qualname":"::pso::graphics::Rasterizer","value":"Rasterizer { polygon_mode, cull_face, front_face, depth_clamping, depth_bias, conservative }","parent":null,"children":[{"krate":0,"index":16876},{"krate":0,"index":16877},{"krate":0,"index":16878},{"krate":0,"index":16879},{"krate":0,"index":16880},{"krate":0,"index":16881}],"decl_id":null,"docs":" Rasterization state.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16876},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":217642,"byte_end":217654,"line_start":205,"line_end":205,"column_start":9,"column_end":21},"name":"polygon_mode","qualname":"::pso::graphics::Rasterizer::polygon_mode","value":"pso::graphics::PolygonMode","parent":{"krate":0,"index":16875},"children":[],"decl_id":null,"docs":" How to rasterize this primitive.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16877},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":217714,"byte_end":217723,"line_start":207,"line_end":207,"column_start":9,"column_end":18},"name":"cull_face","qualname":"::pso::graphics::Rasterizer::cull_face","value":"pso::output_merger::Face","parent":{"krate":0,"index":16875},"children":[],"decl_id":null,"docs":" Which face should be culled.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16878},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":217816,"byte_end":217826,"line_start":209,"line_end":209,"column_start":9,"column_end":19},"name":"front_face","qualname":"::pso::graphics::Rasterizer::front_face","value":"pso::graphics::FrontFace","parent":{"krate":0,"index":16875},"children":[],"decl_id":null,"docs":" Which vertex winding is considered to be the front face for culling.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16879},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":218058,"byte_end":218072,"line_start":213,"line_end":213,"column_start":9,"column_end":23},"name":"depth_clamping","qualname":"::pso::graphics::Rasterizer::depth_clamping","value":"bool","parent":{"krate":0,"index":16875},"children":[],"decl_id":null,"docs":" Whether or not to enable depth clamping; when enabled, instead of\n fragments being omitted when they are outside the bounds of the z-plane,\n they will be clamped to the min or max z value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16880},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":218154,"byte_end":218164,"line_start":215,"line_end":215,"column_start":9,"column_end":19},"name":"depth_bias","qualname":"::pso::graphics::Rasterizer::depth_bias","value":"std::option::Option<pso::State<pso::graphics::DepthBias>>","parent":{"krate":0,"index":16875},"children":[],"decl_id":null,"docs":" What depth bias, if any, to use for the drawn primitives.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16881},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":218290,"byte_end":218302,"line_start":217,"line_end":217,"column_start":9,"column_end":21},"name":"conservative","qualname":"::pso::graphics::Rasterizer::conservative","value":"bool","parent":{"krate":0,"index":16875},"children":[],"decl_id":null,"docs":" Controls how triangles will be rasterized depending on their overlap with pixels.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":218393,"byte_end":218397,"line_start":222,"line_end":222,"column_start":15,"column_end":19},"name":"FILL","qualname":"::pso::graphics::Rasterizer::FILL","value":"Self","parent":{"krate":0,"index":1055},"children":[],"decl_id":null,"docs":" Simple polygon-filling rasterizer state\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16947},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":218840,"byte_end":218849,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"BlendDesc","qualname":"::pso::graphics::BlendDesc","value":"BlendDesc { logic_op, targets }","parent":null,"children":[{"krate":0,"index":16948},{"krate":0,"index":16949}],"decl_id":null,"docs":" A description of an equation for how to blend transparent, overlapping fragments.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16948},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":218931,"byte_end":218939,"line_start":237,"line_end":237,"column_start":9,"column_end":17},"name":"logic_op","qualname":"::pso::graphics::BlendDesc::logic_op","value":"std::option::Option<pso::graphics::LogicOp>","parent":{"krate":0,"index":16947},"children":[],"decl_id":null,"docs":" The logic operation to apply to the blending equation, if any.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16949},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219030,"byte_end":219037,"line_start":239,"line_end":239,"column_start":9,"column_end":16},"name":"targets","qualname":"::pso::graphics::BlendDesc::targets","value":"std::vec::Vec<pso::output_merger::ColorBlendDesc>","parent":{"krate":0,"index":16947},"children":[],"decl_id":null,"docs":" Which color targets to apply the blending operation to.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17009},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219269,"byte_end":219274,"line_start":247,"line_end":247,"column_start":5,"column_end":10},"name":"Clear","qualname":"::pso::graphics::LogicOp::Clear","value":"LogicOp::Clear","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17012},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219284,"byte_end":219287,"line_start":248,"line_end":248,"column_start":5,"column_end":8},"name":"And","qualname":"::pso::graphics::LogicOp::And","value":"LogicOp::And","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17015},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219297,"byte_end":219307,"line_start":249,"line_end":249,"column_start":5,"column_end":15},"name":"AndReverse","qualname":"::pso::graphics::LogicOp::AndReverse","value":"LogicOp::AndReverse","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17018},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219317,"byte_end":219321,"line_start":250,"line_end":250,"column_start":5,"column_end":9},"name":"Copy","qualname":"::pso::graphics::LogicOp::Copy","value":"LogicOp::Copy","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17021},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219331,"byte_end":219342,"line_start":251,"line_end":251,"column_start":5,"column_end":16},"name":"AndInverted","qualname":"::pso::graphics::LogicOp::AndInverted","value":"LogicOp::AndInverted","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17024},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219352,"byte_end":219356,"line_start":252,"line_end":252,"column_start":5,"column_end":9},"name":"NoOp","qualname":"::pso::graphics::LogicOp::NoOp","value":"LogicOp::NoOp","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17027},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219366,"byte_end":219369,"line_start":253,"line_end":253,"column_start":5,"column_end":8},"name":"Xor","qualname":"::pso::graphics::LogicOp::Xor","value":"LogicOp::Xor","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17030},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219379,"byte_end":219381,"line_start":254,"line_end":254,"column_start":5,"column_end":7},"name":"Or","qualname":"::pso::graphics::LogicOp::Or","value":"LogicOp::Or","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17033},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219391,"byte_end":219394,"line_start":255,"line_end":255,"column_start":5,"column_end":8},"name":"Nor","qualname":"::pso::graphics::LogicOp::Nor","value":"LogicOp::Nor","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17036},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219404,"byte_end":219414,"line_start":256,"line_end":256,"column_start":5,"column_end":15},"name":"Equivalent","qualname":"::pso::graphics::LogicOp::Equivalent","value":"LogicOp::Equivalent","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17039},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219424,"byte_end":219430,"line_start":257,"line_end":257,"column_start":5,"column_end":11},"name":"Invert","qualname":"::pso::graphics::LogicOp::Invert","value":"LogicOp::Invert","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17042},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219441,"byte_end":219450,"line_start":258,"line_end":258,"column_start":5,"column_end":14},"name":"OrReverse","qualname":"::pso::graphics::LogicOp::OrReverse","value":"LogicOp::OrReverse","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17045},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219461,"byte_end":219473,"line_start":259,"line_end":259,"column_start":5,"column_end":17},"name":"CopyInverted","qualname":"::pso::graphics::LogicOp::CopyInverted","value":"LogicOp::CopyInverted","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17048},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219484,"byte_end":219494,"line_start":260,"line_end":260,"column_start":5,"column_end":15},"name":"OrInverted","qualname":"::pso::graphics::LogicOp::OrInverted","value":"LogicOp::OrInverted","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17051},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219505,"byte_end":219509,"line_start":261,"line_end":261,"column_start":5,"column_end":9},"name":"Nand","qualname":"::pso::graphics::LogicOp::Nand","value":"LogicOp::Nand","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17054},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219520,"byte_end":219523,"line_start":262,"line_end":262,"column_start":5,"column_end":8},"name":"Set","qualname":"::pso::graphics::LogicOp::Set","value":"LogicOp::Set","parent":{"krate":0,"index":17008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":17008},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219255,"byte_end":219262,"line_start":246,"line_end":246,"column_start":10,"column_end":17},"name":"LogicOp","qualname":"::pso::graphics::LogicOp","value":"LogicOp::{Clear, And, AndReverse, Copy, AndInverted, NoOp, Xor, Or, Nor, Equivalent, Invert, OrReverse, CopyInverted, OrInverted, Nand, Set}","parent":null,"children":[{"krate":0,"index":17009},{"krate":0,"index":17012},{"krate":0,"index":17015},{"krate":0,"index":17018},{"krate":0,"index":17021},{"krate":0,"index":17024},{"krate":0,"index":17027},{"krate":0,"index":17030},{"krate":0,"index":17033},{"krate":0,"index":17036},{"krate":0,"index":17039},{"krate":0,"index":17042},{"krate":0,"index":17045},{"krate":0,"index":17048},{"krate":0,"index":17051},{"krate":0,"index":17054}],"decl_id":null,"docs":" Logic operations used for specifying blend equations.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219223,"byte_end":219245,"line_start":245,"line_end":245,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1057},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219546,"byte_end":219556,"line_start":266,"line_end":266,"column_start":10,"column_end":20},"name":"SampleMask","qualname":"::pso::graphics::SampleMask","value":"u64","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17138},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219615,"byte_end":219628,"line_start":270,"line_end":270,"column_start":12,"column_end":25},"name":"Multisampling","qualname":"::pso::graphics::Multisampling","value":"Multisampling { rasterization_samples, sample_shading, sample_mask, alpha_coverage, alpha_to_one }","parent":null,"children":[{"krate":0,"index":17139},{"krate":0,"index":17140},{"krate":0,"index":17141},{"krate":0,"index":17142},{"krate":0,"index":17143}],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17139},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219647,"byte_end":219668,"line_start":272,"line_end":272,"column_start":9,"column_end":30},"name":"rasterization_samples","qualname":"::pso::graphics::Multisampling::rasterization_samples","value":"u8","parent":{"krate":0,"index":17138},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17140},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219705,"byte_end":219719,"line_start":274,"line_end":274,"column_start":9,"column_end":23},"name":"sample_shading","qualname":"::pso::graphics::Multisampling::sample_shading","value":"std::option::Option<f32>","parent":{"krate":0,"index":17138},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17141},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":219750,"byte_end":219761,"line_start":276,"line_end":276,"column_start":9,"column_end":20},"name":"sample_mask","qualname":"::pso::graphics::Multisampling::sample_mask","value":"u64","parent":{"krate":0,"index":17138},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17142},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":220071,"byte_end":220085,"line_start":280,"line_end":280,"column_start":9,"column_end":23},"name":"alpha_coverage","qualname":"::pso::graphics::Multisampling::alpha_coverage","value":"bool","parent":{"krate":0,"index":17138},"children":[],"decl_id":null,"docs":" Toggles alpha-to-coverage multisampling, which can produce nicer edges\n when many partially-transparent polygons are overlapping.\n See [here]( https://msdn.microsoft.com/en-us/library/windows/desktop/bb205072(v=vs.85).aspx#Alpha_To_Coverage) for a full description.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17143},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":220109,"byte_end":220121,"line_start":282,"line_end":282,"column_start":9,"column_end":21},"name":"alpha_to_one","qualname":"::pso::graphics::Multisampling::alpha_to_one","value":"bool","parent":{"krate":0,"index":17138},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1061},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":220317,"byte_end":220325,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"Location","qualname":"::pso::input_assembler::Location","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Shader binding location.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1062},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":220372,"byte_end":220383,"line_start":10,"line_end":10,"column_start":10,"column_end":21},"name":"BufferIndex","qualname":"::pso::input_assembler::BufferIndex","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Index of a vertex buffer.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1063},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":220466,"byte_end":220476,"line_start":12,"line_end":12,"column_start":10,"column_end":20},"name":"ElemOffset","qualname":"::pso::input_assembler::ElemOffset","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Offset of an attribute from the start of the buffer, in bytes\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1064},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":220539,"byte_end":220549,"line_start":14,"line_end":14,"column_start":10,"column_end":20},"name":"ElemStride","qualname":"::pso::input_assembler::ElemStride","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Offset between attribute values, in bytes\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1065},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":220637,"byte_end":220649,"line_start":16,"line_end":16,"column_start":10,"column_end":22},"name":"InstanceRate","qualname":"::pso::input_assembler::InstanceRate","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Number of instances between each advancement of the vertex buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17152},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":220941,"byte_end":220947,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Vertex","qualname":"::pso::input_assembler::VertexInputRate::Vertex","value":"VertexInputRate::Vertex","parent":{"krate":0,"index":17151},"children":[],"decl_id":null,"docs":" Advance the buffer after every vertex\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17154},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":221001,"byte_end":221009,"line_start":25,"line_end":25,"column_start":5,"column_end":13},"name":"Instance","qualname":"::pso::input_assembler::VertexInputRate::Instance","value":"VertexInputRate::Instance(InstanceRate)","parent":{"krate":0,"index":17151},"children":[],"decl_id":null,"docs":" Advance the buffer after every instance\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":17151},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":220873,"byte_end":220888,"line_start":21,"line_end":21,"column_start":10,"column_end":25},"name":"VertexInputRate","qualname":"::pso::input_assembler::VertexInputRate","value":"VertexInputRate::{Vertex, Instance}","parent":null,"children":[{"krate":0,"index":17152},{"krate":0,"index":17154}],"decl_id":null,"docs":" The rate at which to advance input data to shaders for the given buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":221113,"byte_end":221120,"line_start":30,"line_end":30,"column_start":12,"column_end":19},"name":"as_uint","qualname":"<VertexInputRate>::as_uint","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the numeric representation of the rate\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17223},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":221453,"byte_end":221460,"line_start":41,"line_end":41,"column_start":12,"column_end":19},"name":"Element","qualname":"::pso::input_assembler::Element","value":"Element { format, offset }","parent":null,"children":[{"krate":0,"index":17225},{"krate":0,"index":17226}],"decl_id":null,"docs":" A struct element descriptor.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17225},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":221497,"byte_end":221503,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"name":"format","qualname":"::pso::input_assembler::Element::format","value":"F","parent":{"krate":0,"index":17223},"children":[],"decl_id":null,"docs":" Element format\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17226},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":221577,"byte_end":221583,"line_start":45,"line_end":45,"column_start":9,"column_end":15},"name":"offset","qualname":"::pso::input_assembler::Element::offset","value":"u32","parent":{"krate":0,"index":17223},"children":[],"decl_id":null,"docs":" Offset from the beginning of the container, in bytes\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17313},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":221860,"byte_end":221876,"line_start":52,"line_end":52,"column_start":12,"column_end":28},"name":"VertexBufferDesc","qualname":"::pso::input_assembler::VertexBufferDesc","value":"VertexBufferDesc { binding, stride, rate }","parent":null,"children":[{"krate":0,"index":17314},{"krate":0,"index":17315},{"krate":0,"index":17316}],"decl_id":null,"docs":" Vertex buffer description. Notably, completely separate from resource `Descriptor`s\n used in `DescriptorSet`s.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17314},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":222080,"byte_end":222087,"line_start":56,"line_end":56,"column_start":9,"column_end":16},"name":"binding","qualname":"::pso::input_assembler::VertexBufferDesc::binding","value":"u32","parent":{"krate":0,"index":17313},"children":[],"decl_id":null,"docs":" Binding number of this vertex buffer. This binding number is\n used only for vertex buffers, and is completely separate from\n `Descriptor` and `DescriptorSet` bind points.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17315},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":222220,"byte_end":222226,"line_start":59,"line_end":59,"column_start":9,"column_end":15},"name":"stride","qualname":"::pso::input_assembler::VertexBufferDesc::stride","value":"u32","parent":{"krate":0,"index":17313},"children":[],"decl_id":null,"docs":" Total container size, in bytes.\n Specifies the byte distance between two consecutive elements.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17316},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":222417,"byte_end":222421,"line_start":64,"line_end":64,"column_start":9,"column_end":13},"name":"rate","qualname":"::pso::input_assembler::VertexBufferDesc::rate","value":"pso::input_assembler::VertexInputRate","parent":{"krate":0,"index":17313},"children":[],"decl_id":null,"docs":" The rate at which to advance data for the given buffer","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17397},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":222706,"byte_end":222719,"line_start":71,"line_end":71,"column_start":12,"column_end":25},"name":"AttributeDesc","qualname":"::pso::input_assembler::AttributeDesc","value":"AttributeDesc { location, binding, element }","parent":null,"children":[{"krate":0,"index":17398},{"krate":0,"index":17399},{"krate":0,"index":17400}],"decl_id":null,"docs":" Vertex attribute description. Notably, completely separate from resource `Descriptor`s\n used in `DescriptorSet`s.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17398},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":223028,"byte_end":223036,"line_start":76,"line_end":76,"column_start":9,"column_end":17},"name":"location","qualname":"::pso::input_assembler::AttributeDesc::location","value":"u32","parent":{"krate":0,"index":17397},"children":[],"decl_id":null,"docs":" Attribute binding location in the shader. Attribute locations are\n shared between all vertex buffers in a pipeline, meaning that even if the\n data for this attribute comes from a different vertex buffer, it still cannot\n share the same location with another attribute.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17399},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":223112,"byte_end":223119,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"binding","qualname":"::pso::input_assembler::AttributeDesc::binding","value":"u32","parent":{"krate":0,"index":17397},"children":[],"decl_id":null,"docs":" Binding number of the associated vertex buffer.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17400},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":223181,"byte_end":223188,"line_start":80,"line_end":80,"column_start":9,"column_end":16},"name":"element","qualname":"::pso::input_assembler::AttributeDesc::element","value":"pso::input_assembler::Element<format::Format>","parent":{"krate":0,"index":17397},"children":[],"decl_id":null,"docs":" Attribute element description.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17482},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":223753,"byte_end":223761,"line_start":94,"line_end":94,"column_start":5,"column_end":13},"name":"Disabled","qualname":"::pso::input_assembler::PrimitiveRestart::Disabled","value":"PrimitiveRestart::Disabled","parent":{"krate":0,"index":17481},"children":[],"decl_id":null,"docs":" No primitive restart.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17484},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":223839,"byte_end":223842,"line_start":96,"line_end":96,"column_start":5,"column_end":8},"name":"U16","qualname":"::pso::input_assembler::PrimitiveRestart::U16","value":"PrimitiveRestart::U16","parent":{"krate":0,"index":17481},"children":[],"decl_id":null,"docs":" Primitive restart using a 16-bit index value (`std::u16::MAX`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17486},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":223919,"byte_end":223922,"line_start":98,"line_end":98,"column_start":5,"column_end":8},"name":"U32","qualname":"::pso::input_assembler::PrimitiveRestart::U32","value":"PrimitiveRestart::U32","parent":{"krate":0,"index":17481},"children":[],"decl_id":null,"docs":" Primitive restart using a 32-bit index value (`std::u32::MAX`)\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":17481},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":223700,"byte_end":223716,"line_start":92,"line_end":92,"column_start":10,"column_end":26},"name":"PrimitiveRestart","qualname":"::pso::input_assembler::PrimitiveRestart","value":"PrimitiveRestart::{Disabled, U16, U32}","parent":null,"children":[{"krate":0,"index":17482},{"krate":0,"index":17484},{"krate":0,"index":17486}],"decl_id":null,"docs":" Describes whether or not primitive restart is supported for\n an input assembler. Primitive restart is a feature that\n allows a mark to be placed in an index buffer where it is\n is \"broken\" into multiple pieces of geometry.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17551},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":224118,"byte_end":224136,"line_start":104,"line_end":104,"column_start":12,"column_end":30},"name":"InputAssemblerDesc","qualname":"::pso::input_assembler::InputAssemblerDesc","value":"InputAssemblerDesc { primitive, primitive_restart }","parent":null,"children":[{"krate":0,"index":17552},{"krate":0,"index":17553}],"decl_id":null,"docs":" All the information needed to create an input assembler.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17552},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":224177,"byte_end":224186,"line_start":106,"line_end":106,"column_start":9,"column_end":18},"name":"primitive","qualname":"::pso::input_assembler::InputAssemblerDesc::primitive","value":"Primitive","parent":{"krate":0,"index":17551},"children":[],"decl_id":null,"docs":" Type of the primitive\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17553},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":224252,"byte_end":224269,"line_start":108,"line_end":108,"column_start":9,"column_end":26},"name":"primitive_restart","qualname":"::pso::input_assembler::InputAssemblerDesc::primitive_restart","value":"pso::input_assembler::PrimitiveRestart","parent":{"krate":0,"index":17551},"children":[],"decl_id":null,"docs":" The primitive restart specification.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":224390,"byte_end":224393,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<InputAssemblerDesc>::new","value":"fn (primitive: Primitive) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new IA descriptor without primitive restart\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17625},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":224991,"byte_end":224996,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Never","qualname":"::pso::output_merger::Comparison::Never","value":"Comparison::Never","parent":{"krate":0,"index":17624},"children":[],"decl_id":null,"docs":" `false`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17628},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225022,"byte_end":225026,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Less","qualname":"::pso::output_merger::Comparison::Less","value":"Comparison::Less","parent":{"krate":0,"index":17624},"children":[],"decl_id":null,"docs":" `x < y`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17631},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225053,"byte_end":225058,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Equal","qualname":"::pso::output_merger::Comparison::Equal","value":"Comparison::Equal","parent":{"krate":0,"index":17624},"children":[],"decl_id":null,"docs":" `x == y`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17634},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225085,"byte_end":225094,"line_start":19,"line_end":19,"column_start":5,"column_end":14},"name":"LessEqual","qualname":"::pso::output_merger::Comparison::LessEqual","value":"Comparison::LessEqual","parent":{"krate":0,"index":17624},"children":[],"decl_id":null,"docs":" `x <= y`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17637},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225120,"byte_end":225127,"line_start":21,"line_end":21,"column_start":5,"column_end":12},"name":"Greater","qualname":"::pso::output_merger::Comparison::Greater","value":"Comparison::Greater","parent":{"krate":0,"index":17624},"children":[],"decl_id":null,"docs":" `x > y`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17640},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225154,"byte_end":225162,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"name":"NotEqual","qualname":"::pso::output_merger::Comparison::NotEqual","value":"Comparison::NotEqual","parent":{"krate":0,"index":17624},"children":[],"decl_id":null,"docs":" `x != y`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17643},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225189,"byte_end":225201,"line_start":25,"line_end":25,"column_start":5,"column_end":17},"name":"GreaterEqual","qualname":"::pso::output_merger::Comparison::GreaterEqual","value":"Comparison::GreaterEqual","parent":{"krate":0,"index":17624},"children":[],"decl_id":null,"docs":" `x >= y`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17646},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225226,"byte_end":225232,"line_start":27,"line_end":27,"column_start":5,"column_end":11},"name":"Always","qualname":"::pso::output_merger::Comparison::Always","value":"Comparison::Always","parent":{"krate":0,"index":17624},"children":[],"decl_id":null,"docs":" `true`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":17624},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":224958,"byte_end":224968,"line_start":11,"line_end":11,"column_start":10,"column_end":20},"name":"Comparison","qualname":"::pso::output_merger::Comparison","value":"Comparison::{Never, Less, Equal, LessEqual, Greater, NotEqual, GreaterEqual, Always}","parent":null,"children":[{"krate":0,"index":17625},{"krate":0,"index":17628},{"krate":0,"index":17631},{"krate":0,"index":17634},{"krate":0,"index":17637},{"krate":0,"index":17640},{"krate":0,"index":17643},{"krate":0,"index":17646}],"decl_id":null,"docs":" A pixel-wise comparison function.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17722},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225368,"byte_end":225377,"line_start":33,"line_end":33,"column_start":16,"column_end":25},"name":"ColorMask","qualname":"::pso::output_merger::ColorMask","value":"ColorMask {  }","parent":null,"children":[{"krate":0,"index":17723}],"decl_id":null,"docs":" Target output color mask.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":17810},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225419,"byte_end":225422,"line_start":35,"line_end":35,"column_start":15,"column_end":18},"name":"RED","qualname":"::pso::output_merger::ColorMask::RED","value":"ColorMask","parent":{"krate":0,"index":17809},"children":[],"decl_id":null,"docs":" Red mask\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":17811},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225471,"byte_end":225476,"line_start":37,"line_end":37,"column_start":15,"column_end":20},"name":"GREEN","qualname":"::pso::output_merger::ColorMask::GREEN","value":"ColorMask","parent":{"krate":0,"index":17809},"children":[],"decl_id":null,"docs":" Green mask\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":17812},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225522,"byte_end":225526,"line_start":39,"line_end":39,"column_start":15,"column_end":19},"name":"BLUE","qualname":"::pso::output_merger::ColorMask::BLUE","value":"ColorMask","parent":{"krate":0,"index":17809},"children":[],"decl_id":null,"docs":" Blue mask\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":17813},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225582,"byte_end":225587,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"name":"ALPHA","qualname":"::pso::output_merger::ColorMask::ALPHA","value":"ColorMask","parent":{"krate":0,"index":17809},"children":[],"decl_id":null,"docs":" Alpha channel mask\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":17814},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225645,"byte_end":225650,"line_start":43,"line_end":43,"column_start":15,"column_end":20},"name":"COLOR","qualname":"::pso::output_merger::ColorMask::COLOR","value":"ColorMask","parent":{"krate":0,"index":17809},"children":[],"decl_id":null,"docs":" Mask for RGB channels\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":17815},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225704,"byte_end":225707,"line_start":45,"line_end":45,"column_start":15,"column_end":18},"name":"ALL","qualname":"::pso::output_merger::ColorMask::ALL","value":"ColorMask","parent":{"krate":0,"index":17809},"children":[],"decl_id":null,"docs":" Mask all channels\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":17816},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225763,"byte_end":225767,"line_start":47,"line_end":47,"column_start":15,"column_end":19},"name":"NONE","qualname":"::pso::output_merger::ColorMask::NONE","value":"ColorMask","parent":{"krate":0,"index":17809},"children":[],"decl_id":null,"docs":" Mask no channels.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17884},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226209,"byte_end":226213,"line_start":64,"line_end":64,"column_start":5,"column_end":9},"name":"Zero","qualname":"::pso::output_merger::Factor::Zero","value":"Factor::Zero","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17887},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226223,"byte_end":226226,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"One","qualname":"::pso::output_merger::Factor::One","value":"Factor::One","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17890},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226236,"byte_end":226244,"line_start":66,"line_end":66,"column_start":5,"column_end":13},"name":"SrcColor","qualname":"::pso::output_merger::Factor::SrcColor","value":"Factor::SrcColor","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17893},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226254,"byte_end":226270,"line_start":67,"line_end":67,"column_start":5,"column_end":21},"name":"OneMinusSrcColor","qualname":"::pso::output_merger::Factor::OneMinusSrcColor","value":"Factor::OneMinusSrcColor","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17896},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226280,"byte_end":226288,"line_start":68,"line_end":68,"column_start":5,"column_end":13},"name":"DstColor","qualname":"::pso::output_merger::Factor::DstColor","value":"Factor::DstColor","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17899},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226298,"byte_end":226314,"line_start":69,"line_end":69,"column_start":5,"column_end":21},"name":"OneMinusDstColor","qualname":"::pso::output_merger::Factor::OneMinusDstColor","value":"Factor::OneMinusDstColor","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17902},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226324,"byte_end":226332,"line_start":70,"line_end":70,"column_start":5,"column_end":13},"name":"SrcAlpha","qualname":"::pso::output_merger::Factor::SrcAlpha","value":"Factor::SrcAlpha","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17905},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226342,"byte_end":226358,"line_start":71,"line_end":71,"column_start":5,"column_end":21},"name":"OneMinusSrcAlpha","qualname":"::pso::output_merger::Factor::OneMinusSrcAlpha","value":"Factor::OneMinusSrcAlpha","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17908},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226368,"byte_end":226376,"line_start":72,"line_end":72,"column_start":5,"column_end":13},"name":"DstAlpha","qualname":"::pso::output_merger::Factor::DstAlpha","value":"Factor::DstAlpha","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17911},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226386,"byte_end":226402,"line_start":73,"line_end":73,"column_start":5,"column_end":21},"name":"OneMinusDstAlpha","qualname":"::pso::output_merger::Factor::OneMinusDstAlpha","value":"Factor::OneMinusDstAlpha","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17914},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226412,"byte_end":226422,"line_start":74,"line_end":74,"column_start":5,"column_end":15},"name":"ConstColor","qualname":"::pso::output_merger::Factor::ConstColor","value":"Factor::ConstColor","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17917},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226433,"byte_end":226451,"line_start":75,"line_end":75,"column_start":5,"column_end":23},"name":"OneMinusConstColor","qualname":"::pso::output_merger::Factor::OneMinusConstColor","value":"Factor::OneMinusConstColor","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17920},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226462,"byte_end":226472,"line_start":76,"line_end":76,"column_start":5,"column_end":15},"name":"ConstAlpha","qualname":"::pso::output_merger::Factor::ConstAlpha","value":"Factor::ConstAlpha","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17923},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226483,"byte_end":226501,"line_start":77,"line_end":77,"column_start":5,"column_end":23},"name":"OneMinusConstAlpha","qualname":"::pso::output_merger::Factor::OneMinusConstAlpha","value":"Factor::OneMinusConstAlpha","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17926},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226512,"byte_end":226528,"line_start":78,"line_end":78,"column_start":5,"column_end":21},"name":"SrcAlphaSaturate","qualname":"::pso::output_merger::Factor::SrcAlphaSaturate","value":"Factor::SrcAlphaSaturate","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17929},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226539,"byte_end":226548,"line_start":79,"line_end":79,"column_start":5,"column_end":14},"name":"Src1Color","qualname":"::pso::output_merger::Factor::Src1Color","value":"Factor::Src1Color","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17932},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226559,"byte_end":226576,"line_start":80,"line_end":80,"column_start":5,"column_end":22},"name":"OneMinusSrc1Color","qualname":"::pso::output_merger::Factor::OneMinusSrc1Color","value":"Factor::OneMinusSrc1Color","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17935},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226587,"byte_end":226596,"line_start":81,"line_end":81,"column_start":5,"column_end":14},"name":"Src1Alpha","qualname":"::pso::output_merger::Factor::Src1Alpha","value":"Factor::Src1Alpha","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17938},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226607,"byte_end":226624,"line_start":82,"line_end":82,"column_start":5,"column_end":22},"name":"OneMinusSrc1Alpha","qualname":"::pso::output_merger::Factor::OneMinusSrc1Alpha","value":"Factor::OneMinusSrc1Alpha","parent":{"krate":0,"index":17883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":17883},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226196,"byte_end":226202,"line_start":63,"line_end":63,"column_start":10,"column_end":16},"name":"Factor","qualname":"::pso::output_merger::Factor","value":"Factor::{Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstColor, OneMinusConstColor, ConstAlpha, OneMinusConstAlpha, SrcAlphaSaturate, Src1Color, OneMinusSrc1Color, Src1Alpha, OneMinusSrc1Alpha}","parent":null,"children":[{"krate":0,"index":17884},{"krate":0,"index":17887},{"krate":0,"index":17890},{"krate":0,"index":17893},{"krate":0,"index":17896},{"krate":0,"index":17899},{"krate":0,"index":17902},{"krate":0,"index":17905},{"krate":0,"index":17908},{"krate":0,"index":17911},{"krate":0,"index":17914},{"krate":0,"index":17917},{"krate":0,"index":17920},{"krate":0,"index":17923},{"krate":0,"index":17926},{"krate":0,"index":17929},{"krate":0,"index":17932},{"krate":0,"index":17935},{"krate":0,"index":17938}],"decl_id":null,"docs":" Defines the possible blending factors.\n During blending, the source or destination fragment may be\n multiplied by a factor to produce the final result.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226033,"byte_end":226055,"line_start":60,"line_end":60,"column_start":1,"column_end":23}}]},{"kind":"StructVariant","id":{"krate":0,"index":18037},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226947,"byte_end":226950,"line_start":92,"line_end":92,"column_start":5,"column_end":8},"name":"Add","qualname":"::pso::output_merger::BlendOp::Add","value":"BlendOp::Add { src, dst }","parent":{"krate":0,"index":18036},"children":[],"decl_id":null,"docs":" Adds source and destination.\n Source and destination are multiplied by factors before addition.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":18040},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":227105,"byte_end":227108,"line_start":95,"line_end":95,"column_start":5,"column_end":8},"name":"Sub","qualname":"::pso::output_merger::BlendOp::Sub","value":"BlendOp::Sub { src, dst }","parent":{"krate":0,"index":18036},"children":[],"decl_id":null,"docs":" Subtracts destination from source.\n Source and destination are multiplied by factors before subtraction.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":18043},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":227263,"byte_end":227269,"line_start":98,"line_end":98,"column_start":5,"column_end":11},"name":"RevSub","qualname":"::pso::output_merger::BlendOp::RevSub","value":"BlendOp::RevSub { src, dst }","parent":{"krate":0,"index":18036},"children":[],"decl_id":null,"docs":" Subtracts source from destination.\n Source and destination are multiplied by factors before subtraction.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18046},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":227368,"byte_end":227371,"line_start":100,"line_end":100,"column_start":5,"column_end":8},"name":"Min","qualname":"::pso::output_merger::BlendOp::Min","value":"BlendOp::Min","parent":{"krate":0,"index":18036},"children":[],"decl_id":null,"docs":" Component-wise minimum value of source and destination.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18048},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":227441,"byte_end":227444,"line_start":102,"line_end":102,"column_start":5,"column_end":8},"name":"Max","qualname":"::pso::output_merger::BlendOp::Max","value":"BlendOp::Max","parent":{"krate":0,"index":18036},"children":[],"decl_id":null,"docs":" Component-wise maximum value of source and destination.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":18036},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226822,"byte_end":226829,"line_start":89,"line_end":89,"column_start":10,"column_end":17},"name":"BlendOp","qualname":"::pso::output_merger::BlendOp","value":"BlendOp::{Add, Sub, RevSub, Min, Max}","parent":null,"children":[{"krate":0,"index":18037},{"krate":0,"index":18040},{"krate":0,"index":18043},{"krate":0,"index":18046},{"krate":0,"index":18048}],"decl_id":null,"docs":" Blending operations.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":226659,"byte_end":226681,"line_start":86,"line_end":86,"column_start":1,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":1076},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":227533,"byte_end":227540,"line_start":107,"line_end":107,"column_start":15,"column_end":22},"name":"REPLACE","qualname":"::pso::output_merger::BlendOp::REPLACE","value":"Self","parent":{"krate":0,"index":1075},"children":[],"decl_id":null,"docs":" Replace the destination value with the source.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1077},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":227687,"byte_end":227690,"line_start":112,"line_end":112,"column_start":15,"column_end":18},"name":"ADD","qualname":"::pso::output_merger::BlendOp::ADD","value":"Self","parent":{"krate":0,"index":1075},"children":[],"decl_id":null,"docs":" Add the source and destination together.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1078},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":227844,"byte_end":227849,"line_start":117,"line_end":117,"column_start":15,"column_end":20},"name":"ALPHA","qualname":"::pso::output_merger::BlendOp::ALPHA","value":"Self","parent":{"krate":0,"index":1075},"children":[],"decl_id":null,"docs":" Alpha blend the source and destination together.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1079},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":228035,"byte_end":228054,"line_start":122,"line_end":122,"column_start":15,"column_end":34},"name":"PREMULTIPLIED_ALPHA","qualname":"::pso::output_merger::BlendOp::PREMULTIPLIED_ALPHA","value":"Self","parent":{"krate":0,"index":1075},"children":[],"decl_id":null,"docs":" Alpha blend a premultiplied-alpha source with the destination.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":18243},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":228426,"byte_end":228428,"line_start":134,"line_end":134,"column_start":5,"column_end":7},"name":"On","qualname":"::pso::output_merger::BlendState::On","value":"BlendState::On { color, alpha }","parent":{"krate":0,"index":18242},"children":[],"decl_id":null,"docs":" Enabled blending\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18246},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":228641,"byte_end":228644,"line_start":141,"line_end":141,"column_start":5,"column_end":8},"name":"Off","qualname":"::pso::output_merger::BlendState::Off","value":"BlendState::Off","parent":{"krate":0,"index":18242},"children":[],"decl_id":null,"docs":" Disabled blending\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":18242},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":228384,"byte_end":228394,"line_start":132,"line_end":132,"column_start":10,"column_end":20},"name":"BlendState","qualname":"::pso::output_merger::BlendState","value":"BlendState::{On, Off}","parent":null,"children":[{"krate":0,"index":18243},{"krate":0,"index":18246}],"decl_id":null,"docs":" Specifies whether to use blending, and if so,\n which operatiosn to use for color and alpha channels.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1081},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":228707,"byte_end":228710,"line_start":146,"line_end":146,"column_start":15,"column_end":18},"name":"ADD","qualname":"::pso::output_merger::BlendState::ADD","value":"Self","parent":{"krate":0,"index":1080},"children":[],"decl_id":null,"docs":" Additive blending\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1082},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":228847,"byte_end":228855,"line_start":151,"line_end":151,"column_start":15,"column_end":23},"name":"MULTIPLY","qualname":"::pso::output_merger::BlendState::MULTIPLY","value":"Self","parent":{"krate":0,"index":1080},"children":[],"decl_id":null,"docs":" Multiplicative blending\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":229140,"byte_end":229145,"line_start":162,"line_end":162,"column_start":15,"column_end":20},"name":"ALPHA","qualname":"::pso::output_merger::BlendState::ALPHA","value":"Self","parent":{"krate":0,"index":1080},"children":[],"decl_id":null,"docs":" Alpha blending.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1084},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":229307,"byte_end":229326,"line_start":167,"line_end":167,"column_start":15,"column_end":34},"name":"PREMULTIPLIED_ALPHA","qualname":"::pso::output_merger::BlendState::PREMULTIPLIED_ALPHA","value":"Self","parent":{"krate":0,"index":1080},"children":[],"decl_id":null,"docs":" Pre-multiplied alpha blending.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":18342},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":229709,"byte_end":229723,"line_start":182,"line_end":182,"column_start":12,"column_end":26},"name":"ColorBlendDesc","qualname":"::pso::output_merger::ColorBlendDesc","value":"","parent":null,"children":[],"decl_id":null,"docs":" PSO color target descriptor.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1088},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":229868,"byte_end":229873,"line_start":186,"line_end":186,"column_start":15,"column_end":20},"name":"EMPTY","qualname":"::pso::output_merger::ColorBlendDesc::EMPTY","value":"Self","parent":{"krate":0,"index":1087},"children":[],"decl_id":null,"docs":" Empty blend descriptor just writes out the color without blending.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":18385},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":230143,"byte_end":230145,"line_start":194,"line_end":194,"column_start":5,"column_end":7},"name":"On","qualname":"::pso::output_merger::DepthTest::On","value":"DepthTest::On { fun, write }","parent":{"krate":0,"index":18384},"children":[],"decl_id":null,"docs":" Enabled depth testing.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18388},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":230342,"byte_end":230345,"line_start":201,"line_end":201,"column_start":5,"column_end":8},"name":"Off","qualname":"::pso::output_merger::DepthTest::Off","value":"DepthTest::Off","parent":{"krate":0,"index":18384},"children":[],"decl_id":null,"docs":" Disabled depth testing.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":18384},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":230096,"byte_end":230105,"line_start":192,"line_end":192,"column_start":10,"column_end":19},"name":"DepthTest","qualname":"::pso::output_merger::DepthTest","value":"DepthTest::{On, Off}","parent":null,"children":[{"krate":0,"index":18385},{"krate":0,"index":18388}],"decl_id":null,"docs":" Depth test state.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1092},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":230509,"byte_end":230513,"line_start":212,"line_end":212,"column_start":15,"column_end":19},"name":"FAIL","qualname":"::pso::output_merger::DepthTest::FAIL","value":"Self","parent":{"krate":0,"index":1091},"children":[],"decl_id":null,"docs":" A depth test that always fails.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":230762,"byte_end":230771,"line_start":219,"line_end":219,"column_start":15,"column_end":24},"name":"PASS_TEST","qualname":"::pso::output_merger::DepthTest::PASS_TEST","value":"Self","parent":{"krate":0,"index":1091},"children":[],"decl_id":null,"docs":" A depth test that always succeeds but doesn't\n write to the depth buffer\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1094},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":230965,"byte_end":230975,"line_start":225,"line_end":225,"column_start":15,"column_end":25},"name":"PASS_WRITE","qualname":"::pso::output_merger::DepthTest::PASS_WRITE","value":"Self","parent":{"krate":0,"index":1091},"children":[],"decl_id":null,"docs":" A depth test that always succeeds and writes its result\n to the depth buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18497},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":231344,"byte_end":231348,"line_start":237,"line_end":237,"column_start":5,"column_end":9},"name":"Keep","qualname":"::pso::output_merger::StencilOp::Keep","value":"StencilOp::Keep","parent":{"krate":0,"index":18496},"children":[],"decl_id":null,"docs":" Keep the current value in the stencil buffer (no change).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18500},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":231411,"byte_end":231415,"line_start":239,"line_end":239,"column_start":5,"column_end":9},"name":"Zero","qualname":"::pso::output_merger::StencilOp::Zero","value":"StencilOp::Zero","parent":{"krate":0,"index":18496},"children":[],"decl_id":null,"docs":" Set the value in the stencil buffer to zero.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18503},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":231497,"byte_end":231504,"line_start":241,"line_end":241,"column_start":5,"column_end":12},"name":"Replace","qualname":"::pso::output_merger::StencilOp::Replace","value":"StencilOp::Replace","parent":{"krate":0,"index":18496},"children":[],"decl_id":null,"docs":" Set the stencil buffer value to `reference` from `StencilFace`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18506},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":231589,"byte_end":231603,"line_start":243,"line_end":243,"column_start":5,"column_end":19},"name":"IncrementClamp","qualname":"::pso::output_merger::StencilOp::IncrementClamp","value":"StencilOp::IncrementClamp","parent":{"krate":0,"index":18496},"children":[],"decl_id":null,"docs":" Increment the stencil buffer value, clamping to its maximum value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18509},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":231688,"byte_end":231702,"line_start":245,"line_end":245,"column_start":5,"column_end":19},"name":"DecrementClamp","qualname":"::pso::output_merger::StencilOp::DecrementClamp","value":"StencilOp::DecrementClamp","parent":{"krate":0,"index":18496},"children":[],"decl_id":null,"docs":" Decrement the stencil buffer value, clamping to its minimum value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18512},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":231776,"byte_end":231782,"line_start":247,"line_end":247,"column_start":5,"column_end":11},"name":"Invert","qualname":"::pso::output_merger::StencilOp::Invert","value":"StencilOp::Invert","parent":{"krate":0,"index":18496},"children":[],"decl_id":null,"docs":" Bitwise invert the current value in the stencil buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18515},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":231870,"byte_end":231883,"line_start":249,"line_end":249,"column_start":5,"column_end":18},"name":"IncrementWrap","qualname":"::pso::output_merger::StencilOp::IncrementWrap","value":"StencilOp::IncrementWrap","parent":{"krate":0,"index":18496},"children":[],"decl_id":null,"docs":" Increment the stencil buffer value, wrapping around to 0 on overflow.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18518},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":231987,"byte_end":232000,"line_start":251,"line_end":251,"column_start":5,"column_end":18},"name":"DecrementWrap","qualname":"::pso::output_merger::StencilOp::DecrementWrap","value":"StencilOp::DecrementWrap","parent":{"krate":0,"index":18496},"children":[],"decl_id":null,"docs":" Decrement the stencil buffer value, wrapping around to the maximum value on overflow.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":18496},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":231262,"byte_end":231271,"line_start":235,"line_end":235,"column_start":10,"column_end":19},"name":"StencilOp","qualname":"::pso::output_merger::StencilOp","value":"StencilOp::{Keep, Zero, Replace, IncrementClamp, DecrementClamp, Invert, IncrementWrap, DecrementWrap}","parent":null,"children":[{"krate":0,"index":18497},{"krate":0,"index":18500},{"krate":0,"index":18503},{"krate":0,"index":18506},{"krate":0,"index":18509},{"krate":0,"index":18512},{"krate":0,"index":18515},{"krate":0,"index":18518}],"decl_id":null,"docs":" The operation to use for stencil masking.\n","sig":null,"attributes":[{"value":"repr(u8)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":231110,"byte_end":231121,"line_start":232,"line_end":232,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":18594},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":232206,"byte_end":232217,"line_start":257,"line_end":257,"column_start":12,"column_end":23},"name":"StencilFace","qualname":"::pso::output_merger::StencilFace","value":"StencilFace { fun, mask_read, mask_write, op_fail, op_depth_fail, op_pass, reference }","parent":null,"children":[{"krate":0,"index":18595},{"krate":0,"index":18596},{"krate":0,"index":18597},{"krate":0,"index":18598},{"krate":0,"index":18599},{"krate":0,"index":18600},{"krate":0,"index":18601}],"decl_id":null,"docs":" Complete stencil state for a given side of a face.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":18595},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":232304,"byte_end":232307,"line_start":259,"line_end":259,"column_start":9,"column_end":12},"name":"fun","qualname":"::pso::output_merger::StencilFace::fun","value":"pso::output_merger::Comparison","parent":{"krate":0,"index":18594},"children":[],"decl_id":null,"docs":" Comparison function to use to determine if the stencil test passes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":18596},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":232474,"byte_end":232483,"line_start":262,"line_end":262,"column_start":9,"column_end":18},"name":"mask_read","qualname":"::pso::output_merger::StencilFace::mask_read","value":"pso::State<u32>","parent":{"krate":0,"index":18594},"children":[],"decl_id":null,"docs":" A mask that is ANDd with both the stencil buffer value and the reference value when they\n are read before doing the stencil test.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":18597},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":232603,"byte_end":232613,"line_start":264,"line_end":264,"column_start":9,"column_end":19},"name":"mask_write","qualname":"::pso::output_merger::StencilFace::mask_write","value":"pso::State<u32>","parent":{"krate":0,"index":18594},"children":[],"decl_id":null,"docs":" A mask that is ANDd with the stencil value before writing to the stencil buffer.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":18598},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":232700,"byte_end":232707,"line_start":266,"line_end":266,"column_start":9,"column_end":16},"name":"op_fail","qualname":"::pso::output_merger::StencilFace::op_fail","value":"pso::output_merger::StencilOp","parent":{"krate":0,"index":18594},"children":[],"decl_id":null,"docs":" What operation to do if the stencil test fails.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":18599},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":232810,"byte_end":232823,"line_start":268,"line_end":268,"column_start":9,"column_end":22},"name":"op_depth_fail","qualname":"::pso::output_merger::StencilFace::op_depth_fail","value":"pso::output_merger::StencilOp","parent":{"krate":0,"index":18594},"children":[],"decl_id":null,"docs":" What operation to do if the stencil test passes but the depth test fails.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":18600},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":232914,"byte_end":232921,"line_start":270,"line_end":270,"column_start":9,"column_end":16},"name":"op_pass","qualname":"::pso::output_merger::StencilFace::op_pass","value":"pso::output_merger::StencilOp","parent":{"krate":0,"index":18594},"children":[],"decl_id":null,"docs":" What operation to do if both the depth and stencil test pass.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":18601},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":232994,"byte_end":233003,"line_start":272,"line_end":272,"column_start":9,"column_end":18},"name":"reference","qualname":"::pso::output_merger::StencilFace::reference","value":"pso::State<u32>","parent":{"krate":0,"index":18594},"children":[],"decl_id":null,"docs":" The reference value used for stencil tests.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":18707},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":233808,"byte_end":233810,"line_start":298,"line_end":298,"column_start":5,"column_end":7},"name":"On","qualname":"::pso::output_merger::StencilTest::On","value":"StencilTest::On { front, back }","parent":{"krate":0,"index":18706},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":18710},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":233879,"byte_end":233882,"line_start":302,"line_end":302,"column_start":5,"column_end":8},"name":"Off","qualname":"::pso::output_merger::StencilTest::Off","value":"StencilTest::Off","parent":{"krate":0,"index":18706},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":18706},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":233790,"byte_end":233801,"line_start":297,"line_end":297,"column_start":10,"column_end":21},"name":"StencilTest","qualname":"::pso::output_merger::StencilTest","value":"StencilTest::{On, Off}","parent":null,"children":[{"krate":0,"index":18707},{"krate":0,"index":18710}],"decl_id":null,"docs":" Defines a stencil test. Stencil testing is an operation\n performed to cull fragments;\n the new fragment is tested against the value held in the\n stencil buffer, and if the test fails the fragment is\n discarded.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":233644,"byte_end":233666,"line_start":294,"line_end":294,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":18806},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":234154,"byte_end":234170,"line_start":314,"line_end":314,"column_start":12,"column_end":28},"name":"DepthStencilDesc","qualname":"::pso::output_merger::DepthStencilDesc","value":"DepthStencilDesc { depth, depth_bounds, stencil }","parent":null,"children":[{"krate":0,"index":18807},{"krate":0,"index":18808},{"krate":0,"index":18809}],"decl_id":null,"docs":" PSO depth-stencil target descriptor.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":18807},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":234221,"byte_end":234226,"line_start":316,"line_end":316,"column_start":9,"column_end":14},"name":"depth","qualname":"::pso::output_merger::DepthStencilDesc::depth","value":"pso::output_merger::DepthTest","parent":{"krate":0,"index":18806},"children":[],"decl_id":null,"docs":" Optional depth testing/writing.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":18808},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":234284,"byte_end":234296,"line_start":318,"line_end":318,"column_start":9,"column_end":21},"name":"depth_bounds","qualname":"::pso::output_merger::DepthStencilDesc::depth_bounds","value":"bool","parent":{"krate":0,"index":18806},"children":[],"decl_id":null,"docs":" Enable depth bounds testing.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":18809},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":234340,"byte_end":234347,"line_start":320,"line_end":320,"column_start":9,"column_end":16},"name":"stencil","qualname":"::pso::output_merger::DepthStencilDesc::stencil","value":"pso::output_merger::StencilTest","parent":{"krate":0,"index":18806},"children":[],"decl_id":null,"docs":" Stencil test/write.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":18876},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":234472,"byte_end":234476,"line_start":326,"line_end":326,"column_start":16,"column_end":20},"name":"Face","qualname":"::pso::output_merger::Face","value":"Face {  }","parent":null,"children":[{"krate":0,"index":18877}],"decl_id":null,"docs":" Face.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":18960},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":234580,"byte_end":234584,"line_start":328,"line_end":328,"column_start":15,"column_end":19},"name":"NONE","qualname":"::pso::output_merger::Face::NONE","value":"Face","parent":{"krate":0,"index":18959},"children":[],"decl_id":null,"docs":" Empty face. TODO: remove when constexpr are stabilized to use empty()\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":18961},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":234630,"byte_end":234635,"line_start":330,"line_end":330,"column_start":15,"column_end":20},"name":"FRONT","qualname":"::pso::output_merger::Face::FRONT","value":"Face","parent":{"krate":0,"index":18959},"children":[],"decl_id":null,"docs":" Front face.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":18962},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":234680,"byte_end":234684,"line_start":332,"line_end":332,"column_start":15,"column_end":19},"name":"BACK","qualname":"::pso::output_merger::Face::BACK","value":"Face","parent":{"krate":0,"index":18959},"children":[],"decl_id":null,"docs":" Back face.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19018},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":188818,"byte_end":188823,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"Other","qualname":"::pso::CreationError::Other","value":"CreationError::Other","parent":{"krate":0,"index":19017},"children":[],"decl_id":null,"docs":" Unknown other error.\n","sig":null,"attributes":[{"value":"fail(display = \"Unknown other error\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":188773,"byte_end":188813,"line_start":20,"line_end":20,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":19020},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":188934,"byte_end":188948,"line_start":24,"line_end":24,"column_start":5,"column_end":19},"name":"InvalidSubpass","qualname":"::pso::CreationError::InvalidSubpass","value":"CreationError::InvalidSubpass(pass::SubpassId)","parent":{"krate":0,"index":19017},"children":[],"decl_id":null,"docs":" Invalid subpass (not part of renderpass).\n","sig":null,"attributes":[{"value":"fail(display = \"Invalid subpass index: {}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":188879,"byte_end":188929,"line_start":23,"line_end":23,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":19023},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189063,"byte_end":189069,"line_start":27,"line_end":27,"column_start":5,"column_end":11},"name":"Shader","qualname":"::pso::CreationError::Shader","value":"CreationError::Shader(device::ShaderError)","parent":{"krate":0,"index":19017},"children":[],"decl_id":null,"docs":" Shader compilation error.\n","sig":null,"attributes":[{"value":"fail(display = \"Shader compilation error: {}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189005,"byte_end":189058,"line_start":26,"line_end":26,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":19026},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189174,"byte_end":189185,"line_start":31,"line_end":31,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::pso::CreationError::OutOfMemory","value":"CreationError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":19017},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189142,"byte_end":189169,"line_start":30,"line_end":30,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":19017},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":188724,"byte_end":188737,"line_start":18,"line_end":18,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::pso::CreationError","value":"CreationError::{Other, InvalidSubpass, Shader, OutOfMemory}","parent":null,"children":[{"krate":0,"index":19018},{"krate":0,"index":19020},{"krate":0,"index":19023},{"krate":0,"index":19026}],"decl_id":null,"docs":" Error types happening upon PSO creation on the device side.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19044},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189611,"byte_end":189624,"line_start":46,"line_end":46,"column_start":16,"column_end":29},"name":"PipelineStage","qualname":"::pso::PipelineStage","value":"PipelineStage {  }","parent":null,"children":[{"krate":0,"index":19045}],"decl_id":null,"docs":" Stages of the logical pipeline.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19140},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189690,"byte_end":189701,"line_start":48,"line_end":48,"column_start":15,"column_end":26},"name":"TOP_OF_PIPE","qualname":"::pso::PipelineStage::TOP_OF_PIPE","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Beginning of the command queue.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19141},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189762,"byte_end":189775,"line_start":50,"line_end":50,"column_start":15,"column_end":28},"name":"DRAW_INDIRECT","qualname":"::pso::PipelineStage::DRAW_INDIRECT","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Indirect data consumption.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19142},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189834,"byte_end":189846,"line_start":52,"line_end":52,"column_start":15,"column_end":27},"name":"VERTEX_INPUT","qualname":"::pso::PipelineStage::VERTEX_INPUT","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Vertex data consumption.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19143},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189905,"byte_end":189918,"line_start":54,"line_end":54,"column_start":15,"column_end":28},"name":"VERTEX_SHADER","qualname":"::pso::PipelineStage::VERTEX_SHADER","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Vertex shader execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19144},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189975,"byte_end":189986,"line_start":56,"line_end":56,"column_start":15,"column_end":26},"name":"HULL_SHADER","qualname":"::pso::PipelineStage::HULL_SHADER","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Hull shader execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19145},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":190046,"byte_end":190059,"line_start":58,"line_end":58,"column_start":15,"column_end":28},"name":"DOMAIN_SHADER","qualname":"::pso::PipelineStage::DOMAIN_SHADER","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Domain shader execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19146},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":190121,"byte_end":190136,"line_start":60,"line_end":60,"column_start":15,"column_end":30},"name":"GEOMETRY_SHADER","qualname":"::pso::PipelineStage::GEOMETRY_SHADER","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Geometry shader execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19147},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":190198,"byte_end":190213,"line_start":62,"line_end":62,"column_start":15,"column_end":30},"name":"FRAGMENT_SHADER","qualname":"::pso::PipelineStage::FRAGMENT_SHADER","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Fragment shader execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19148},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":190287,"byte_end":190307,"line_start":64,"line_end":64,"column_start":15,"column_end":35},"name":"EARLY_FRAGMENT_TESTS","qualname":"::pso::PipelineStage::EARLY_FRAGMENT_TESTS","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Stage of early depth and stencil test.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19149},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":190381,"byte_end":190400,"line_start":66,"line_end":66,"column_start":15,"column_end":34},"name":"LATE_FRAGMENT_TESTS","qualname":"::pso::PipelineStage::LATE_FRAGMENT_TESTS","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Stage of late depth and stencil test.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19150},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":190476,"byte_end":190499,"line_start":68,"line_end":68,"column_start":15,"column_end":38},"name":"COLOR_ATTACHMENT_OUTPUT","qualname":"::pso::PipelineStage::COLOR_ATTACHMENT_OUTPUT","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Stage of final color value calculation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19151},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":190561,"byte_end":190575,"line_start":70,"line_end":70,"column_start":15,"column_end":29},"name":"COMPUTE_SHADER","qualname":"::pso::PipelineStage::COMPUTE_SHADER","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Compute shader execution,\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19152},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":190644,"byte_end":190652,"line_start":72,"line_end":72,"column_start":15,"column_end":23},"name":"TRANSFER","qualname":"::pso::PipelineStage::TRANSFER","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Copy/Transfer command execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19153},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":190715,"byte_end":190729,"line_start":74,"line_end":74,"column_start":15,"column_end":29},"name":"BOTTOM_OF_PIPE","qualname":"::pso::PipelineStage::BOTTOM_OF_PIPE","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" End of the command queue.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19154},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":190835,"byte_end":190839,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"name":"HOST","qualname":"::pso::PipelineStage::HOST","value":"PipelineStage","parent":{"krate":0,"index":19139},"children":[],"decl_id":null,"docs":" Read/Write access from host.\n (Not a real pipeline stage)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19245},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":191010,"byte_end":191026,"line_start":84,"line_end":84,"column_start":16,"column_end":32},"name":"ShaderStageFlags","qualname":"::pso::ShaderStageFlags","value":"ShaderStageFlags {  }","parent":null,"children":[{"krate":0,"index":19246}],"decl_id":null,"docs":" Combination of different shader pipeline stages.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19334},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":191081,"byte_end":191087,"line_start":86,"line_end":86,"column_start":15,"column_end":21},"name":"VERTEX","qualname":"::pso::ShaderStageFlags::VERTEX","value":"ShaderStageFlags","parent":{"krate":0,"index":19333},"children":[],"decl_id":null,"docs":" Vertex shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19335},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":191157,"byte_end":191161,"line_start":88,"line_end":88,"column_start":15,"column_end":19},"name":"HULL","qualname":"::pso::ShaderStageFlags::HULL","value":"ShaderStageFlags","parent":{"krate":0,"index":19333},"children":[],"decl_id":null,"docs":" Hull (tessellation) shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19336},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":191235,"byte_end":191241,"line_start":90,"line_end":90,"column_start":15,"column_end":21},"name":"DOMAIN","qualname":"::pso::ShaderStageFlags::DOMAIN","value":"ShaderStageFlags","parent":{"krate":0,"index":19333},"children":[],"decl_id":null,"docs":" Domain (tessellation) shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19337},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":191300,"byte_end":191308,"line_start":92,"line_end":92,"column_start":15,"column_end":23},"name":"GEOMETRY","qualname":"::pso::ShaderStageFlags::GEOMETRY","value":"ShaderStageFlags","parent":{"krate":0,"index":19333},"children":[],"decl_id":null,"docs":" Geometry shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19338},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":191365,"byte_end":191373,"line_start":94,"line_end":94,"column_start":15,"column_end":23},"name":"FRAGMENT","qualname":"::pso::ShaderStageFlags::FRAGMENT","value":"ShaderStageFlags","parent":{"krate":0,"index":19333},"children":[],"decl_id":null,"docs":" Fragment shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19339},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":191430,"byte_end":191437,"line_start":96,"line_end":96,"column_start":15,"column_end":22},"name":"COMPUTE","qualname":"::pso::ShaderStageFlags::COMPUTE","value":"ShaderStageFlags","parent":{"krate":0,"index":19333},"children":[],"decl_id":null,"docs":" Compute shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19340},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":191510,"byte_end":191518,"line_start":98,"line_end":98,"column_start":15,"column_end":23},"name":"GRAPHICS","qualname":"::pso::ShaderStageFlags::GRAPHICS","value":"ShaderStageFlags","parent":{"krate":0,"index":19333},"children":[],"decl_id":null,"docs":" All graphics pipeline shader stages.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19341},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":191679,"byte_end":191682,"line_start":101,"line_end":101,"column_start":15,"column_end":18},"name":"ALL","qualname":"::pso::ShaderStageFlags::ALL","value":"ShaderStageFlags","parent":{"krate":0,"index":19333},"children":[],"decl_id":null,"docs":" All shader stages.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19412},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192042,"byte_end":192048,"line_start":112,"line_end":112,"column_start":5,"column_end":11},"name":"Vertex","qualname":"::pso::Stage::Vertex","value":"Stage::Vertex","parent":{"krate":0,"index":19411},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19414},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192054,"byte_end":192058,"line_start":113,"line_end":113,"column_start":5,"column_end":9},"name":"Hull","qualname":"::pso::Stage::Hull","value":"Stage::Hull","parent":{"krate":0,"index":19411},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19416},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192064,"byte_end":192070,"line_start":114,"line_end":114,"column_start":5,"column_end":11},"name":"Domain","qualname":"::pso::Stage::Domain","value":"Stage::Domain","parent":{"krate":0,"index":19411},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19418},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192076,"byte_end":192084,"line_start":115,"line_end":115,"column_start":5,"column_end":13},"name":"Geometry","qualname":"::pso::Stage::Geometry","value":"Stage::Geometry","parent":{"krate":0,"index":19411},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19420},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192090,"byte_end":192098,"line_start":116,"line_end":116,"column_start":5,"column_end":13},"name":"Fragment","qualname":"::pso::Stage::Fragment","value":"Stage::Fragment","parent":{"krate":0,"index":19411},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19422},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192104,"byte_end":192111,"line_start":117,"line_end":117,"column_start":5,"column_end":12},"name":"Compute","qualname":"::pso::Stage::Compute","value":"Stage::Compute","parent":{"krate":0,"index":19411},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":19411},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192030,"byte_end":192035,"line_start":111,"line_end":111,"column_start":10,"column_end":15},"name":"Stage","qualname":"::pso::Stage","value":"Stage::{Vertex, Hull, Domain, Geometry, Fragment, Compute}","parent":null,"children":[{"krate":0,"index":19412},{"krate":0,"index":19414},{"krate":0,"index":19416},{"krate":0,"index":19418},{"krate":0,"index":19420},{"krate":0,"index":19422}],"decl_id":null,"docs":" Which program stage this shader represents.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":191872,"byte_end":191894,"line_start":107,"line_end":107,"column_start":1,"column_end":23}},{"value":"repr(u8)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192009,"byte_end":192020,"line_start":110,"line_end":110,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":19489},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":193003,"byte_end":193013,"line_start":148,"line_end":148,"column_start":12,"column_end":22},"name":"EntryPoint","qualname":"::pso::EntryPoint","value":"EntryPoint { entry, module, specialization }","parent":null,"children":[{"krate":0,"index":19492},{"krate":0,"index":19493},{"krate":0,"index":19494}],"decl_id":null,"docs":" Shader entry point.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":19492},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":193066,"byte_end":193071,"line_start":150,"line_end":150,"column_start":9,"column_end":14},"name":"entry","qualname":"::pso::EntryPoint::entry","value":"&'a str","parent":{"krate":0,"index":19489},"children":[],"decl_id":null,"docs":" Entry point name.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":19493},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":193123,"byte_end":193129,"line_start":152,"line_end":152,"column_start":9,"column_end":15},"name":"module","qualname":"::pso::EntryPoint::module","value":"&'a <B as Backend>::ShaderModule","parent":{"krate":0,"index":19489},"children":[],"decl_id":null,"docs":" Shader module reference.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":19494},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":193184,"byte_end":193198,"line_start":154,"line_end":154,"column_start":9,"column_end":23},"name":"specialization","qualname":"::pso::EntryPoint::specialization","value":"pso::Specialization<'a>","parent":{"krate":0,"index":19489},"children":[],"decl_id":null,"docs":" Specialization.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19499},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":193591,"byte_end":193612,"line_start":170,"line_end":170,"column_start":16,"column_end":37},"name":"PipelineCreationFlags","qualname":"::pso::PipelineCreationFlags","value":"PipelineCreationFlags {  }","parent":null,"children":[{"krate":0,"index":19500}],"decl_id":null,"docs":" Pipeline creation flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19582},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":193733,"byte_end":193753,"line_start":174,"line_end":174,"column_start":15,"column_end":35},"name":"DISABLE_OPTIMIZATION","qualname":"::pso::PipelineCreationFlags::DISABLE_OPTIMIZATION","value":"PipelineCreationFlags","parent":{"krate":0,"index":19581},"children":[],"decl_id":null,"docs":" Disable pipeline optimizations.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19583},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":193910,"byte_end":193927,"line_start":178,"line_end":178,"column_start":15,"column_end":32},"name":"ALLOW_DERIVATIVES","qualname":"::pso::PipelineCreationFlags::ALLOW_DERIVATIVES","value":"PipelineCreationFlags","parent":{"krate":0,"index":19581},"children":[],"decl_id":null,"docs":" Allow derivatives (children) of the pipeline.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19638},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":194289,"byte_end":194297,"line_start":189,"line_end":189,"column_start":5,"column_end":13},"name":"Pipeline","qualname":"::pso::BasePipeline::Pipeline","value":"BasePipeline::Pipeline(&'a P)","parent":{"krate":0,"index":19635},"children":[],"decl_id":null,"docs":" Referencing an existing pipeline as parent.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19641},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":194447,"byte_end":194452,"line_start":193,"line_end":193,"column_start":5,"column_end":10},"name":"Index","qualname":"::pso::BasePipeline::Index","value":"BasePipeline::Index(usize)","parent":{"krate":0,"index":19635},"children":[],"decl_id":null,"docs":" A pipeline in the same create pipelines call.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19644},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":194500,"byte_end":194504,"line_start":195,"line_end":195,"column_start":5,"column_end":9},"name":"None","qualname":"::pso::BasePipeline::None","value":"BasePipeline::None","parent":{"krate":0,"index":19635},"children":[],"decl_id":null,"docs":" No parent pipeline exists.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":19635},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":194207,"byte_end":194219,"line_start":187,"line_end":187,"column_start":10,"column_end":22},"name":"BasePipeline","qualname":"::pso::BasePipeline","value":"BasePipeline::{Pipeline, Index, None}","parent":null,"children":[{"krate":0,"index":19638},{"krate":0,"index":19641},{"krate":0,"index":19644}],"decl_id":null,"docs":" A reference to a parent pipeline.  The assumption is that\n a parent and derivative/child pipeline have most settings\n in common, and one may be switched for another more quickly\n than entirely unrelated pipelines would be.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19650},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195091,"byte_end":195113,"line_start":209,"line_end":209,"column_start":12,"column_end":34},"name":"SpecializationConstant","qualname":"::pso::SpecializationConstant","value":"SpecializationConstant { id, range }","parent":null,"children":[{"krate":0,"index":19651},{"krate":0,"index":19652}],"decl_id":null,"docs":" Specialization constant for pipelines.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":19651},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195170,"byte_end":195172,"line_start":211,"line_end":211,"column_start":9,"column_end":11},"name":"id","qualname":"::pso::SpecializationConstant::id","value":"u32","parent":{"krate":0,"index":19650},"children":[],"decl_id":null,"docs":" Constant identifier in shader source.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":19652},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195238,"byte_end":195243,"line_start":213,"line_end":213,"column_start":9,"column_end":14},"name":"range","qualname":"::pso::SpecializationConstant::range","value":"std::ops::Range<u16>","parent":{"krate":0,"index":19650},"children":[],"decl_id":null,"docs":" Value to override specialization constant.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19657},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195337,"byte_end":195351,"line_start":218,"line_end":218,"column_start":12,"column_end":26},"name":"Specialization","qualname":"::pso::Specialization","value":"Specialization { constants, data }","parent":null,"children":[{"krate":0,"index":19659},{"krate":0,"index":19660}],"decl_id":null,"docs":" Specialization information structure.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":19659},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195390,"byte_end":195399,"line_start":220,"line_end":220,"column_start":9,"column_end":18},"name":"constants","qualname":"::pso::Specialization::constants","value":"std::borrow::Cow<'a, [pso::SpecializationConstant]>","parent":{"krate":0,"index":19657},"children":[],"decl_id":null,"docs":" Constant array.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":19660},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195462,"byte_end":195466,"line_start":222,"line_end":222,"column_start":9,"column_end":13},"name":"data","qualname":"::pso::Specialization::data","value":"std::borrow::Cow<'a, [u8]>","parent":{"krate":0,"index":19657},"children":[],"decl_id":null,"docs":" Raw data.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1116},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195565,"byte_end":195570,"line_start":227,"line_end":227,"column_start":15,"column_end":20},"name":"EMPTY","qualname":"::pso::Specialization::<'_>::EMPTY","value":"Self","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":" Empty specialization instance.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19667},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195835,"byte_end":195856,"line_start":241,"line_end":241,"column_start":12,"column_end":33},"name":"SpecializationStorage","qualname":"::pso::SpecializationStorage","value":"SpecializationStorage {  }","parent":null,"children":[{"krate":0,"index":19668},{"krate":0,"index":19669}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1119},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195988,"byte_end":196001,"line_start":248,"line_end":248,"column_start":11,"column_end":24},"name":"SpecConstList","qualname":"::pso::SpecConstList","value":"SpecConstList: Sized","parent":null,"children":[{"krate":0,"index":1120}],"decl_id":null,"docs":" List of specialization constants.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196018,"byte_end":196022,"line_start":249,"line_end":249,"column_start":8,"column_end":12},"name":"fold","qualname":"::pso::SpecConstList::fold","value":"fn (self, storage: &mut SpecializationStorage) -> ()","parent":{"krate":0,"index":1119},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19674},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196448,"byte_end":196464,"line_start":268,"line_end":268,"column_start":12,"column_end":28},"name":"SpecConstListNil","qualname":"::pso::SpecConstListNil","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19678},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196510,"byte_end":196527,"line_start":272,"line_end":272,"column_start":12,"column_end":29},"name":"SpecConstListCons","qualname":"::pso::SpecConstListCons","value":"SpecConstListCons { head, tail }","parent":null,"children":[{"krate":0,"index":19681},{"krate":0,"index":19682}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":19681},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196544,"byte_end":196548,"line_start":273,"line_end":273,"column_start":9,"column_end":13},"name":"head","qualname":"::pso::SpecConstListCons::head","value":"(u32, H)","parent":{"krate":0,"index":19678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":19682},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196568,"byte_end":196572,"line_start":274,"line_end":274,"column_start":9,"column_end":13},"name":"tail","qualname":"::pso::SpecConstListCons::tail","value":"T","parent":{"krate":0,"index":19678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19689},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":197620,"byte_end":197626,"line_start":306,"line_end":306,"column_start":5,"column_end":11},"name":"Static","qualname":"::pso::State::Static","value":"State::Static(T)","parent":{"krate":0,"index":19687},"children":[],"decl_id":null,"docs":" Static state that cannot be altered.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19692},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":197687,"byte_end":197694,"line_start":308,"line_end":308,"column_start":5,"column_end":12},"name":"Dynamic","qualname":"::pso::State::Dynamic","value":"State::Dynamic","parent":{"krate":0,"index":19687},"children":[],"decl_id":null,"docs":" Dynamic state set through a command buffer.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":19687},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":197560,"byte_end":197565,"line_start":304,"line_end":304,"column_start":10,"column_end":15},"name":"State","qualname":"::pso::State","value":"State::{Static, Dynamic}","parent":null,"children":[{"krate":0,"index":19689},{"krate":0,"index":19692}],"decl_id":null,"docs":" Pipeline state which may be static or dynamic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":197776,"byte_end":197785,"line_start":313,"line_end":313,"column_start":12,"column_end":21},"name":"static_or","qualname":"<State<T>>::static_or","value":"fn (self, default: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the static value or a default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":197971,"byte_end":197980,"line_start":321,"line_end":321,"column_start":12,"column_end":21},"name":"is_static","qualname":"<State<T>>::is_static","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the state is static.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":198159,"byte_end":198169,"line_start":329,"line_end":329,"column_start":12,"column_end":22},"name":"is_dynamic","qualname":"<State<T>>::is_dynamic","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the state is dynamic.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1136},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"query","qualname":"::query","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","parent":null,"children":[{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":19772},{"krate":0,"index":19795},{"krate":0,"index":19794},{"krate":0,"index":19792},{"krate":0,"index":19784},{"krate":0,"index":19789},{"krate":0,"index":19781},{"krate":0,"index":19779},{"krate":0,"index":1140},{"krate":0,"index":19797},{"krate":0,"index":19802},{"krate":0,"index":19806},{"krate":0,"index":19868},{"krate":0,"index":19827},{"krate":0,"index":19826},{"krate":0,"index":19823},{"krate":0,"index":19821},{"krate":0,"index":19819},{"krate":0,"index":19813},{"krate":0,"index":19811},{"krate":0,"index":19808},{"krate":0,"index":19874},{"krate":0,"index":19879},{"krate":0,"index":19881},{"krate":0,"index":19883},{"krate":0,"index":19885},{"krate":0,"index":19887},{"krate":0,"index":19894},{"krate":0,"index":19897},{"krate":0,"index":19899},{"krate":0,"index":19902},{"krate":0,"index":19904},{"krate":0,"index":19907},{"krate":0,"index":19909},{"krate":0,"index":19912},{"krate":0,"index":19914},{"krate":0,"index":19917},{"krate":0,"index":19920},{"krate":0,"index":19937},{"krate":0,"index":19999},{"krate":0,"index":19958},{"krate":0,"index":19957},{"krate":0,"index":19954},{"krate":0,"index":19952},{"krate":0,"index":19950},{"krate":0,"index":19944},{"krate":0,"index":19942},{"krate":0,"index":19939},{"krate":0,"index":20005},{"krate":0,"index":20013},{"krate":0,"index":20015},{"krate":0,"index":20017},{"krate":0,"index":20019},{"krate":0,"index":20021},{"krate":0,"index":20031},{"krate":0,"index":20034},{"krate":0,"index":20036},{"krate":0,"index":20039},{"krate":0,"index":20041},{"krate":0,"index":20044},{"krate":0,"index":20046},{"krate":0,"index":20049},{"krate":0,"index":20051},{"krate":0,"index":20054},{"krate":0,"index":20057},{"krate":0,"index":20083},{"krate":0,"index":20103},{"krate":0,"index":20101},{"krate":0,"index":20099},{"krate":0,"index":20096},{"krate":0,"index":20094},{"krate":0,"index":20091},{"krate":0,"index":20104},{"krate":0,"index":20166},{"krate":0,"index":20125},{"krate":0,"index":20124},{"krate":0,"index":20121},{"krate":0,"index":20119},{"krate":0,"index":20117},{"krate":0,"index":20111},{"krate":0,"index":20109},{"krate":0,"index":20106},{"krate":0,"index":20172},{"krate":0,"index":20187},{"krate":0,"index":20189},{"krate":0,"index":20191},{"krate":0,"index":20193},{"krate":0,"index":20195},{"krate":0,"index":20212},{"krate":0,"index":20215},{"krate":0,"index":20217},{"krate":0,"index":20220},{"krate":0,"index":20222},{"krate":0,"index":20225},{"krate":0,"index":20227},{"krate":0,"index":20230},{"krate":0,"index":20232},{"krate":0,"index":20235},{"krate":0,"index":20238}],"decl_id":null,"docs":" Queries are commands that can be submitted to a command buffer to record statistics or\n other useful values as the command buffer is running. They are often intended for profiling\n or other introspection, providing a mechanism for the command buffer to record data about its\n operation as it is running.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235106,"byte_end":235108,"line_start":10,"line_end":10,"column_start":10,"column_end":12},"name":"Id","qualname":"::query::Id","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" A query identifier.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19773},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235300,"byte_end":235311,"line_start":17,"line_end":17,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::query::CreationError::OutOfMemory","value":"CreationError::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":19772},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235268,"byte_end":235295,"line_start":16,"line_end":16,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":19776},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235422,"byte_end":235433,"line_start":21,"line_end":21,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::query::CreationError::Unsupported","value":"CreationError::Unsupported(Type)","parent":{"krate":0,"index":19772},"children":[],"decl_id":null,"docs":" Query type unsupported.\n","sig":null,"attributes":[{"value":"fail(display = \"Query type ({:?}) unsupported\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235363,"byte_end":235417,"line_start":20,"line_end":20,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":19772},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235203,"byte_end":235216,"line_start":14,"line_end":14,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::query::CreationError","value":"CreationError::{OutOfMemory, Unsupported}","parent":null,"children":[{"krate":0,"index":19773},{"krate":0,"index":19776}],"decl_id":null,"docs":" Query creation error.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19797},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235774,"byte_end":235779,"line_start":33,"line_end":33,"column_start":12,"column_end":17},"name":"Query","qualname":"::query::Query","value":"Query { pool, id }","parent":null,"children":[{"krate":0,"index":19800},{"krate":0,"index":19801}],"decl_id":null,"docs":" A `Query` object has a particular identifier and saves its results to a given `QueryPool`.\n It is passed as a parameter to the command buffer's query methods.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":19800},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235814,"byte_end":235818,"line_start":35,"line_end":35,"column_start":9,"column_end":13},"name":"pool","qualname":"::query::Query::pool","value":"&'a <B as Backend>::QueryPool","parent":{"krate":0,"index":19797},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":19801},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235854,"byte_end":235856,"line_start":37,"line_end":37,"column_start":9,"column_end":11},"name":"id","qualname":"::query::Query::id","value":"u32","parent":{"krate":0,"index":19797},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19806},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235987,"byte_end":235999,"line_start":43,"line_end":43,"column_start":16,"column_end":28},"name":"ControlFlags","qualname":"::query::ControlFlags","value":"ControlFlags {  }","parent":null,"children":[{"krate":0,"index":19807}],"decl_id":null,"docs":" Query control flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19888},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":236168,"byte_end":236175,"line_start":47,"line_end":47,"column_start":15,"column_end":22},"name":"PRECISE","qualname":"::query::ControlFlags::PRECISE","value":"ControlFlags","parent":{"krate":0,"index":19887},"children":[],"decl_id":null,"docs":" Occlusion queries **must** return the exact sampler number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19937},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":236314,"byte_end":236325,"line_start":54,"line_end":54,"column_start":16,"column_end":27},"name":"ResultFlags","qualname":"::query::ResultFlags","value":"ResultFlags {  }","parent":null,"children":[{"krate":0,"index":19938}],"decl_id":null,"docs":" Query result flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20022},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":236430,"byte_end":236437,"line_start":56,"line_end":56,"column_start":15,"column_end":22},"name":"BITS_64","qualname":"::query::ResultFlags::BITS_64","value":"ResultFlags","parent":{"krate":0,"index":20021},"children":[],"decl_id":null,"docs":" Results will be written as an array of 64-bit unsigned integer values.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20023},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":236553,"byte_end":236557,"line_start":58,"line_end":58,"column_start":15,"column_end":19},"name":"WAIT","qualname":"::query::ResultFlags::WAIT","value":"ResultFlags","parent":{"krate":0,"index":20021},"children":[],"decl_id":null,"docs":" Wait for each query’s status to become available before retrieving its results.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20024},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":236636,"byte_end":236653,"line_start":60,"line_end":60,"column_start":15,"column_end":32},"name":"WITH_AVAILABILITY","qualname":"::query::ResultFlags::WITH_AVAILABILITY","value":"ResultFlags","parent":{"krate":0,"index":20021},"children":[],"decl_id":null,"docs":" Availability status accompanies the results.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20025},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":236728,"byte_end":236735,"line_start":62,"line_end":62,"column_start":15,"column_end":22},"name":"PARTIAL","qualname":"::query::ResultFlags::PARTIAL","value":"ResultFlags","parent":{"krate":0,"index":20021},"children":[],"decl_id":null,"docs":" Returning partial results is acceptable.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20084},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":236976,"byte_end":236985,"line_start":71,"line_end":71,"column_start":5,"column_end":14},"name":"Occlusion","qualname":"::query::Type::Occlusion","value":"Type::Occlusion","parent":{"krate":0,"index":20083},"children":[],"decl_id":null,"docs":" Occlusion query. Count the number of drawn samples between\n the start and end of the query command.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20086},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237156,"byte_end":237174,"line_start":75,"line_end":75,"column_start":5,"column_end":23},"name":"PipelineStatistics","qualname":"::query::Type::PipelineStatistics","value":"Type::PipelineStatistics(PipelineStatistic)","parent":{"krate":0,"index":20083},"children":[],"decl_id":null,"docs":" Pipeline statistic query. Counts the number of pipeline stage\n invocations of the given types between the start and end of\n the query command.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20089},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237309,"byte_end":237318,"line_start":78,"line_end":78,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::query::Type::Timestamp","value":"Type::Timestamp","parent":{"krate":0,"index":20083},"children":[],"decl_id":null,"docs":" Timestamp query. Timestamps can be recorded to the\n query pool by calling `write_timestamp()`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":20083},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":236850,"byte_end":236854,"line_start":68,"line_end":68,"column_start":10,"column_end":14},"name":"Type","qualname":"::query::Type","value":"Type::{Occlusion, PipelineStatistics, Timestamp}","parent":null,"children":[{"krate":0,"index":20084},{"krate":0,"index":20086},{"krate":0,"index":20089}],"decl_id":null,"docs":" Type of queries in a query pool.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20104},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237449,"byte_end":237466,"line_start":84,"line_end":84,"column_start":16,"column_end":33},"name":"PipelineStatistic","qualname":"::query::PipelineStatistic","value":"PipelineStatistic {  }","parent":null,"children":[{"krate":0,"index":20105}],"decl_id":null,"docs":" Pipeline statistic flags\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20196},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237500,"byte_end":237523,"line_start":86,"line_end":86,"column_start":15,"column_end":38},"name":"INPUT_ASSEMBLY_VERTICES","qualname":"::query::PipelineStatistic::INPUT_ASSEMBLY_VERTICES","value":"PipelineStatistic","parent":{"krate":0,"index":20195},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20197},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237557,"byte_end":237582,"line_start":88,"line_end":88,"column_start":15,"column_end":40},"name":"INPUT_ASSEMBLY_PRIMITIVES","qualname":"::query::PipelineStatistic::INPUT_ASSEMBLY_PRIMITIVES","value":"PipelineStatistic","parent":{"krate":0,"index":20195},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20198},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237616,"byte_end":237641,"line_start":90,"line_end":90,"column_start":15,"column_end":40},"name":"VERTEX_SHADER_INVOCATIONS","qualname":"::query::PipelineStatistic::VERTEX_SHADER_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":20195},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20199},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237675,"byte_end":237702,"line_start":92,"line_end":92,"column_start":15,"column_end":42},"name":"GEOMETRY_SHADER_INVOCATIONS","qualname":"::query::PipelineStatistic::GEOMETRY_SHADER_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":20195},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20200},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237736,"byte_end":237762,"line_start":94,"line_end":94,"column_start":15,"column_end":41},"name":"GEOMETRY_SHADER_PRIMITIVES","qualname":"::query::PipelineStatistic::GEOMETRY_SHADER_PRIMITIVES","value":"PipelineStatistic","parent":{"krate":0,"index":20195},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20201},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237797,"byte_end":237817,"line_start":96,"line_end":96,"column_start":15,"column_end":35},"name":"CLIPPING_INVOCATIONS","qualname":"::query::PipelineStatistic::CLIPPING_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":20195},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20202},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237852,"byte_end":237871,"line_start":98,"line_end":98,"column_start":15,"column_end":34},"name":"CLIPPING_PRIMITIVES","qualname":"::query::PipelineStatistic::CLIPPING_PRIMITIVES","value":"PipelineStatistic","parent":{"krate":0,"index":20195},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20203},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237906,"byte_end":237933,"line_start":100,"line_end":100,"column_start":15,"column_end":42},"name":"FRAGMENT_SHADER_INVOCATIONS","qualname":"::query::PipelineStatistic::FRAGMENT_SHADER_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":20195},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20204},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":237968,"byte_end":237987,"line_start":102,"line_end":102,"column_start":15,"column_end":34},"name":"HULL_SHADER_PATCHES","qualname":"::query::PipelineStatistic::HULL_SHADER_PATCHES","value":"PipelineStatistic","parent":{"krate":0,"index":20195},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20205},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":238023,"byte_end":238048,"line_start":104,"line_end":104,"column_start":15,"column_end":40},"name":"DOMAIN_SHADER_INVOCATIONS","qualname":"::query::PipelineStatistic::DOMAIN_SHADER_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":20195},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20206},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":238084,"byte_end":238110,"line_start":106,"line_end":106,"column_start":15,"column_end":41},"name":"COMPUTE_SHADER_INVOCATIONS","qualname":"::query::PipelineStatistic::COMPUTE_SHADER_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":20195},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1142},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"queue","qualname":"::queue","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1196},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1256},{"krate":0,"index":20357},{"krate":0,"index":20422},{"krate":0,"index":20421},{"krate":0,"index":20419},{"krate":0,"index":20417},{"krate":0,"index":20415},{"krate":0,"index":20409},{"krate":0,"index":20366},{"krate":0,"index":20424},{"krate":0,"index":20431},{"krate":0,"index":1261},{"krate":0,"index":20436},{"krate":0,"index":20442},{"krate":0,"index":1277}],"decl_id":null,"docs":" Command queues.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1143},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"capability","qualname":"::queue::capability","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":20285},{"krate":0,"index":20286},{"krate":0,"index":20288},{"krate":0,"index":20289},{"krate":0,"index":20291},{"krate":0,"index":20292},{"krate":0,"index":20294},{"krate":0,"index":20295},{"krate":0,"index":20297},{"krate":0,"index":20298},{"krate":0,"index":1145},{"krate":0,"index":1147},{"krate":0,"index":1149},{"krate":0,"index":1151},{"krate":0,"index":1153},{"krate":0,"index":1155},{"krate":0,"index":1157},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1194}],"decl_id":null,"docs":" Type system encoded queue capabilities.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":20285},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":244865,"byte_end":244872,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"name":"General","qualname":"::queue::capability::General","value":"General::{}","parent":null,"children":[],"decl_id":null,"docs":" General capability, supporting graphics, compute and transfer operations.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":20288},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":244972,"byte_end":244980,"line_start":9,"line_end":9,"column_start":10,"column_end":18},"name":"Graphics","qualname":"::queue::capability::Graphics","value":"Graphics::{}","parent":null,"children":[],"decl_id":null,"docs":" Graphics capability, supporting graphics and transfer operations.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":20291},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":245078,"byte_end":245085,"line_start":12,"line_end":12,"column_start":10,"column_end":17},"name":"Compute","qualname":"::queue::capability::Compute","value":"Compute::{}","parent":null,"children":[],"decl_id":null,"docs":" Compute capability, supporting compute and transfer operations.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":20294},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":245177,"byte_end":245185,"line_start":15,"line_end":15,"column_start":10,"column_end":18},"name":"Transfer","qualname":"::queue::capability::Transfer","value":"Transfer::{}","parent":null,"children":[],"decl_id":null,"docs":" Transfer capability, supporting only transfer operations.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":20297},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":245252,"byte_end":245269,"line_start":19,"line_end":19,"column_start":10,"column_end":27},"name":"GraphicsOrCompute","qualname":"::queue::capability::GraphicsOrCompute","value":"GraphicsOrCompute::{}","parent":null,"children":[],"decl_id":null,"docs":" Graphics or compute capability.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":245481,"byte_end":245491,"line_start":24,"line_end":24,"column_start":11,"column_end":21},"name":"Capability","qualname":"::queue::capability::Capability","value":"Capability","parent":null,"children":[{"krate":0,"index":1146}],"decl_id":null,"docs":" A Capability is an object that specifies what kind of operations\n a queue type performs, allowing what types support what queue operations\n to be described at runtime by the type system.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":245598,"byte_end":245610,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"supported_by","qualname":"::queue::capability::Capability::supported_by","value":"fn (qt: QueueType) -> bool","parent":{"krate":0,"index":1145},"children":[],"decl_id":null,"docs":" Return true if this type level capability is supported by\n a run-time queue type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246568,"byte_end":246576,"line_start":65,"line_end":65,"column_start":11,"column_end":19},"name":"Supports","qualname":"::queue::capability::Supports","value":"Supports<T>","parent":null,"children":[],"decl_id":null,"docs":" A trait that indicates that a particular type of queue supports\n a particular `Capability`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1167},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":247048,"byte_end":247053,"line_start":78,"line_end":78,"column_start":11,"column_end":16},"name":"Upper","qualname":"::queue::capability::Upper","value":"Upper","parent":null,"children":[{"krate":0,"index":1168}],"decl_id":null,"docs":" Encoding the minimal capability to support a combination of other capabilities.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1168},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":247112,"byte_end":247118,"line_start":80,"line_end":80,"column_start":10,"column_end":16},"name":"Result","qualname":"::queue::capability::Upper::Result","value":"type Result;","parent":{"krate":0,"index":1167},"children":[],"decl_id":null,"docs":" Resulting minimal required capability.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1196},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"family","qualname":"::queue::family","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","parent":null,"children":[{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":20300},{"krate":0,"index":20339},{"krate":0,"index":20338},{"krate":0,"index":20336},{"krate":0,"index":20333},{"krate":0,"index":20331},{"krate":0,"index":20328},{"krate":0,"index":20322},{"krate":0,"index":20303},{"krate":0,"index":20341},{"krate":0,"index":20346},{"krate":0,"index":1216},{"krate":0,"index":1220},{"krate":0,"index":20350},{"krate":0,"index":20354},{"krate":0,"index":1225}],"decl_id":null,"docs":" Queue family and groups.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1209},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":248392,"byte_end":248403,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"QueueFamily","qualname":"::queue::family::QueueFamily","value":"QueueFamily: Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215}],"decl_id":null,"docs":" General information about a queue family, available upon adapter discovery.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":248476,"byte_end":248486,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"queue_type","qualname":"::queue::family::QueueFamily::queue_type","value":"fn (&self) -> QueueType","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Returns the type of queues.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":248582,"byte_end":248592,"line_start":18,"line_end":18,"column_start":8,"column_end":18},"name":"max_queues","qualname":"::queue::family::QueueFamily::max_queues","value":"fn (&self) -> usize","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Returns maximum number of queues created from this family.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":248681,"byte_end":248698,"line_start":20,"line_end":20,"column_start":8,"column_end":25},"name":"supports_graphics","qualname":"::queue::family::QueueFamily::supports_graphics","value":"fn (&self) -> bool","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Returns true if the queue supports graphics operations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1213},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":248842,"byte_end":248858,"line_start":24,"line_end":24,"column_start":8,"column_end":24},"name":"supports_compute","qualname":"::queue::family::QueueFamily::supports_compute","value":"fn (&self) -> bool","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Returns true if the queue supports compute operations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":249002,"byte_end":249019,"line_start":28,"line_end":28,"column_start":8,"column_end":25},"name":"supports_transfer","qualname":"::queue::family::QueueFamily::supports_transfer","value":"fn (&self) -> bool","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Returns true if the queue supports transfer operations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":249137,"byte_end":249139,"line_start":32,"line_end":32,"column_start":8,"column_end":10},"name":"id","qualname":"::queue::family::QueueFamily::id","value":"fn (&self) -> QueueFamilyId","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Returns the queue family ID.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20300},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":249349,"byte_end":249362,"line_start":38,"line_end":38,"column_start":12,"column_end":25},"name":"QueueFamilyId","qualname":"::queue::family::QueueFamilyId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Identifier for a queue family of a physical device.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20341},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":249463,"byte_end":249473,"line_start":42,"line_end":42,"column_start":12,"column_end":22},"name":"QueueGroup","qualname":"::queue::family::QueueGroup","value":"QueueGroup { queues }","parent":null,"children":[{"krate":0,"index":20344},{"krate":0,"index":20345}],"decl_id":null,"docs":" Strong-typed group of queues of the same queue family.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20345},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":249573,"byte_end":249579,"line_start":45,"line_end":45,"column_start":9,"column_end":15},"name":"queues","qualname":"::queue::family::QueueGroup::queues","value":"std::vec::Vec<queue::CommandQueue<B, C>>","parent":{"krate":0,"index":20341},"children":[],"decl_id":null,"docs":" Command queues created in this family.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1219},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":249706,"byte_end":249712,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"family","qualname":"<QueueGroup<B, C>>::family","value":"fn (&self) -> QueueFamilyId","parent":null,"children":[],"decl_id":null,"docs":" Return the associated queue family id.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20350},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":250497,"byte_end":250503,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"name":"Queues","qualname":"::queue::family::Queues","value":"","parent":null,"children":[],"decl_id":null,"docs":" Contains a list of all instantiated queues. Conceptually structured as a collection of\n `QueueGroup`s, one for each queue family.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":250807,"byte_end":250811,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"take","qualname":"<Queues<B>>::take","value":"fn <C> (&mut self, id: QueueFamilyId) -> Option<QueueGroup<B, C>>","parent":null,"children":[],"decl_id":null,"docs":" Removes the queue family with the passed id from the queue list and\n returns the queue group.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":251172,"byte_end":251180,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"take_raw","qualname":"<Queues<B>>::take_raw","value":"fn (&mut self, id: QueueFamilyId) -> Option<Vec<B::CommandQueue>>","parent":null,"children":[],"decl_id":null,"docs":" Removes the queue family with the passed id from the queue list and\n returns the command queues.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20358},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239176,"byte_end":239183,"line_start":32,"line_end":32,"column_start":5,"column_end":12},"name":"General","qualname":"::queue::QueueType::General","value":"QueueType::General","parent":{"krate":0,"index":20357},"children":[],"decl_id":null,"docs":" Supports all operations.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20360},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239245,"byte_end":239253,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Graphics","qualname":"::queue::QueueType::Graphics","value":"QueueType::Graphics","parent":{"krate":0,"index":20357},"children":[],"decl_id":null,"docs":" Only supports graphics and transfer operations.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20362},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239314,"byte_end":239321,"line_start":36,"line_end":36,"column_start":5,"column_end":12},"name":"Compute","qualname":"::queue::QueueType::Compute","value":"QueueType::Compute","parent":{"krate":0,"index":20357},"children":[],"decl_id":null,"docs":" Only supports compute and transfer operations.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20364},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239370,"byte_end":239378,"line_start":38,"line_end":38,"column_start":5,"column_end":13},"name":"Transfer","qualname":"::queue::QueueType::Transfer","value":"QueueType::Transfer","parent":{"krate":0,"index":20357},"children":[],"decl_id":null,"docs":" Only supports transfer operations.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":20357},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239127,"byte_end":239136,"line_start":30,"line_end":30,"column_start":10,"column_end":19},"name":"QueueType","qualname":"::queue::QueueType","value":"QueueType::{General, Graphics, Compute, Transfer}","parent":null,"children":[{"krate":0,"index":20358},{"krate":0,"index":20360},{"krate":0,"index":20362},{"krate":0,"index":20364}],"decl_id":null,"docs":" The type of the queue, an enum encompassing `queue::Capability`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20424},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239459,"byte_end":239469,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"name":"Submission","qualname":"::queue::Submission","value":"Submission { command_buffers, wait_semaphores, signal_semaphores }","parent":null,"children":[{"krate":0,"index":20428},{"krate":0,"index":20429},{"krate":0,"index":20430}],"decl_id":null,"docs":" Submission information for a command queue.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20428},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239527,"byte_end":239542,"line_start":45,"line_end":45,"column_start":9,"column_end":24},"name":"command_buffers","qualname":"::queue::Submission::command_buffers","value":"Ic","parent":{"krate":0,"index":20424},"children":[],"decl_id":null,"docs":" Command buffers to submit.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20429},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239618,"byte_end":239633,"line_start":47,"line_end":47,"column_start":9,"column_end":24},"name":"wait_semaphores","qualname":"::queue::Submission::wait_semaphores","value":"Iw","parent":{"krate":0,"index":20424},"children":[],"decl_id":null,"docs":" Semaphores to wait being signalled before submission.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20430},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239745,"byte_end":239762,"line_start":49,"line_end":49,"column_start":9,"column_end":26},"name":"signal_semaphores","qualname":"::queue::Submission::signal_semaphores","value":"Is","parent":{"krate":0,"index":20424},"children":[],"decl_id":null,"docs":" Semaphores to signal after all command buffers in the submission have finished execution.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1261},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239944,"byte_end":239959,"line_start":54,"line_end":54,"column_start":11,"column_end":26},"name":"RawCommandQueue","qualname":"::queue::RawCommandQueue","value":"RawCommandQueue<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1270},{"krate":0,"index":1276}],"decl_id":null,"docs":" `RawCommandQueue` are abstractions to the internal GPU execution engines.\n Commands are executed on the the device by submitting command buffers to queues.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":240514,"byte_end":240520,"line_start":62,"line_end":62,"column_start":15,"column_end":21},"name":"submit","qualname":"::queue::RawCommandQueue::submit","value":"fn <'a, T, Ic, S, Iw, Is> (&mut self, submission: Submission<Ic, Iw, Is>, fence: Option<&B::Fence>) -> ()","parent":{"krate":0,"index":1261},"children":[],"decl_id":null,"docs":" Submit command buffers to queue for execution.\n `fence` must be in unsignalled state, and will be signalled after all command buffers in the submission have\n finished execution.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":241158,"byte_end":241165,"line_start":78,"line_end":78,"column_start":15,"column_end":22},"name":"present","qualname":"::queue::RawCommandQueue::present","value":"fn <'a, W, Is, S, Iw> (&mut self, swapchains: Is, wait_semaphores: Iw) -> Result<Option<Suboptimal>, PresentError>","parent":{"krate":0,"index":1261},"children":[],"decl_id":null,"docs":" Presents the result of the queue to the given swapchains, after waiting on all the\n semaphores given in `wait_semaphores`. A given swapchain must not appear in this\n list more than once.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":241556,"byte_end":241565,"line_start":91,"line_end":91,"column_start":8,"column_end":17},"name":"wait_idle","qualname":"::queue::RawCommandQueue::wait_idle","value":"fn (&self) -> Result<(), HostExecutionError>","parent":{"krate":0,"index":1261},"children":[],"decl_id":null,"docs":" Wait for the queue to idle.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20436},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":241715,"byte_end":241727,"line_start":96,"line_end":96,"column_start":12,"column_end":24},"name":"CommandQueue","qualname":"::queue::CommandQueue","value":"","parent":null,"children":[],"decl_id":null,"docs":" Stronger-typed and safer `CommandQueue` wraps around `RawCommandQueue`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":242056,"byte_end":242059,"line_start":105,"line_end":105,"column_start":19,"column_end":22},"name":"new","qualname":"<CommandQueue<B, C>>::new","value":"fn (raw: B::CommandQueue) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create typed command queue from raw.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":242198,"byte_end":242204,"line_start":110,"line_end":110,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<CommandQueue<B, C>>::as_raw","value":"fn (&self) -> &B::CommandQueue","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the raw command queue\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":242332,"byte_end":242342,"line_start":115,"line_end":115,"column_start":19,"column_end":29},"name":"as_raw_mut","qualname":"<CommandQueue<B, C>>::as_raw_mut","value":"fn (&mut self) -> &mut B::CommandQueue","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the raw command queue\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":242474,"byte_end":242482,"line_start":120,"line_end":120,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<CommandQueue<B, C>>::into_raw","value":"fn (self) -> B::CommandQueue","parent":null,"children":[],"decl_id":null,"docs":" Downgrade a typed command queue to untyped one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":242750,"byte_end":242756,"line_start":127,"line_end":127,"column_start":19,"column_end":25},"name":"submit","qualname":"<CommandQueue<B, C>>::submit","value":"fn <'a, T, Ic, S, Iw, Is> (&mut self, submission: Submission<Ic, Iw, Is>, fence: Option<&B::Fence>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Submit command buffers to queue for execution.\n `fence` must be in unsignalled state, and will be signalled after all command buffers in the submission have\n finished execution.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":243256,"byte_end":243275,"line_start":142,"line_end":142,"column_start":19,"column_end":38},"name":"submit_nosemaphores","qualname":"<CommandQueue<B, C>>::submit_nosemaphores","value":"fn <'a, T, I> (&mut self, command_buffers: I, fence: Option<&B::Fence>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Submit command buffers without any semaphore waits or signals.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":243938,"byte_end":243945,"line_start":161,"line_end":161,"column_start":19,"column_end":26},"name":"present","qualname":"<CommandQueue<B, C>>::present","value":"fn <'a, W, Is, S, Iw> (&mut self, swapchains: Is, wait_semaphores: Iw) -> Result<Option<Suboptimal>, PresentError>","parent":null,"children":[],"decl_id":null,"docs":" Presents the result of the queue to the given swapchains, after waiting on all the\n semaphores given in `wait_semaphores`. A given swapchain must not appear in this\n list more than once.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":244383,"byte_end":244392,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"wait_idle","qualname":"<CommandQueue<B, C>>::wait_idle","value":"fn (&self) -> Result<(), HostExecutionError>","parent":null,"children":[],"decl_id":null,"docs":" Wait for the queue to idle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":244551,"byte_end":244560,"line_start":181,"line_end":181,"column_start":19,"column_end":28},"name":"downgrade","qualname":"<CommandQueue<B, C>>::downgrade","value":"fn <D> (&mut self) -> &mut CommandQueue<B, D>","parent":null,"children":[],"decl_id":null,"docs":" Downgrade a command queue to a lesser capability type.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1304},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::range","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","parent":null,"children":[{"krate":0,"index":1305},{"krate":0,"index":1310},{"krate":0,"index":1314},{"krate":0,"index":1318},{"krate":0,"index":1322},{"krate":0,"index":1326},{"krate":0,"index":1330}],"decl_id":null,"docs":" Generic range type abstraction that allows\n ranges to be handled a little more generically.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1310},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":251653,"byte_end":251661,"line_start":9,"line_end":9,"column_start":11,"column_end":19},"name":"RangeArg","qualname":"::range::RangeArg","value":"RangeArg<T>","parent":null,"children":[{"krate":0,"index":1312},{"krate":0,"index":1313}],"decl_id":null,"docs":" Abstracts the std range types.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":251701,"byte_end":251706,"line_start":11,"line_end":11,"column_start":8,"column_end":13},"name":"start","qualname":"::range::RangeArg::start","value":"fn (&self) -> Option<&T>","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":" Start index bound.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":251761,"byte_end":251764,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"end","qualname":"::range::RangeArg::end","value":"fn (&self) -> Option<&T>","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":" End index bound.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1334},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"window","qualname":"::window","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":20446},{"krate":0,"index":20475},{"krate":0,"index":20474},{"krate":0,"index":20472},{"krate":0,"index":20464},{"krate":0,"index":20469},{"krate":0,"index":20461},{"krate":0,"index":20459},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":20477},{"krate":0,"index":20545},{"krate":0,"index":20544},{"krate":0,"index":20542},{"krate":0,"index":20539},{"krate":0,"index":20529},{"krate":0,"index":20523},{"krate":0,"index":20480},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":20547},{"krate":0,"index":20613},{"krate":0,"index":20611},{"krate":0,"index":20605},{"krate":0,"index":20554},{"krate":0,"index":1362},{"krate":0,"index":1367},{"krate":0,"index":20615},{"krate":0,"index":20639},{"krate":0,"index":20637},{"krate":0,"index":20635},{"krate":0,"index":20632},{"krate":0,"index":20630},{"krate":0,"index":20628},{"krate":0,"index":20640},{"krate":0,"index":20702},{"krate":0,"index":20661},{"krate":0,"index":20660},{"krate":0,"index":20657},{"krate":0,"index":20655},{"krate":0,"index":20653},{"krate":0,"index":20647},{"krate":0,"index":20645},{"krate":0,"index":20642},{"krate":0,"index":20708},{"krate":0,"index":20716},{"krate":0,"index":20718},{"krate":0,"index":20720},{"krate":0,"index":20722},{"krate":0,"index":20724},{"krate":0,"index":20734},{"krate":0,"index":20737},{"krate":0,"index":20739},{"krate":0,"index":20742},{"krate":0,"index":20744},{"krate":0,"index":20747},{"krate":0,"index":20749},{"krate":0,"index":20752},{"krate":0,"index":20754},{"krate":0,"index":20757},{"krate":0,"index":20760},{"krate":0,"index":20786},{"krate":0,"index":20796},{"krate":0,"index":20794},{"krate":0,"index":1368},{"krate":0,"index":20798},{"krate":0,"index":20800},{"krate":0,"index":20802},{"krate":0,"index":20832},{"krate":0,"index":20831},{"krate":0,"index":20829},{"krate":0,"index":20821},{"krate":0,"index":20826},{"krate":0,"index":20818},{"krate":0,"index":20816},{"krate":0,"index":20834},{"krate":0,"index":20862},{"krate":0,"index":20861},{"krate":0,"index":20859},{"krate":0,"index":20851},{"krate":0,"index":20856},{"krate":0,"index":20848},{"krate":0,"index":20846},{"krate":0,"index":1373}],"decl_id":null,"docs":" Windowing system interoperability","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20447},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":254876,"byte_end":254887,"line_start":71,"line_end":71,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::window::CreationError::OutOfMemory","value":"CreationError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":20446},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":254844,"byte_end":254871,"line_start":70,"line_end":70,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20450},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":254969,"byte_end":254979,"line_start":74,"line_end":74,"column_start":5,"column_end":15},"name":"DeviceLost","qualname":"::window::CreationError::DeviceLost","value":"CreationError::DeviceLost(device::DeviceLost)","parent":{"krate":0,"index":20446},"children":[],"decl_id":null,"docs":" Device is lost\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":254937,"byte_end":254964,"line_start":73,"line_end":73,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20453},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255061,"byte_end":255072,"line_start":77,"line_end":77,"column_start":5,"column_end":16},"name":"SurfaceLost","qualname":"::window::CreationError::SurfaceLost","value":"CreationError::SurfaceLost(device::SurfaceLost)","parent":{"krate":0,"index":20446},"children":[],"decl_id":null,"docs":" Surface is lost\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255029,"byte_end":255056,"line_start":76,"line_end":76,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20456},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255153,"byte_end":255164,"line_start":80,"line_end":80,"column_start":5,"column_end":16},"name":"WindowInUse","qualname":"::window::CreationError::WindowInUse","value":"CreationError::WindowInUse(device::WindowInUse)","parent":{"krate":0,"index":20446},"children":[],"decl_id":null,"docs":" Window in use\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255121,"byte_end":255148,"line_start":79,"line_end":79,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":20446},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":254779,"byte_end":254792,"line_start":68,"line_end":68,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::window::CreationError","value":"CreationError::{OutOfMemory, DeviceLost, SurfaceLost, WindowInUse}","parent":null,"children":[{"krate":0,"index":20447},{"krate":0,"index":20450},{"krate":0,"index":20453},{"krate":0,"index":20456}],"decl_id":null,"docs":" Error occurred during swapchain creation.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20477},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":256087,"byte_end":256095,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"Extent2D","qualname":"::window::Extent2D","value":"Extent2D { width, height }","parent":null,"children":[{"krate":0,"index":20478},{"krate":0,"index":20479}],"decl_id":null,"docs":" An extent describes the size of a rectangle, such as\n a window or texture. It is not used for referring to a\n sub-rectangle; for that see `command::Rect`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20478},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":256120,"byte_end":256125,"line_start":114,"line_end":114,"column_start":9,"column_end":14},"name":"width","qualname":"::window::Extent2D::width","value":"u32","parent":{"krate":0,"index":20477},"children":[],"decl_id":null,"docs":" Width\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20479},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":256163,"byte_end":256169,"line_start":116,"line_end":116,"column_start":9,"column_end":15},"name":"height","qualname":"::window::Extent2D::height","value":"u32","parent":{"krate":0,"index":20477},"children":[],"decl_id":null,"docs":" Height\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":256438,"byte_end":256447,"line_start":130,"line_end":130,"column_start":12,"column_end":21},"name":"to_extent","qualname":"<Extent2D>::to_extent","value":"fn (&self) -> image::Extent","parent":null,"children":[],"decl_id":null,"docs":" Convert into a regular image extent.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20547},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":256821,"byte_end":256840,"line_start":143,"line_end":143,"column_start":12,"column_end":31},"name":"SurfaceCapabilities","qualname":"::window::SurfaceCapabilities","value":"SurfaceCapabilities { image_count, current_extent, extents, max_image_layers, usage, composite_alpha }","parent":null,"children":[{"krate":0,"index":20548},{"krate":0,"index":20549},{"krate":0,"index":20550},{"krate":0,"index":20551},{"krate":0,"index":20552},{"krate":0,"index":20553}],"decl_id":null,"docs":" Describes information about what a `Surface`'s properties are.\n Fetch this with `surface.compatibility(device)`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20548},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257098,"byte_end":257109,"line_start":149,"line_end":149,"column_start":9,"column_end":20},"name":"image_count","qualname":"::window::SurfaceCapabilities::image_count","value":"std::ops::Range<u32>","parent":{"krate":0,"index":20547},"children":[],"decl_id":null,"docs":" Number of presentable images supported by the adapter for a swapchain\n created from this surface.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20549},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257277,"byte_end":257291,"line_start":154,"line_end":154,"column_start":9,"column_end":23},"name":"current_extent","qualname":"::window::SurfaceCapabilities::current_extent","value":"std::option::Option<window::Extent2D>","parent":{"krate":0,"index":20547},"children":[],"decl_id":null,"docs":" Current extent of the surface.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20550},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257416,"byte_end":257423,"line_start":159,"line_end":159,"column_start":9,"column_end":16},"name":"extents","qualname":"::window::SurfaceCapabilities::extents","value":"std::ops::Range<window::Extent2D>","parent":{"krate":0,"index":20547},"children":[],"decl_id":null,"docs":" Range of supported extents.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20551},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257554,"byte_end":257570,"line_start":164,"line_end":164,"column_start":9,"column_end":25},"name":"max_image_layers","qualname":"::window::SurfaceCapabilities::max_image_layers","value":"u16","parent":{"krate":0,"index":20547},"children":[],"decl_id":null,"docs":" Maximum number of layers supported for presentable images.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20552},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257632,"byte_end":257637,"line_start":167,"line_end":167,"column_start":9,"column_end":14},"name":"usage","qualname":"::window::SurfaceCapabilities::usage","value":"image::Usage","parent":{"krate":0,"index":20547},"children":[],"decl_id":null,"docs":" Supported image usage flags.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20553},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257718,"byte_end":257733,"line_start":170,"line_end":170,"column_start":9,"column_end":24},"name":"composite_alpha","qualname":"::window::SurfaceCapabilities::composite_alpha","value":"window::CompositeAlpha","parent":{"krate":0,"index":20547},"children":[],"decl_id":null,"docs":" A bitmask of supported alpha composition modes.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1362},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257866,"byte_end":257873,"line_start":175,"line_end":175,"column_start":11,"column_end":18},"name":"Surface","qualname":"::window::Surface","value":"Surface<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366}],"decl_id":null,"docs":" A `Surface` abstracts the surface of a native window, which will be presented\n on the display.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257968,"byte_end":257972,"line_start":177,"line_end":177,"column_start":8,"column_end":12},"name":"kind","qualname":"::window::Surface::kind","value":"fn (&self) -> image::Kind","parent":{"krate":0,"index":1362},"children":[],"decl_id":null,"docs":" Retrieve the surface image kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":258150,"byte_end":258171,"line_start":186,"line_end":186,"column_start":8,"column_end":29},"name":"supports_queue_family","qualname":"::window::Surface::supports_queue_family","value":"fn (&self, family: &B::QueueFamily) -> bool","parent":{"krate":0,"index":1362},"children":[],"decl_id":null,"docs":" Check if the queue family supports presentation to this surface.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":258575,"byte_end":258588,"line_start":195,"line_end":195,"column_start":8,"column_end":21},"name":"compatibility","qualname":"::window::Surface::compatibility","value":"fn (&self, physical_device: &B::PhysicalDevice) -> (SurfaceCapabilities, Option<Vec<Format>>, Vec<PresentMode>)","parent":{"krate":0,"index":1362},"children":[],"decl_id":null,"docs":" Query surface capabilities, formats, and present modes for this physical device.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1367},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":259004,"byte_end":259018,"line_start":207,"line_end":207,"column_start":10,"column_end":24},"name":"SwapImageIndex","qualname":"::window::SwapImageIndex","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Index of an image in the swapchain.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20616},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":259219,"byte_end":259228,"line_start":214,"line_end":214,"column_start":5,"column_end":14},"name":"Immediate","qualname":"::window::PresentMode::Immediate","value":"PresentMode::Immediate","parent":{"krate":0,"index":20615},"children":[],"decl_id":null,"docs":" Don't ever wait for v-sync.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20619},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":259298,"byte_end":259305,"line_start":216,"line_end":216,"column_start":5,"column_end":12},"name":"Mailbox","qualname":"::window::PresentMode::Mailbox","value":"PresentMode::Mailbox","parent":{"krate":0,"index":20615},"children":[],"decl_id":null,"docs":" Wait for v-sync, overwrite the last rendered frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20622},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":259375,"byte_end":259379,"line_start":218,"line_end":218,"column_start":5,"column_end":9},"name":"Fifo","qualname":"::window::PresentMode::Fifo","value":"PresentMode::Fifo","parent":{"krate":0,"index":20615},"children":[],"decl_id":null,"docs":" Present frames in the same order they are rendered.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20625},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":259450,"byte_end":259457,"line_start":220,"line_end":220,"column_start":5,"column_end":12},"name":"Relaxed","qualname":"::window::PresentMode::Relaxed","value":"PresentMode::Relaxed","parent":{"krate":0,"index":20615},"children":[],"decl_id":null,"docs":" Don't wait for the next v-sync if we just missed it.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":20615},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":259165,"byte_end":259176,"line_start":212,"line_end":212,"column_start":10,"column_end":21},"name":"PresentMode","qualname":"::window::PresentMode","value":"PresentMode::{Immediate, Mailbox, Fifo, Relaxed}","parent":null,"children":[{"krate":0,"index":20616},{"krate":0,"index":20619},{"krate":0,"index":20622},{"krate":0,"index":20625}],"decl_id":null,"docs":" Specifies the mode regulating how a swapchain presents frames.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":259094,"byte_end":259104,"line_start":210,"line_end":210,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":20640},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":259659,"byte_end":259673,"line_start":227,"line_end":227,"column_start":16,"column_end":30},"name":"CompositeAlpha","qualname":"::window::CompositeAlpha","value":"CompositeAlpha {  }","parent":null,"children":[{"krate":0,"index":20641}],"decl_id":null,"docs":" Specifies how the alpha channel of the images should be handled during\n compositing.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20725},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":259885,"byte_end":259891,"line_start":231,"line_end":231,"column_start":15,"column_end":21},"name":"OPAQUE","qualname":"::window::CompositeAlpha::OPAQUE","value":"CompositeAlpha","parent":{"krate":0,"index":20724},"children":[],"decl_id":null,"docs":" The alpha channel, if it exists, of the images is ignored in the\n compositing process. Instead, the image is treated as if it has a\n constant alpha of 1.0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20726},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":260164,"byte_end":260177,"line_start":236,"line_end":236,"column_start":15,"column_end":28},"name":"PREMULTIPLIED","qualname":"::window::CompositeAlpha::PREMULTIPLIED","value":"CompositeAlpha","parent":{"krate":0,"index":20724},"children":[],"decl_id":null,"docs":" The alpha channel, if it exists, of the images is respected in the\n compositing process. The non-alpha channels of the image are\n expected to already be multiplied by the alpha channel by the\n application.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20727},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":260581,"byte_end":260595,"line_start":242,"line_end":242,"column_start":15,"column_end":29},"name":"POSTMULTIPLIED","qualname":"::window::CompositeAlpha::POSTMULTIPLIED","value":"CompositeAlpha","parent":{"krate":0,"index":20724},"children":[],"decl_id":null,"docs":" The alpha channel, if it exists, of the images is respected in the\n compositing process. The non-alpha channels of the image are not\n expected to already be multiplied by the alpha channel by the\n application; instead, the compositor will multiply the non-alpha\n channels of the image by the alpha channel during compositing.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20728},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":261049,"byte_end":261056,"line_start":249,"line_end":249,"column_start":15,"column_end":22},"name":"INHERIT","qualname":"::window::CompositeAlpha::INHERIT","value":"CompositeAlpha","parent":{"krate":0,"index":20724},"children":[],"decl_id":null,"docs":" The way in which the presentation engine treats the alpha channel in\n the images is unknown to gfx-hal. Instead, the application is\n responsible for setting the composite alpha blending mode using\n native window system commands. If the application does not set the\n blending mode using native window system commands, then a\n platform-specific default will be used.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20786},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":261548,"byte_end":261563,"line_start":270,"line_end":270,"column_start":12,"column_end":27},"name":"SwapchainConfig","qualname":"::window::SwapchainConfig","value":"SwapchainConfig { present_mode, composite_alpha, format, extent, image_count, image_layers, image_usage }","parent":null,"children":[{"krate":0,"index":20787},{"krate":0,"index":20788},{"krate":0,"index":20789},{"krate":0,"index":20790},{"krate":0,"index":20791},{"krate":0,"index":20792},{"krate":0,"index":20793}],"decl_id":null,"docs":" Contains all the data necessary to create a new `Swapchain`:\n color, depth, and number of images.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20787},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":261601,"byte_end":261613,"line_start":272,"line_end":272,"column_start":9,"column_end":21},"name":"present_mode","qualname":"::window::SwapchainConfig::present_mode","value":"window::PresentMode","parent":{"krate":0,"index":20786},"children":[],"decl_id":null,"docs":" Presentation mode.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20788},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":261668,"byte_end":261683,"line_start":274,"line_end":274,"column_start":9,"column_end":24},"name":"composite_alpha","qualname":"::window::SwapchainConfig::composite_alpha","value":"window::CompositeAlpha","parent":{"krate":0,"index":20786},"children":[],"decl_id":null,"docs":" Alpha composition mode.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20789},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":261750,"byte_end":261756,"line_start":276,"line_end":276,"column_start":9,"column_end":15},"name":"format","qualname":"::window::SwapchainConfig::format","value":"format::Format","parent":{"krate":0,"index":20786},"children":[],"decl_id":null,"docs":" Format of the backbuffer images.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20790},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":261863,"byte_end":261869,"line_start":279,"line_end":279,"column_start":9,"column_end":15},"name":"extent","qualname":"::window::SwapchainConfig::extent","value":"window::Extent2D","parent":{"krate":0,"index":20786},"children":[],"decl_id":null,"docs":" Requested image extent. Must be in\n `SurfaceCapabilities::extents` range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20791},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":261993,"byte_end":262004,"line_start":282,"line_end":282,"column_start":9,"column_end":20},"name":"image_count","qualname":"::window::SwapchainConfig::image_count","value":"u32","parent":{"krate":0,"index":20786},"children":[],"decl_id":null,"docs":" Number of images in the swapchain. Must be in\n `SurfaceCapabilities::image_count` range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20792},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":262137,"byte_end":262149,"line_start":285,"line_end":285,"column_start":9,"column_end":21},"name":"image_layers","qualname":"::window::SwapchainConfig::image_layers","value":"u16","parent":{"krate":0,"index":20786},"children":[],"decl_id":null,"docs":" Number of image layers. Must be lower or equal to\n `SurfaceCapabilities::max_image_layers`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20793},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":262219,"byte_end":262230,"line_start":287,"line_end":287,"column_start":9,"column_end":20},"name":"image_usage","qualname":"::window::SwapchainConfig::image_usage","value":"image::Usage","parent":{"krate":0,"index":20786},"children":[],"decl_id":null,"docs":" Image usage of the backbuffer images.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":262420,"byte_end":262423,"line_start":298,"line_end":298,"column_start":12,"column_end":15},"name":"new","qualname":"<SwapchainConfig>::new","value":"fn (width: u32, height: u32, format: Format, image_count: SwapImageIndex) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new default configuration (color images only).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":263049,"byte_end":263058,"line_start":313,"line_end":313,"column_start":12,"column_end":21},"name":"from_caps","qualname":"<SwapchainConfig>::from_caps","value":"fn (caps: &SurfaceCapabilities, format: Format, default_extent: Extent2D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a swapchain configuration based on the capabilities\n returned from a physical device query. If the surface does not\n specify a current size, default_extent is clamped and used instead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":264585,"byte_end":264594,"line_start":355,"line_end":355,"column_start":12,"column_end":21},"name":"with_mode","qualname":"<SwapchainConfig>::with_mode","value":"fn (mut self, mode: PresentMode) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the presentation mode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":264820,"byte_end":264836,"line_start":367,"line_end":367,"column_start":12,"column_end":28},"name":"with_image_usage","qualname":"<SwapchainConfig>::with_image_usage","value":"fn (mut self, usage: image::Usage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the usage of backbuffer images.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20798},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265197,"byte_end":265207,"line_start":378,"line_end":378,"column_start":12,"column_end":22},"name":"Suboptimal","qualname":"::window::Suboptimal","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker value returned if the swapchain no longer matches the surface properties exactly,\n but can still be used to present to the surface successfully.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20803},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265422,"byte_end":265433,"line_start":385,"line_end":385,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::window::AcquireError::OutOfMemory","value":"AcquireError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":20802},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265390,"byte_end":265417,"line_start":384,"line_end":384,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20806},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265565,"byte_end":265573,"line_start":388,"line_end":388,"column_start":5,"column_end":13},"name":"NotReady","qualname":"::window::AcquireError::NotReady","value":"AcquireError::NotReady","parent":{"krate":0,"index":20802},"children":[],"decl_id":null,"docs":" No image was ready after the specified timeout expired.\n","sig":null,"attributes":[{"value":"fail(display = \"No images ready\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265524,"byte_end":265560,"line_start":387,"line_end":387,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20808},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265714,"byte_end":265723,"line_start":391,"line_end":391,"column_start":5,"column_end":14},"name":"OutOfDate","qualname":"::window::AcquireError::OutOfDate","value":"AcquireError::OutOfDate","parent":{"krate":0,"index":20802},"children":[],"decl_id":null,"docs":" The swapchain is no longer in sync with the surface, needs to be re-created.\n","sig":null,"attributes":[{"value":"fail(display = \"Swapchain is out of date\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265664,"byte_end":265709,"line_start":390,"line_end":390,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20810},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265830,"byte_end":265841,"line_start":394,"line_end":394,"column_start":5,"column_end":16},"name":"SurfaceLost","qualname":"::window::AcquireError::SurfaceLost","value":"AcquireError::SurfaceLost(device::SurfaceLost)","parent":{"krate":0,"index":20802},"children":[],"decl_id":null,"docs":" The surface was lost, and the swapchain is no longer usable.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265798,"byte_end":265825,"line_start":393,"line_end":393,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20813},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265923,"byte_end":265933,"line_start":397,"line_end":397,"column_start":5,"column_end":15},"name":"DeviceLost","qualname":"::window::AcquireError::DeviceLost","value":"AcquireError::DeviceLost(device::DeviceLost)","parent":{"krate":0,"index":20802},"children":[],"decl_id":null,"docs":" Device is lost\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265891,"byte_end":265918,"line_start":396,"line_end":396,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":20802},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":265326,"byte_end":265338,"line_start":382,"line_end":382,"column_start":10,"column_end":22},"name":"AcquireError","qualname":"::window::AcquireError","value":"AcquireError::{OutOfMemory, NotReady, OutOfDate, SurfaceLost, DeviceLost}","parent":null,"children":[{"krate":0,"index":20803},{"krate":0,"index":20806},{"krate":0,"index":20808},{"krate":0,"index":20810},{"krate":0,"index":20813}],"decl_id":null,"docs":" Error on acquiring the next image from a swapchain.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":20835},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266170,"byte_end":266181,"line_start":405,"line_end":405,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::window::PresentError::OutOfMemory","value":"PresentError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":20834},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266138,"byte_end":266165,"line_start":404,"line_end":404,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20838},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266343,"byte_end":266352,"line_start":408,"line_end":408,"column_start":5,"column_end":14},"name":"OutOfDate","qualname":"::window::PresentError::OutOfDate","value":"PresentError::OutOfDate","parent":{"krate":0,"index":20834},"children":[],"decl_id":null,"docs":" The swapchain is no longer in sync with the surface, needs to be re-created.\n","sig":null,"attributes":[{"value":"fail(display = \"Swapchain is out of date\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266293,"byte_end":266338,"line_start":407,"line_end":407,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20840},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266459,"byte_end":266470,"line_start":411,"line_end":411,"column_start":5,"column_end":16},"name":"SurfaceLost","qualname":"::window::PresentError::SurfaceLost","value":"PresentError::SurfaceLost(device::SurfaceLost)","parent":{"krate":0,"index":20834},"children":[],"decl_id":null,"docs":" The surface was lost, and the swapchain is no longer usable.\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266427,"byte_end":266454,"line_start":410,"line_end":410,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20843},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266552,"byte_end":266562,"line_start":414,"line_end":414,"column_start":5,"column_end":15},"name":"DeviceLost","qualname":"::window::PresentError::DeviceLost","value":"PresentError::DeviceLost(device::DeviceLost)","parent":{"krate":0,"index":20834},"children":[],"decl_id":null,"docs":" Device is lost\n","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266520,"byte_end":266547,"line_start":413,"line_end":413,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":20834},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266074,"byte_end":266086,"line_start":402,"line_end":402,"column_start":10,"column_end":22},"name":"PresentError","qualname":"::window::PresentError","value":"PresentError::{OutOfMemory, OutOfDate, SurfaceLost, DeviceLost}","parent":null,"children":[{"krate":0,"index":20835},{"krate":0,"index":20838},{"krate":0,"index":20840},{"krate":0,"index":20843}],"decl_id":null,"docs":" Error on acquiring the next image from a swapchain.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1373},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266740,"byte_end":266749,"line_start":419,"line_end":419,"column_start":11,"column_end":20},"name":"Swapchain","qualname":"::window::Swapchain","value":"Swapchain<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1381}],"decl_id":null,"docs":" The `Swapchain` is the backend representation of the surface.\n It consists of multiple buffers, which will be presented on the surface.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":267386,"byte_end":267399,"line_start":435,"line_end":435,"column_start":15,"column_end":28},"name":"acquire_image","qualname":"::window::Swapchain::acquire_image","value":"fn (&mut self, timeout_ns: u64, semaphore: Option<&B::Semaphore>, fence: Option<&B::Fence>) -> Result<(SwapImageIndex, Option<Suboptimal>), AcquireError>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" Acquire a new swapchain image for rendering. This needs to be called before presenting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":267867,"byte_end":267874,"line_start":454,"line_end":454,"column_start":15,"column_end":22},"name":"present","qualname":"::window::Swapchain::present","value":"fn <'a, C, S, Iw> (&'a self, present_queue: &mut CommandQueue<B, C>, image_index: SwapImageIndex, wait_semaphores: Iw) -> Result<Option<Suboptimal>, PresentError>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" Present one acquired image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":268413,"byte_end":268433,"line_start":470,"line_end":470,"column_start":15,"column_end":35},"name":"present_nosemaphores","qualname":"::window::Swapchain::present_nosemaphores","value":"fn <'a, C> (&'a self, present_queue: &mut CommandQueue<B, C>, image_index: SwapImageIndex) -> Result<Option<Suboptimal>, PresentError>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" Present one acquired image without any semaphore synchronization.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1384},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"backend","qualname":"::backend","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","parent":null,"children":[{"krate":0,"index":1385},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":20864},{"krate":0,"index":20868},{"krate":0,"index":1392},{"krate":0,"index":1396},{"krate":0,"index":1399}],"decl_id":null,"docs":" Functionality only required for backend implementations.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20864},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":269106,"byte_end":269119,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"RawQueueGroup","qualname":"::backend::RawQueueGroup","value":"RawQueueGroup { family, queues }","parent":null,"children":[{"krate":0,"index":20866},{"krate":0,"index":20867}],"decl_id":null,"docs":" Bare-metal queue group.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20866},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":269142,"byte_end":269148,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"name":"family","qualname":"::backend::RawQueueGroup::family","value":"<B as Backend>::QueueFamily","parent":{"krate":0,"index":20864},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20867},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":269174,"byte_end":269180,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"name":"queues","qualname":"::backend::RawQueueGroup::queues","value":"std::vec::Vec<<B as Backend>::CommandQueue>","parent":{"krate":0,"index":20864},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":269314,"byte_end":269317,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<RawQueueGroup<B>>::new","value":"fn (family: B::QueueFamily) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty queue group for a queue family.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":269683,"byte_end":269692,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"add_queue","qualname":"<RawQueueGroup<B>>::add_queue","value":"fn (&mut self, queue: B::CommandQueue) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a command queue to the group.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":269918,"byte_end":269921,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<Queues<B>>::new","value":"fn (queues: Vec<RawQueueGroup<B>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new collection of queues.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1399},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":270039,"byte_end":270050,"line_start":50,"line_end":50,"column_start":10,"column_end":21},"name":"FastHashMap","qualname":"::backend::FastHashMap","value":"HashMap<K, V, BuildHasherDefault<FxHasher>>","parent":null,"children":[],"decl_id":null,"docs":" Fast hash map used internally.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1365,"byte_end":1376,"line_start":61,"line_end":61,"column_start":10,"column_end":21},"name":"VertexCount","qualname":"::VertexCount","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Draw vertex count.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1403},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1422,"byte_end":1434,"line_start":63,"line_end":63,"column_start":10,"column_end":22},"name":"VertexOffset","qualname":"::VertexOffset","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Draw vertex base offset.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1479,"byte_end":1489,"line_start":65,"line_end":65,"column_start":10,"column_end":20},"name":"IndexCount","qualname":"::IndexCount","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Draw number of indices.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1405},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1536,"byte_end":1549,"line_start":67,"line_end":67,"column_start":10,"column_end":23},"name":"InstanceCount","qualname":"::InstanceCount","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Draw number of instances.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1406},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1597,"byte_end":1606,"line_start":69,"line_end":69,"column_start":10,"column_end":19},"name":"DrawCount","qualname":"::DrawCount","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Indirect draw calls count.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1407},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1657,"byte_end":1666,"line_start":71,"line_end":71,"column_start":10,"column_end":19},"name":"PatchSize","qualname":"::PatchSize","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Number of vertices in a patch\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1408},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1709,"byte_end":1723,"line_start":73,"line_end":73,"column_start":10,"column_end":24},"name":"WorkGroupCount","qualname":"::WorkGroupCount","value":"[u32; 3]","parent":null,"children":[],"decl_id":null,"docs":" Number of work groups.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1410},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1773,"byte_end":1786,"line_start":76,"line_end":76,"column_start":10,"column_end":23},"name":"AttributeSlot","qualname":"::AttributeSlot","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Slot for an attribute.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1411},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1841,"byte_end":1859,"line_start":78,"line_end":78,"column_start":10,"column_end":28},"name":"ConstantBufferSlot","qualname":"::ConstantBufferSlot","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Slot for a constant buffer object.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1412},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1912,"byte_end":1928,"line_start":80,"line_end":80,"column_start":10,"column_end":26},"name":"ResourceViewSlot","qualname":"::ResourceViewSlot","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Slot for a shader resource view.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1413},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1985,"byte_end":2002,"line_start":82,"line_end":82,"column_start":10,"column_end":27},"name":"UnorderedViewSlot","qualname":"::UnorderedViewSlot","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Slot for an unordered access object.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1414},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":2055,"byte_end":2064,"line_start":84,"line_end":84,"column_start":10,"column_end":19},"name":"ColorSlot","qualname":"::ColorSlot","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Slot for an active color buffer.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1415},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":2104,"byte_end":2115,"line_start":86,"line_end":86,"column_start":10,"column_end":21},"name":"SamplerSlot","qualname":"::SamplerSlot","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Slot for a sampler.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20871},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":2342,"byte_end":2350,"line_start":92,"line_end":92,"column_start":16,"column_end":24},"name":"Features","qualname":"::Features","value":"Features {  }","parent":null,"children":[{"krate":0,"index":20872}],"decl_id":null,"docs":" Features that the device supports.\n These only include features of the core interface and not API extensions.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21013},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":2418,"byte_end":2427,"line_start":94,"line_end":94,"column_start":15,"column_end":24},"name":"CORE_MASK","qualname":"::Features::CORE_MASK","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Bit mask of Vulkan Core features.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21014},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":2522,"byte_end":2538,"line_start":96,"line_end":96,"column_start":15,"column_end":31},"name":"PORTABILITY_MASK","qualname":"::Features::PORTABILITY_MASK","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Bit mask of Vulkan Portability features.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21015},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":2718,"byte_end":2738,"line_start":100,"line_end":100,"column_start":15,"column_end":35},"name":"ROBUST_BUFFER_ACCESS","qualname":"::Features::ROBUST_BUFFER_ACCESS","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support for robust buffer access.\n Buffer access by SPIR-V shaders is checked against the buffer/image boundaries.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21016},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":2949,"byte_end":2968,"line_start":103,"line_end":103,"column_start":15,"column_end":34},"name":"FULL_DRAW_INDEX_U32","qualname":"::Features::FULL_DRAW_INDEX_U32","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support the full 32-bit range of indexed for draw calls.\n If not supported, the maximum index value is determined by `Limits::max_draw_index_value`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21017},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":3051,"byte_end":3067,"line_start":105,"line_end":105,"column_start":15,"column_end":31},"name":"IMAGE_CUBE_ARRAY","qualname":"::Features::IMAGE_CUBE_ARRAY","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support cube array image views.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21018},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":3207,"byte_end":3227,"line_start":107,"line_end":107,"column_start":15,"column_end":35},"name":"INDEPENDENT_BLENDING","qualname":"::Features::INDEPENDENT_BLENDING","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support different color blending settings per attachments on graphics pipeline creation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21019},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":3303,"byte_end":3318,"line_start":109,"line_end":109,"column_start":15,"column_end":30},"name":"GEOMETRY_SHADER","qualname":"::Features::GEOMETRY_SHADER","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support geometry shader.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21020},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":3399,"byte_end":3418,"line_start":111,"line_end":111,"column_start":15,"column_end":34},"name":"TESSELLATION_SHADER","qualname":"::Features::TESSELLATION_SHADER","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support tessellation shaders.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21021},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":3527,"byte_end":3546,"line_start":113,"line_end":113,"column_start":15,"column_end":34},"name":"SAMPLE_RATE_SHADING","qualname":"::Features::SAMPLE_RATE_SHADING","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support per-sample shading and multisample interpolation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21022},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":3627,"byte_end":3644,"line_start":115,"line_end":115,"column_start":15,"column_end":32},"name":"DUAL_SRC_BLENDING","qualname":"::Features::DUAL_SRC_BLENDING","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support dual source blending.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21023},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":3721,"byte_end":3729,"line_start":117,"line_end":117,"column_start":15,"column_end":23},"name":"LOGIC_OP","qualname":"::Features::LOGIC_OP","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support logic operations.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21024},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":3822,"byte_end":3841,"line_start":119,"line_end":119,"column_start":15,"column_end":34},"name":"MULTI_DRAW_INDIRECT","qualname":"::Features::MULTI_DRAW_INDIRECT","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support multiple draws per indirect call.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21025},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":4013,"byte_end":4041,"line_start":122,"line_end":122,"column_start":15,"column_end":43},"name":"DRAW_INDIRECT_FIRST_INSTANCE","qualname":"::Features::DRAW_INDIRECT_FIRST_INSTANCE","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support indirect drawing with first instance value.\n If not supported the first instance value **must** be 0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21026},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":4115,"byte_end":4126,"line_start":124,"line_end":124,"column_start":15,"column_end":26},"name":"DEPTH_CLAMP","qualname":"::Features::DEPTH_CLAMP","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support depth clamping.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21027},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":4206,"byte_end":4222,"line_start":126,"line_end":126,"column_start":15,"column_end":31},"name":"DEPTH_BIAS_CLAMP","qualname":"::Features::DEPTH_BIAS_CLAMP","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support depth bias clamping.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21028},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":4305,"byte_end":4326,"line_start":128,"line_end":128,"column_start":15,"column_end":36},"name":"NON_FILL_POLYGON_MODE","qualname":"::Features::NON_FILL_POLYGON_MODE","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support non-fill polygon modes.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21029},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":4404,"byte_end":4416,"line_start":130,"line_end":130,"column_start":15,"column_end":27},"name":"DEPTH_BOUNDS","qualname":"::Features::DEPTH_BOUNDS","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support depth bounds test.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21030},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":4508,"byte_end":4518,"line_start":132,"line_end":132,"column_start":15,"column_end":25},"name":"LINE_WIDTH","qualname":"::Features::LINE_WIDTH","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support lines with width other than 1.0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21031},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":4612,"byte_end":4622,"line_start":134,"line_end":134,"column_start":15,"column_end":25},"name":"POINT_SIZE","qualname":"::Features::POINT_SIZE","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support points with size greater than 1.0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21032},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":4714,"byte_end":4726,"line_start":136,"line_end":136,"column_start":15,"column_end":27},"name":"ALPHA_TO_ONE","qualname":"::Features::ALPHA_TO_ONE","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support replacing alpha values with 1.0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21033},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":4818,"byte_end":4833,"line_start":138,"line_end":138,"column_start":15,"column_end":30},"name":"MULTI_VIEWPORTS","qualname":"::Features::MULTI_VIEWPORTS","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support multiple viewports and scissors.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21034},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":4915,"byte_end":4933,"line_start":140,"line_end":140,"column_start":15,"column_end":33},"name":"SAMPLER_ANISOTROPY","qualname":"::Features::SAMPLER_ANISOTROPY","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support anisotropic filtering.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21035},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":5026,"byte_end":5037,"line_start":142,"line_end":142,"column_start":15,"column_end":26},"name":"FORMAT_ETC2","qualname":"::Features::FORMAT_ETC2","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support ETC2 texture compression formats.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21036},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":5136,"byte_end":5151,"line_start":144,"line_end":144,"column_start":15,"column_end":30},"name":"FORMAT_ASTC_LDR","qualname":"::Features::FORMAT_ASTC_LDR","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support ASTC (LDR) texture compression formats.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21037},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":5242,"byte_end":5251,"line_start":146,"line_end":146,"column_start":15,"column_end":24},"name":"FORMAT_BC","qualname":"::Features::FORMAT_BC","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support BC texture compression formats.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21038},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":5476,"byte_end":5499,"line_start":149,"line_end":149,"column_start":15,"column_end":38},"name":"PRECISE_OCCLUSION_QUERY","qualname":"::Features::PRECISE_OCCLUSION_QUERY","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support precise occlusion queries, returning the actual number of samples.\n If not supported, queries return a non-zero value when at least **one** sample passes.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21039},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":5588,"byte_end":5613,"line_start":151,"line_end":151,"column_start":15,"column_end":40},"name":"PIPELINE_STATISTICS_QUERY","qualname":"::Features::PIPELINE_STATISTICS_QUERY","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support query of pipeline statistics.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21040},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":5865,"byte_end":5890,"line_start":155,"line_end":155,"column_start":15,"column_end":40},"name":"VERTEX_STORES_AND_ATOMICS","qualname":"::Features::VERTEX_STORES_AND_ATOMICS","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support unordered access stores and atomic ops in the vertex, geometry\n and tessellation shader stage.\n If not supported, the shader resources **must** be annotated as read-only.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21041},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":6104,"byte_end":6131,"line_start":158,"line_end":158,"column_start":15,"column_end":42},"name":"FRAGMENT_STORES_AND_ATOMICS","qualname":"::Features::FRAGMENT_STORES_AND_ATOMICS","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support unordered access stores and atomic ops in the fragment shader stage\n If not supported, the shader resources **must** be annotated as read-only.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21042},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":6182,"byte_end":6225,"line_start":160,"line_end":160,"column_start":15,"column_end":58},"name":"SHADER_TESSELLATION_AND_GEOMETRY_POINT_SIZE","qualname":"::Features::SHADER_TESSELLATION_AND_GEOMETRY_POINT_SIZE","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21043},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":6276,"byte_end":6304,"line_start":162,"line_end":162,"column_start":15,"column_end":43},"name":"SHADER_IMAGE_GATHER_EXTENDED","qualname":"::Features::SHADER_IMAGE_GATHER_EXTENDED","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21044},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":6355,"byte_end":6392,"line_start":164,"line_end":164,"column_start":15,"column_end":52},"name":"SHADER_STORAGE_IMAGE_EXTENDED_FORMATS","qualname":"::Features::SHADER_STORAGE_IMAGE_EXTENDED_FORMATS","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21045},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":6443,"byte_end":6475,"line_start":166,"line_end":166,"column_start":15,"column_end":47},"name":"SHADER_STORAGE_IMAGE_MULTISAMPLE","qualname":"::Features::SHADER_STORAGE_IMAGE_MULTISAMPLE","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21046},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":6526,"byte_end":6566,"line_start":168,"line_end":168,"column_start":15,"column_end":55},"name":"SHADER_STORAGE_IMAGE_READ_WITHOUT_FORMAT","qualname":"::Features::SHADER_STORAGE_IMAGE_READ_WITHOUT_FORMAT","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21047},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":6617,"byte_end":6658,"line_start":170,"line_end":170,"column_start":15,"column_end":56},"name":"SHADER_STORAGE_IMAGE_WRITE_WITHOUT_FORMAT","qualname":"::Features::SHADER_STORAGE_IMAGE_WRITE_WITHOUT_FORMAT","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21048},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":6709,"byte_end":6753,"line_start":172,"line_end":172,"column_start":15,"column_end":59},"name":"SHADER_UNIFORM_BUFFER_ARRAY_DYNAMIC_INDEXING","qualname":"::Features::SHADER_UNIFORM_BUFFER_ARRAY_DYNAMIC_INDEXING","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21049},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":6804,"byte_end":6847,"line_start":174,"line_end":174,"column_start":15,"column_end":58},"name":"SHADER_SAMPLED_IMAGE_ARRAY_DYNAMIC_INDEXING","qualname":"::Features::SHADER_SAMPLED_IMAGE_ARRAY_DYNAMIC_INDEXING","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21050},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":6898,"byte_end":6942,"line_start":176,"line_end":176,"column_start":15,"column_end":59},"name":"SHADER_STORAGE_BUFFER_ARRAY_DYNAMIC_INDEXING","qualname":"::Features::SHADER_STORAGE_BUFFER_ARRAY_DYNAMIC_INDEXING","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21051},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":6993,"byte_end":7036,"line_start":178,"line_end":178,"column_start":15,"column_end":58},"name":"SHADER_STORAGE_IMAGE_ARRAY_DYNAMIC_INDEXING","qualname":"::Features::SHADER_STORAGE_IMAGE_ARRAY_DYNAMIC_INDEXING","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21052},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7087,"byte_end":7107,"line_start":180,"line_end":180,"column_start":15,"column_end":35},"name":"SHADER_CLIP_DISTANCE","qualname":"::Features::SHADER_CLIP_DISTANCE","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21053},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7158,"byte_end":7178,"line_start":182,"line_end":182,"column_start":15,"column_end":35},"name":"SHADER_CULL_DISTANCE","qualname":"::Features::SHADER_CULL_DISTANCE","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21054},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7229,"byte_end":7243,"line_start":184,"line_end":184,"column_start":15,"column_end":29},"name":"SHADER_FLOAT64","qualname":"::Features::SHADER_FLOAT64","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21055},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7294,"byte_end":7306,"line_start":186,"line_end":186,"column_start":15,"column_end":27},"name":"SHADER_INT64","qualname":"::Features::SHADER_INT64","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21056},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7357,"byte_end":7369,"line_start":188,"line_end":188,"column_start":15,"column_end":27},"name":"SHADER_INT16","qualname":"::Features::SHADER_INT16","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21057},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7420,"byte_end":7445,"line_start":190,"line_end":190,"column_start":15,"column_end":40},"name":"SHADER_RESOURCE_RESIDENCY","qualname":"::Features::SHADER_RESOURCE_RESIDENCY","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21058},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7496,"byte_end":7519,"line_start":192,"line_end":192,"column_start":15,"column_end":38},"name":"SHADER_RESOURCE_MIN_LOD","qualname":"::Features::SHADER_RESOURCE_MIN_LOD","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21059},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7570,"byte_end":7584,"line_start":194,"line_end":194,"column_start":15,"column_end":29},"name":"SPARSE_BINDING","qualname":"::Features::SPARSE_BINDING","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21060},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7635,"byte_end":7658,"line_start":196,"line_end":196,"column_start":15,"column_end":38},"name":"SPARSE_RESIDENCY_BUFFER","qualname":"::Features::SPARSE_RESIDENCY_BUFFER","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21061},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7709,"byte_end":7734,"line_start":198,"line_end":198,"column_start":15,"column_end":40},"name":"SPARSE_RESIDENCY_IMAGE_2D","qualname":"::Features::SPARSE_RESIDENCY_IMAGE_2D","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21062},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7785,"byte_end":7810,"line_start":200,"line_end":200,"column_start":15,"column_end":40},"name":"SPARSE_RESIDENCY_IMAGE_3D","qualname":"::Features::SPARSE_RESIDENCY_IMAGE_3D","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21063},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7861,"byte_end":7887,"line_start":202,"line_end":202,"column_start":15,"column_end":41},"name":"SPARSE_RESIDENCY_2_SAMPLES","qualname":"::Features::SPARSE_RESIDENCY_2_SAMPLES","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21064},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":7938,"byte_end":7964,"line_start":204,"line_end":204,"column_start":15,"column_end":41},"name":"SPARSE_RESIDENCY_4_SAMPLES","qualname":"::Features::SPARSE_RESIDENCY_4_SAMPLES","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21065},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":8015,"byte_end":8041,"line_start":206,"line_end":206,"column_start":15,"column_end":41},"name":"SPARSE_RESIDENCY_8_SAMPLES","qualname":"::Features::SPARSE_RESIDENCY_8_SAMPLES","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21066},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":8092,"byte_end":8119,"line_start":208,"line_end":208,"column_start":15,"column_end":42},"name":"SPARSE_RESIDENCY_16_SAMPLES","qualname":"::Features::SPARSE_RESIDENCY_16_SAMPLES","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21067},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":8170,"byte_end":8194,"line_start":210,"line_end":210,"column_start":15,"column_end":39},"name":"SPARSE_RESIDENCY_ALIASED","qualname":"::Features::SPARSE_RESIDENCY_ALIASED","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21068},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":8245,"byte_end":8270,"line_start":212,"line_end":212,"column_start":15,"column_end":40},"name":"VARIABLE_MULTISAMPLE_RATE","qualname":"::Features::VARIABLE_MULTISAMPLE_RATE","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21069},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":8321,"byte_end":8338,"line_start":214,"line_end":214,"column_start":15,"column_end":32},"name":"INHERITED_QUERIES","qualname":"::Features::INHERITED_QUERIES","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21070},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":8431,"byte_end":8443,"line_start":217,"line_end":217,"column_start":15,"column_end":27},"name":"TRIANGLE_FAN","qualname":"::Features::TRIANGLE_FAN","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support triangle fan primitive topology.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21071},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":8563,"byte_end":8590,"line_start":219,"line_end":219,"column_start":15,"column_end":42},"name":"SEPARATE_STENCIL_REF_VALUES","qualname":"::Features::SEPARATE_STENCIL_REF_VALUES","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support separate stencil reference values for front and back sides.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21072},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":8704,"byte_end":8717,"line_start":221,"line_end":221,"column_start":15,"column_end":28},"name":"INSTANCE_RATE","qualname":"::Features::INSTANCE_RATE","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support manually specified vertex attribute rates (divisors).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21073},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":8811,"byte_end":8831,"line_start":223,"line_end":223,"column_start":15,"column_end":35},"name":"SAMPLER_MIP_LOD_BIAS","qualname":"::Features::SAMPLER_MIP_LOD_BIAS","value":"Features","parent":{"krate":0,"index":21012},"children":[],"decl_id":null,"docs":" Support non-zero mipmap bias on samplers.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21302},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9043,"byte_end":9049,"line_start":230,"line_end":230,"column_start":12,"column_end":18},"name":"Limits","qualname":"::Limits","value":"Limits { max_image_1d_size, max_image_2d_size, max_image_3d_size, max_image_cube_size, max_image_array_layers, max_texel_elements, max_uniform_buffer_range, max_storage_buffer_range, max_push_constants_size, max_memory_allocation_count, max_sampler_allocation_count, max_bound_descriptor_sets, max_per_stage_descriptor_samplers, max_per_stage_descriptor_uniform_buffers, max_per_stage_descriptor_storage_buffers, max_per_stage_descriptor_sampled_images, max_per_stage_descriptor_storage_images, max_per_stage_descriptor_input_attachments, max_per_stage_resources, max_descriptor_set_samplers, max_descriptor_set_uniform_buffers, max_descriptor_set_uniform_buffers_dynamic, max_descriptor_set_storage_buffers, max_descriptor_set_storage_buffers_dynamic, max_descriptor_set_sampled_images, max_descriptor_set_storage_images, max_descriptor_set_input_attachments, max_vertex_input_attributes, max_vertex_input_bindings, max_vertex_input_attribute_offset, max_vertex_input_binding_stride, max_vertex_output_components, max_patch_size, max_geometry_shader_invocations, max_geometry_input_components, max_geometry_output_components, max_geometry_output_vertices, max_geometry_total_output_components, max_fragment_input_components, max_fragment_output_attachments, max_fragment_dual_source_attachments, max_fragment_combined_output_resources, max_compute_shared_memory_size, max_compute_work_group_count, max_compute_work_group_invocations, max_compute_work_group_size, max_draw_indexed_index_value, max_draw_indirect_count, max_sampler_lod_bias, max_sampler_anisotropy, max_viewports, max_viewport_dimensions, max_framebuffer_extent, min_memory_map_alignment, buffer_image_granularity, min_texel_buffer_offset_alignment, min_uniform_buffer_offset_alignment, min_storage_buffer_offset_alignment, framebuffer_color_samples_count, framebuffer_depth_samples_count, framebuffer_stencil_samples_count, max_color_attachments, standard_sample_locations, optimal_buffer_copy_offset_alignment, optimal_buffer_copy_pitch_alignment, non_coherent_atom_size, min_vertex_input_binding_stride_alignment }","parent":null,"children":[{"krate":0,"index":21303},{"krate":0,"index":21304},{"krate":0,"index":21305},{"krate":0,"index":21306},{"krate":0,"index":21307},{"krate":0,"index":21308},{"krate":0,"index":21309},{"krate":0,"index":21310},{"krate":0,"index":21311},{"krate":0,"index":21312},{"krate":0,"index":21313},{"krate":0,"index":21314},{"krate":0,"index":21315},{"krate":0,"index":21316},{"krate":0,"index":21317},{"krate":0,"index":21318},{"krate":0,"index":21319},{"krate":0,"index":21320},{"krate":0,"index":21321},{"krate":0,"index":21322},{"krate":0,"index":21323},{"krate":0,"index":21324},{"krate":0,"index":21325},{"krate":0,"index":21326},{"krate":0,"index":21327},{"krate":0,"index":21328},{"krate":0,"index":21329},{"krate":0,"index":21330},{"krate":0,"index":21331},{"krate":0,"index":21332},{"krate":0,"index":21333},{"krate":0,"index":21334},{"krate":0,"index":21335},{"krate":0,"index":21336},{"krate":0,"index":21337},{"krate":0,"index":21338},{"krate":0,"index":21339},{"krate":0,"index":21340},{"krate":0,"index":21341},{"krate":0,"index":21342},{"krate":0,"index":21343},{"krate":0,"index":21344},{"krate":0,"index":21345},{"krate":0,"index":21346},{"krate":0,"index":21347},{"krate":0,"index":21348},{"krate":0,"index":21350},{"krate":0,"index":21351},{"krate":0,"index":21352},{"krate":0,"index":21353},{"krate":0,"index":21354},{"krate":0,"index":21355},{"krate":0,"index":21357},{"krate":0,"index":21358},{"krate":0,"index":21359},{"krate":0,"index":21360},{"krate":0,"index":21361},{"krate":0,"index":21362},{"krate":0,"index":21363},{"krate":0,"index":21364},{"krate":0,"index":21365},{"krate":0,"index":21366},{"krate":0,"index":21367},{"krate":0,"index":21368},{"krate":0,"index":21369},{"krate":0,"index":21370},{"krate":0,"index":21371}],"decl_id":null,"docs":" Resource limits of a particular graphics device.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21303},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9101,"byte_end":9118,"line_start":232,"line_end":232,"column_start":9,"column_end":26},"name":"max_image_1d_size","qualname":"::Limits::max_image_1d_size","value":"u32","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum supported image 1D size.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21304},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9182,"byte_end":9199,"line_start":234,"line_end":234,"column_start":9,"column_end":26},"name":"max_image_2d_size","qualname":"::Limits::max_image_2d_size","value":"u32","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum supported image 2D size.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21305},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9263,"byte_end":9280,"line_start":236,"line_end":236,"column_start":9,"column_end":26},"name":"max_image_3d_size","qualname":"::Limits::max_image_3d_size","value":"u32","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum supported image 3D size.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21306},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9346,"byte_end":9365,"line_start":238,"line_end":238,"column_start":9,"column_end":28},"name":"max_image_cube_size","qualname":"::Limits::max_image_cube_size","value":"u32","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum supported image cube size.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21307},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9432,"byte_end":9454,"line_start":240,"line_end":240,"column_start":9,"column_end":31},"name":"max_image_array_layers","qualname":"::Limits::max_image_array_layers","value":"u16","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum supporter image array size.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21308},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9540,"byte_end":9558,"line_start":242,"line_end":242,"column_start":9,"column_end":27},"name":"max_texel_elements","qualname":"::Limits::max_texel_elements","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum number of elements for the BufferView to see.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21309},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9583,"byte_end":9607,"line_start":244,"line_end":244,"column_start":9,"column_end":33},"name":"max_uniform_buffer_range","qualname":"::Limits::max_uniform_buffer_range","value":"u64","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21310},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9641,"byte_end":9665,"line_start":246,"line_end":246,"column_start":9,"column_end":33},"name":"max_storage_buffer_range","qualname":"::Limits::max_storage_buffer_range","value":"u64","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21311},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9699,"byte_end":9722,"line_start":248,"line_end":248,"column_start":9,"column_end":32},"name":"max_push_constants_size","qualname":"::Limits::max_push_constants_size","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21312},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9747,"byte_end":9774,"line_start":250,"line_end":250,"column_start":9,"column_end":36},"name":"max_memory_allocation_count","qualname":"::Limits::max_memory_allocation_count","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21313},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9799,"byte_end":9827,"line_start":252,"line_end":252,"column_start":9,"column_end":37},"name":"max_sampler_allocation_count","qualname":"::Limits::max_sampler_allocation_count","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21314},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9852,"byte_end":9877,"line_start":254,"line_end":254,"column_start":9,"column_end":34},"name":"max_bound_descriptor_sets","qualname":"::Limits::max_bound_descriptor_sets","value":"u16","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21315},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9921,"byte_end":9954,"line_start":257,"line_end":257,"column_start":9,"column_end":42},"name":"max_per_stage_descriptor_samplers","qualname":"::Limits::max_per_stage_descriptor_samplers","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21316},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":9979,"byte_end":10019,"line_start":259,"line_end":259,"column_start":9,"column_end":49},"name":"max_per_stage_descriptor_uniform_buffers","qualname":"::Limits::max_per_stage_descriptor_uniform_buffers","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21317},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10044,"byte_end":10084,"line_start":261,"line_end":261,"column_start":9,"column_end":49},"name":"max_per_stage_descriptor_storage_buffers","qualname":"::Limits::max_per_stage_descriptor_storage_buffers","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21318},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10109,"byte_end":10148,"line_start":263,"line_end":263,"column_start":9,"column_end":48},"name":"max_per_stage_descriptor_sampled_images","qualname":"::Limits::max_per_stage_descriptor_sampled_images","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21319},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10173,"byte_end":10212,"line_start":265,"line_end":265,"column_start":9,"column_end":48},"name":"max_per_stage_descriptor_storage_images","qualname":"::Limits::max_per_stage_descriptor_storage_images","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21320},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10237,"byte_end":10279,"line_start":267,"line_end":267,"column_start":9,"column_end":51},"name":"max_per_stage_descriptor_input_attachments","qualname":"::Limits::max_per_stage_descriptor_input_attachments","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21321},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10304,"byte_end":10327,"line_start":269,"line_end":269,"column_start":9,"column_end":32},"name":"max_per_stage_resources","qualname":"::Limits::max_per_stage_resources","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21322},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10353,"byte_end":10380,"line_start":272,"line_end":272,"column_start":9,"column_end":36},"name":"max_descriptor_set_samplers","qualname":"::Limits::max_descriptor_set_samplers","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21323},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10405,"byte_end":10439,"line_start":274,"line_end":274,"column_start":9,"column_end":43},"name":"max_descriptor_set_uniform_buffers","qualname":"::Limits::max_descriptor_set_uniform_buffers","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21324},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10464,"byte_end":10506,"line_start":276,"line_end":276,"column_start":9,"column_end":51},"name":"max_descriptor_set_uniform_buffers_dynamic","qualname":"::Limits::max_descriptor_set_uniform_buffers_dynamic","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21325},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10531,"byte_end":10565,"line_start":278,"line_end":278,"column_start":9,"column_end":43},"name":"max_descriptor_set_storage_buffers","qualname":"::Limits::max_descriptor_set_storage_buffers","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21326},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10590,"byte_end":10632,"line_start":280,"line_end":280,"column_start":9,"column_end":51},"name":"max_descriptor_set_storage_buffers_dynamic","qualname":"::Limits::max_descriptor_set_storage_buffers_dynamic","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21327},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10657,"byte_end":10690,"line_start":282,"line_end":282,"column_start":9,"column_end":42},"name":"max_descriptor_set_sampled_images","qualname":"::Limits::max_descriptor_set_sampled_images","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21328},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10715,"byte_end":10748,"line_start":284,"line_end":284,"column_start":9,"column_end":42},"name":"max_descriptor_set_storage_images","qualname":"::Limits::max_descriptor_set_storage_images","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21329},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10773,"byte_end":10809,"line_start":286,"line_end":286,"column_start":9,"column_end":45},"name":"max_descriptor_set_input_attachments","qualname":"::Limits::max_descriptor_set_input_attachments","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21330},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":10924,"byte_end":10951,"line_start":289,"line_end":289,"column_start":9,"column_end":36},"name":"max_vertex_input_attributes","qualname":"::Limits::max_vertex_input_attributes","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum number of vertex input attributes that can be specified for a graphics pipeline.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21331},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11087,"byte_end":11112,"line_start":291,"line_end":291,"column_start":9,"column_end":34},"name":"max_vertex_input_bindings","qualname":"::Limits::max_vertex_input_bindings","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum number of vertex buffers that can be specified for providing vertex attributes to a graphics pipeline.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21332},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11229,"byte_end":11262,"line_start":293,"line_end":293,"column_start":9,"column_end":42},"name":"max_vertex_input_attribute_offset","qualname":"::Limits::max_vertex_input_attribute_offset","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum vertex input attribute offset that can be added to the vertex input binding stride.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21333},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11372,"byte_end":11403,"line_start":295,"line_end":295,"column_start":9,"column_end":40},"name":"max_vertex_input_binding_stride","qualname":"::Limits::max_vertex_input_binding_stride","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum vertex input binding stride that can be specified in a vertex input binding.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21334},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11517,"byte_end":11545,"line_start":297,"line_end":297,"column_start":9,"column_end":37},"name":"max_vertex_output_components","qualname":"::Limits::max_vertex_output_components","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum number of components of output variables which can be output by a vertex shader.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21335},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11614,"byte_end":11628,"line_start":300,"line_end":300,"column_start":9,"column_end":23},"name":"max_patch_size","qualname":"::Limits::max_patch_size","value":"u8","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum number of vertices for each patch.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21336},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11657,"byte_end":11688,"line_start":302,"line_end":302,"column_start":9,"column_end":40},"name":"max_geometry_shader_invocations","qualname":"::Limits::max_geometry_shader_invocations","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21337},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11713,"byte_end":11742,"line_start":304,"line_end":304,"column_start":9,"column_end":38},"name":"max_geometry_input_components","qualname":"::Limits::max_geometry_input_components","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21338},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11767,"byte_end":11797,"line_start":306,"line_end":306,"column_start":9,"column_end":39},"name":"max_geometry_output_components","qualname":"::Limits::max_geometry_output_components","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21339},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11822,"byte_end":11850,"line_start":308,"line_end":308,"column_start":9,"column_end":37},"name":"max_geometry_output_vertices","qualname":"::Limits::max_geometry_output_vertices","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21340},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11875,"byte_end":11911,"line_start":310,"line_end":310,"column_start":9,"column_end":45},"name":"max_geometry_total_output_components","qualname":"::Limits::max_geometry_total_output_components","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21341},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11936,"byte_end":11965,"line_start":312,"line_end":312,"column_start":9,"column_end":38},"name":"max_fragment_input_components","qualname":"::Limits::max_fragment_input_components","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21342},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":11990,"byte_end":12021,"line_start":314,"line_end":314,"column_start":9,"column_end":40},"name":"max_fragment_output_attachments","qualname":"::Limits::max_fragment_output_attachments","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21343},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12046,"byte_end":12082,"line_start":316,"line_end":316,"column_start":9,"column_end":45},"name":"max_fragment_dual_source_attachments","qualname":"::Limits::max_fragment_dual_source_attachments","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21344},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12107,"byte_end":12145,"line_start":318,"line_end":318,"column_start":9,"column_end":47},"name":"max_fragment_combined_output_resources","qualname":"::Limits::max_fragment_combined_output_resources","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21345},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12171,"byte_end":12201,"line_start":321,"line_end":321,"column_start":9,"column_end":39},"name":"max_compute_shared_memory_size","qualname":"::Limits::max_compute_shared_memory_size","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21346},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12226,"byte_end":12254,"line_start":323,"line_end":323,"column_start":9,"column_end":37},"name":"max_compute_work_group_count","qualname":"::Limits::max_compute_work_group_count","value":"[u32; _]","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21347},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12288,"byte_end":12322,"line_start":325,"line_end":325,"column_start":9,"column_end":43},"name":"max_compute_work_group_invocations","qualname":"::Limits::max_compute_work_group_invocations","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21348},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12347,"byte_end":12374,"line_start":327,"line_end":327,"column_start":9,"column_end":36},"name":"max_compute_work_group_size","qualname":"::Limits::max_compute_work_group_size","value":"[u32; _]","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21350},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12403,"byte_end":12431,"line_start":330,"line_end":330,"column_start":9,"column_end":37},"name":"max_draw_indexed_index_value","qualname":"::Limits::max_draw_indexed_index_value","value":"u32","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21351},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12461,"byte_end":12484,"line_start":332,"line_end":332,"column_start":9,"column_end":32},"name":"max_draw_indirect_count","qualname":"::Limits::max_draw_indirect_count","value":"u32","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21352},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12518,"byte_end":12538,"line_start":335,"line_end":335,"column_start":9,"column_end":29},"name":"max_sampler_lod_bias","qualname":"::Limits::max_sampler_lod_bias","value":"f32","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21353},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12599,"byte_end":12621,"line_start":337,"line_end":337,"column_start":9,"column_end":31},"name":"max_sampler_anisotropy","qualname":"::Limits::max_sampler_anisotropy","value":"f32","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum degree of sampler anisotropy.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21354},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12674,"byte_end":12687,"line_start":340,"line_end":340,"column_start":9,"column_end":22},"name":"max_viewports","qualname":"::Limits::max_viewports","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum number of viewports.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21355},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12712,"byte_end":12735,"line_start":342,"line_end":342,"column_start":9,"column_end":32},"name":"max_viewport_dimensions","qualname":"::Limits::max_viewport_dimensions","value":"[u32; _]","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21357},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12771,"byte_end":12793,"line_start":344,"line_end":344,"column_start":9,"column_end":31},"name":"max_framebuffer_extent","qualname":"::Limits::max_framebuffer_extent","value":"image::Extent","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21358},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12827,"byte_end":12851,"line_start":347,"line_end":347,"column_start":9,"column_end":33},"name":"min_memory_map_alignment","qualname":"::Limits::min_memory_map_alignment","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21359},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":12876,"byte_end":12900,"line_start":349,"line_end":349,"column_start":9,"column_end":33},"name":"buffer_image_granularity","qualname":"::Limits::buffer_image_granularity","value":"u64","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21360},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":13015,"byte_end":13048,"line_start":351,"line_end":351,"column_start":9,"column_end":42},"name":"min_texel_buffer_offset_alignment","qualname":"::Limits::min_texel_buffer_offset_alignment","value":"u64","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" The alignment of the start of buffer used as a texel buffer, in bytes, non-zero.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21361},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":13172,"byte_end":13207,"line_start":353,"line_end":353,"column_start":9,"column_end":44},"name":"min_uniform_buffer_offset_alignment","qualname":"::Limits::min_uniform_buffer_offset_alignment","value":"u64","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" The alignment of the start of buffer used for uniform buffer updates, in bytes, non-zero.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21362},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":13324,"byte_end":13359,"line_start":355,"line_end":355,"column_start":9,"column_end":44},"name":"min_storage_buffer_offset_alignment","qualname":"::Limits::min_storage_buffer_offset_alignment","value":"u64","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" The alignment of the start of buffer used as a storage buffer, in bytes, non-zero.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21363},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":13483,"byte_end":13514,"line_start":357,"line_end":357,"column_start":9,"column_end":40},"name":"framebuffer_color_samples_count","qualname":"::Limits::framebuffer_color_samples_count","value":"u8","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Number of samples supported for color attachments of framebuffers (floating/fixed point).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21364},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":13618,"byte_end":13649,"line_start":359,"line_end":359,"column_start":9,"column_end":40},"name":"framebuffer_depth_samples_count","qualname":"::Limits::framebuffer_depth_samples_count","value":"u8","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Number of samples supported for depth attachments of framebuffers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21365},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":13755,"byte_end":13788,"line_start":361,"line_end":361,"column_start":9,"column_end":42},"name":"framebuffer_stencil_samples_count","qualname":"::Limits::framebuffer_stencil_samples_count","value":"u8","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Number of samples supported for stencil attachments of framebuffers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21366},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":13909,"byte_end":13930,"line_start":363,"line_end":363,"column_start":9,"column_end":30},"name":"max_color_attachments","qualname":"::Limits::max_color_attachments","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Maximum number of color attachments that can be used by a subpass in a render pass.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21367},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":13955,"byte_end":13980,"line_start":365,"line_end":365,"column_start":9,"column_end":34},"name":"standard_sample_locations","qualname":"::Limits::standard_sample_locations","value":"bool","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21368},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":14092,"byte_end":14128,"line_start":367,"line_end":367,"column_start":9,"column_end":45},"name":"optimal_buffer_copy_offset_alignment","qualname":"::Limits::optimal_buffer_copy_offset_alignment","value":"u64","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" The alignment of the start of the buffer used as a GPU copy source, in bytes, non-zero.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21369},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":14298,"byte_end":14333,"line_start":370,"line_end":370,"column_start":9,"column_end":44},"name":"optimal_buffer_copy_pitch_alignment","qualname":"::Limits::optimal_buffer_copy_pitch_alignment","value":"u64","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" The alignment of the row pitch of the texture data stored in a buffer that is\n used in a GPU copy operation, in bytes, non-zero.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21370},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":14455,"byte_end":14477,"line_start":372,"line_end":372,"column_start":9,"column_end":31},"name":"non_coherent_atom_size","qualname":"::Limits::non_coherent_atom_size","value":"usize","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" Size and alignment in bytes that bounds concurrent access to host-mapped device memory.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21371},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":14546,"byte_end":14587,"line_start":375,"line_end":375,"column_start":9,"column_end":50},"name":"min_vertex_input_binding_stride_alignment","qualname":"::Limits::min_vertex_input_binding_stride_alignment","value":"u64","parent":{"krate":0,"index":21302},"children":[],"decl_id":null,"docs":" The alignment of the vertex buffer stride.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21570},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":14901,"byte_end":14910,"line_start":385,"line_end":385,"column_start":5,"column_end":14},"name":"PointList","qualname":"::Primitive::PointList","value":"Primitive::PointList","parent":{"krate":0,"index":21569},"children":[],"decl_id":null,"docs":" Each vertex represents a single point.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21572},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":15096,"byte_end":15104,"line_start":388,"line_end":388,"column_start":5,"column_end":13},"name":"LineList","qualname":"::Primitive::LineList","value":"Primitive::LineList","parent":{"krate":0,"index":21569},"children":[],"decl_id":null,"docs":" Each pair of vertices represent a single line segment. For example, with `[a, b, c, d,\n e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21574},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":15349,"byte_end":15358,"line_start":392,"line_end":392,"column_start":5,"column_end":14},"name":"LineStrip","qualname":"::Primitive::LineStrip","value":"Primitive::LineStrip","parent":{"krate":0,"index":21569},"children":[],"decl_id":null,"docs":" Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of\n lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line\n line, and `b` and `c` form a line.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21576},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":15533,"byte_end":15545,"line_start":395,"line_end":395,"column_start":5,"column_end":17},"name":"TriangleList","qualname":"::Primitive::TriangleList","value":"Primitive::TriangleList","parent":{"krate":0,"index":21569},"children":[],"decl_id":null,"docs":" Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`,\n `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21578},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":15737,"byte_end":15750,"line_start":398,"line_end":398,"column_start":5,"column_end":18},"name":"TriangleStrip","qualname":"::Primitive::TriangleStrip","value":"Primitive::TriangleStrip","parent":{"krate":0,"index":21569},"children":[],"decl_id":null,"docs":" Every three consecutive vertices represent a single triangle. For example, with `[a, b, c,\n d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21580},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":15971,"byte_end":15988,"line_start":402,"line_end":402,"column_start":5,"column_end":22},"name":"LineListAdjacency","qualname":"::Primitive::LineListAdjacency","value":"Primitive::LineListAdjacency","parent":{"krate":0,"index":21569},"children":[],"decl_id":null,"docs":" Each quadtruplet of vertices represent a single line segment with adjacency information.\n For example, with `[a, b, c, d]`, `b` and `c` form a line, and `a` and `d` are the adjacent\n vertices.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21582},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":16253,"byte_end":16271,"line_start":406,"line_end":406,"column_start":5,"column_end":23},"name":"LineStripAdjacency","qualname":"::Primitive::LineStripAdjacency","value":"Primitive::LineStripAdjacency","parent":{"krate":0,"index":21569},"children":[],"decl_id":null,"docs":" Every four consecutive vertices represent a single line segment with adjacency information.\n For example, with `[a, b, c, d, e]`, `[a, b, c, d]` form a line segment with adjacency, and\n `[b, c, d, e]` form a line segment with adjacency.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21584},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":16659,"byte_end":16680,"line_start":411,"line_end":411,"column_start":5,"column_end":26},"name":"TriangleListAdjacency","qualname":"::Primitive::TriangleListAdjacency","value":"Primitive::TriangleListAdjacency","parent":{"krate":0,"index":21569},"children":[],"decl_id":null,"docs":" Each sextuplet of vertices represent a single triangle with adjacency information. For\n example, with `[a, b, c, d, e, f]`, `a`, `c`, and `e` form a triangle, and `b`, `d`, and\n `f` are the adjacent vertices, where `b` is adjacent to the edge formed by `a` and `c`, `d`\n is adjacent to the edge `c` and `e`, and `f` is adjacent to the edge `e` and `a`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21586},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":17204,"byte_end":17226,"line_start":418,"line_end":418,"column_start":5,"column_end":27},"name":"TriangleStripAdjacency","qualname":"::Primitive::TriangleStripAdjacency","value":"Primitive::TriangleStripAdjacency","parent":{"krate":0,"index":21569},"children":[],"decl_id":null,"docs":" Every even-numbered vertex (every other starting from the first) represents an additional\n vertex for the triangle strip, while odd-numbered vertices (every other starting from the\n second) represent adjacent vertices. For example, with `[a, b, c, d, e, f, g, h]`, `[a, c,\n e, g]` form a triangle strip, and `[b, d, f, h]` are the adjacent vertices, where `b`, `d`,\n and `f` are adjacent to the first triangle in the strip, and `d`, `f`, and `h` are adjacent\n to the second.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21588},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":17338,"byte_end":17347,"line_start":421,"line_end":421,"column_start":5,"column_end":14},"name":"PatchList","qualname":"::Primitive::PatchList","value":"Primitive::PatchList(PatchSize)","parent":{"krate":0,"index":21569},"children":[],"decl_id":null,"docs":" Patch list,\n used with shaders capable of producing primitives on their own (tessellation)\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":21569},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":14838,"byte_end":14847,"line_start":383,"line_end":383,"column_start":10,"column_end":19},"name":"Primitive","qualname":"::Primitive","value":"Primitive::{PointList, LineList, LineStrip, TriangleList, TriangleStrip, LineListAdjacency, LineStripAdjacency, TriangleListAdjacency, TriangleStripAdjacency, PatchList}","parent":null,"children":[{"krate":0,"index":21570},{"krate":0,"index":21572},{"krate":0,"index":21574},{"krate":0,"index":21576},{"krate":0,"index":21578},{"krate":0,"index":21580},{"krate":0,"index":21582},{"krate":0,"index":21584},{"krate":0,"index":21586},{"krate":0,"index":21588}],"decl_id":null,"docs":" Describes the type of geometric primitives,\n created from vertex data.\n","sig":null,"attributes":[{"value":"repr(u8)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":14817,"byte_end":14828,"line_start":382,"line_end":382,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":21674},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":17630,"byte_end":17633,"line_start":430,"line_end":430,"column_start":5,"column_end":8},"name":"U16","qualname":"::IndexType::U16","value":"IndexType::U16","parent":{"krate":0,"index":21673},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21676},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":17639,"byte_end":17642,"line_start":431,"line_end":431,"column_start":5,"column_end":8},"name":"U32","qualname":"::IndexType::U32","value":"IndexType::U32","parent":{"krate":0,"index":21673},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":21673},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":17614,"byte_end":17623,"line_start":429,"line_end":429,"column_start":10,"column_end":19},"name":"IndexType","qualname":"::IndexType","value":"IndexType::{U16, U32}","parent":null,"children":[{"krate":0,"index":21674},{"krate":0,"index":21676}],"decl_id":null,"docs":" An enum describing the type of an index value in a slice's index buffer\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":17439,"byte_end":17461,"line_start":425,"line_end":425,"column_start":1,"column_end":23}},{"value":"repr(u8)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":17593,"byte_end":17604,"line_start":428,"line_end":428,"column_start":1,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1416},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18517,"byte_end":18525,"line_start":457,"line_end":457,"column_start":11,"column_end":19},"name":"Instance","qualname":"::Instance","value":"Instance: Any + Send + Sync","parent":null,"children":[{"krate":0,"index":1417},{"krate":0,"index":1418}],"decl_id":null,"docs":" An instantiated backend.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1417},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18606,"byte_end":18613,"line_start":459,"line_end":459,"column_start":10,"column_end":17},"name":"Backend","qualname":"::Instance::Backend","value":"type Backend: Backend;","parent":{"krate":0,"index":1416},"children":[],"decl_id":null,"docs":" Associated backend type of this instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18670,"byte_end":18688,"line_start":461,"line_end":461,"column_start":8,"column_end":26},"name":"enumerate_adapters","qualname":"::Instance::enumerate_adapters","value":"fn (&self) -> Vec<Adapter<Self::Backend>>","parent":{"krate":0,"index":1416},"children":[],"decl_id":null,"docs":" Return all available adapters.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18957,"byte_end":18964,"line_start":468,"line_end":468,"column_start":11,"column_end":18},"name":"Backend","qualname":"::Backend","value":"Backend: 'static + Sized + Eq + Clone + Hash + fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446}],"decl_id":null,"docs":" The `Backend` trait wraps together all the types needed\n for a graphics backend. Each backend module, such as OpenGL\n or Metal, will implement this trait with its own concrete types.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18924,"byte_end":18946,"line_start":467,"line_end":467,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1420},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19092,"byte_end":19106,"line_start":470,"line_end":470,"column_start":10,"column_end":24},"name":"PhysicalDevice","qualname":"::Backend::PhysicalDevice","value":"type PhysicalDevice: PhysicalDevice<Self>;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1421},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19139,"byte_end":19145,"line_start":471,"line_end":471,"column_start":10,"column_end":16},"name":"Device","qualname":"::Backend::Device","value":"type Device: Device<Self>;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1422},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19171,"byte_end":19178,"line_start":473,"line_end":473,"column_start":10,"column_end":17},"name":"Surface","qualname":"::Backend::Surface","value":"type Surface: Surface<Self>;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1423},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19204,"byte_end":19213,"line_start":474,"line_end":474,"column_start":10,"column_end":19},"name":"Swapchain","qualname":"::Backend::Swapchain","value":"type Swapchain: Swapchain<Self>;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1424},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19242,"byte_end":19253,"line_start":476,"line_end":476,"column_start":10,"column_end":21},"name":"QueueFamily","qualname":"::Backend::QueueFamily","value":"type QueueFamily: QueueFamily;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1425},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19277,"byte_end":19289,"line_start":477,"line_end":477,"column_start":10,"column_end":22},"name":"CommandQueue","qualname":"::Backend::CommandQueue","value":"type CommandQueue: queue::RawCommandQueue<Self>;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1426},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19330,"byte_end":19343,"line_start":478,"line_end":478,"column_start":10,"column_end":23},"name":"CommandBuffer","qualname":"::Backend::CommandBuffer","value":"type CommandBuffer: command::RawCommandBuffer<Self>;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1427},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19388,"byte_end":19400,"line_start":480,"line_end":480,"column_start":10,"column_end":22},"name":"ShaderModule","qualname":"::Backend::ShaderModule","value":"type ShaderModule: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1428},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19443,"byte_end":19453,"line_start":481,"line_end":481,"column_start":10,"column_end":20},"name":"RenderPass","qualname":"::Backend::RenderPass","value":"type RenderPass: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1429},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19496,"byte_end":19507,"line_start":482,"line_end":482,"column_start":10,"column_end":21},"name":"Framebuffer","qualname":"::Backend::Framebuffer","value":"type Framebuffer: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1430},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19551,"byte_end":19557,"line_start":484,"line_end":484,"column_start":10,"column_end":16},"name":"Memory","qualname":"::Backend::Memory","value":"type Memory: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19600,"byte_end":19611,"line_start":485,"line_end":485,"column_start":10,"column_end":21},"name":"CommandPool","qualname":"::Backend::CommandPool","value":"type CommandPool: pool::RawCommandPool<Self>;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19651,"byte_end":19657,"line_start":487,"line_end":487,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::Backend::Buffer","value":"type Buffer: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1433},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19700,"byte_end":19710,"line_start":488,"line_end":488,"column_start":10,"column_end":20},"name":"BufferView","qualname":"::Backend::BufferView","value":"type BufferView: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1434},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19753,"byte_end":19758,"line_start":489,"line_end":489,"column_start":10,"column_end":15},"name":"Image","qualname":"::Backend::Image","value":"type Image: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1435},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19801,"byte_end":19810,"line_start":490,"line_end":490,"column_start":10,"column_end":19},"name":"ImageView","qualname":"::Backend::ImageView","value":"type ImageView: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19853,"byte_end":19860,"line_start":491,"line_end":491,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::Backend::Sampler","value":"type Sampler: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1437},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19904,"byte_end":19919,"line_start":493,"line_end":493,"column_start":10,"column_end":25},"name":"ComputePipeline","qualname":"::Backend::ComputePipeline","value":"type ComputePipeline: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1438},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19962,"byte_end":19978,"line_start":494,"line_end":494,"column_start":10,"column_end":26},"name":"GraphicsPipeline","qualname":"::Backend::GraphicsPipeline","value":"type GraphicsPipeline: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20021,"byte_end":20034,"line_start":495,"line_end":495,"column_start":10,"column_end":23},"name":"PipelineCache","qualname":"::Backend::PipelineCache","value":"type PipelineCache: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1440},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20077,"byte_end":20091,"line_start":496,"line_end":496,"column_start":10,"column_end":24},"name":"PipelineLayout","qualname":"::Backend::PipelineLayout","value":"type PipelineLayout: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1441},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20134,"byte_end":20148,"line_start":497,"line_end":497,"column_start":10,"column_end":24},"name":"DescriptorPool","qualname":"::Backend::DescriptorPool","value":"type DescriptorPool: pso::DescriptorPool<Self>;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1442},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20186,"byte_end":20199,"line_start":498,"line_end":498,"column_start":10,"column_end":23},"name":"DescriptorSet","qualname":"::Backend::DescriptorSet","value":"type DescriptorSet: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1443},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20242,"byte_end":20261,"line_start":499,"line_end":499,"column_start":10,"column_end":29},"name":"DescriptorSetLayout","qualname":"::Backend::DescriptorSetLayout","value":"type DescriptorSetLayout: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20305,"byte_end":20310,"line_start":501,"line_end":501,"column_start":10,"column_end":15},"name":"Fence","qualname":"::Backend::Fence","value":"type Fence: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1445},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20353,"byte_end":20362,"line_start":502,"line_end":502,"column_start":10,"column_end":19},"name":"Semaphore","qualname":"::Backend::Semaphore","value":"type Semaphore: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20405,"byte_end":20414,"line_start":503,"line_end":503,"column_start":10,"column_end":19},"name":"QueryPool","qualname":"::Backend::QueryPool","value":"type QueryPool: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":1419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":21739},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20633,"byte_end":20648,"line_start":509,"line_end":509,"column_start":10,"column_end":25},"name":"SubmissionError","qualname":"::SubmissionError","value":"SubmissionError::{}","parent":null,"children":[],"decl_id":null,"docs":" Marks that an error occurred submitting a command to a command buffer.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1451},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20985,"byte_end":21001,"line_start":524,"line_end":524,"column_start":10,"column_end":26},"name":"SubmissionResult","qualname":"::SubmissionResult","value":"Result<T, SubmissionError>","parent":null,"children":[],"decl_id":null,"docs":" Submission result for DX11 backend.  Currently mostly unused.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21788},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":21218,"byte_end":21221,"line_start":531,"line_end":531,"column_start":12,"column_end":15},"name":"Gpu","qualname":"::Gpu","value":"Gpu { device, queues }","parent":null,"children":[{"krate":0,"index":21790},{"krate":0,"index":21791}],"decl_id":null,"docs":" Represents a combination of a logical device and the\n hardware queues it provides.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21790},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":21288,"byte_end":21294,"line_start":533,"line_end":533,"column_start":9,"column_end":15},"name":"device","qualname":"::Gpu::device","value":"<B as Backend>::Device","parent":{"krate":0,"index":21788},"children":[],"decl_id":null,"docs":" Logical device for a given backend.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":21791},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":21368,"byte_end":21374,"line_start":535,"line_end":535,"column_start":9,"column_end":15},"name":"queues","qualname":"::Gpu::queues","value":"queue::family::Queues<B>","parent":{"krate":0,"index":21788},"children":[],"decl_id":null,"docs":" The command queues that the device provides.\n","sig":null,"attributes":[]}],"impls":[{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":22407,"byte_end":22419,"line_start":25,"line_end":25,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":26961,"byte_end":26968,"line_start":158,"line_end":158,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":29610,"byte_end":29623,"line_start":34,"line_end":34,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30233,"byte_end":30250,"line_start":55,"line_end":55,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30903,"byte_end":30908,"line_start":86,"line_end":86,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\compute.rs","byte_start":40313,"byte_end":40326,"line_start":10,"line_end":10,"column_start":59,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":43283,"byte_end":43293,"line_start":50,"line_end":50,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":43399,"byte_end":43409,"line_start":55,"line_end":55,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":43507,"byte_end":43517,"line_start":60,"line_end":60,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":43624,"byte_end":43637,"line_start":66,"line_end":66,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":44177,"byte_end":44197,"line_start":81,"line_end":81,"column_start":34,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":44666,"byte_end":44679,"line_start":100,"line_end":100,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":46841,"byte_end":46854,"line_start":166,"line_end":166,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":51989,"byte_end":52002,"line_start":323,"line_end":323,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":53050,"byte_end":53063,"line_start":355,"line_end":355,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55117,"byte_end":55130,"line_start":31,"line_end":31,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55796,"byte_end":55809,"line_start":59,"line_end":59,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57740,"byte_end":57768,"line_start":114,"line_end":114,"column_start":34,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":76362,"byte_end":76381,"line_start":37,"line_end":37,"column_start":50,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":81709,"byte_end":81732,"line_start":232,"line_end":232,"column_start":22,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":422},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":83251,"byte_end":83274,"line_start":281,"line_end":281,"column_start":32,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":83450,"byte_end":83473,"line_start":288,"line_end":288,"column_start":35,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":83593,"byte_end":83616,"line_start":294,"line_end":294,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":84015,"byte_end":84041,"line_start":309,"line_end":309,"column_start":22,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":445},{"krate":0,"index":449},{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":85944,"byte_end":85970,"line_start":368,"line_end":368,"column_start":31,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":86332,"byte_end":86352,"line_start":382,"line_end":382,"column_start":27,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":86835,"byte_end":86855,"line_start":397,"line_end":397,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":87439,"byte_end":87459,"line_start":414,"line_end":414,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":88173,"byte_end":88193,"line_start":435,"line_end":435,"column_start":37,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":88393,"byte_end":88413,"line_start":442,"line_end":442,"column_start":40,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":88558,"byte_end":88578,"line_start":448,"line_end":448,"column_start":29,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":88777,"byte_end":88797,"line_start":459,"line_end":459,"column_start":48,"column_end":68},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":88933,"byte_end":88953,"line_start":467,"line_end":467,"column_start":50,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":91211,"byte_end":91224,"line_start":62,"line_end":62,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34399,"byte_end":34406,"line_start":42,"line_end":42,"column_start":15,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34525,"byte_end":34534,"line_start":47,"line_end":47,"column_start":15,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34852,"byte_end":34859,"line_start":58,"line_end":58,"column_start":16,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":35281,"byte_end":35290,"line_start":68,"line_end":68,"column_start":16,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36005,"byte_end":36018,"line_start":85,"line_end":85,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36267,"byte_end":36280,"line_start":96,"line_end":96,"column_start":9,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36355,"byte_end":36368,"line_start":100,"line_end":100,"column_start":58,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36473,"byte_end":36486,"line_start":106,"line_end":106,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36780,"byte_end":36793,"line_start":115,"line_end":115,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":37229,"byte_end":37242,"line_start":128,"line_end":128,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":37545,"byte_end":37558,"line_start":136,"line_end":136,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":38053,"byte_end":38066,"line_start":152,"line_end":152,"column_start":40,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":39547,"byte_end":39560,"line_start":199,"line_end":199,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95837,"byte_end":95852,"line_start":69,"line_end":69,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95976,"byte_end":95991,"line_start":75,"line_end":75,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":96497,"byte_end":96512,"line_start":93,"line_end":93,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97177,"byte_end":97186,"line_start":113,"line_end":113,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":98318,"byte_end":98329,"line_start":149,"line_end":149,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":126238,"byte_end":126248,"line_start":52,"line_end":52,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":128135,"byte_end":128142,"line_start":116,"line_end":116,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":128328,"byte_end":128335,"line_start":121,"line_end":121,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146684,"byte_end":146690,"line_start":581,"line_end":581,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":505,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148743,"byte_end":148749,"line_start":35,"line_end":35,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":149635,"byte_end":149641,"line_start":71,"line_end":71,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":151778,"byte_end":151791,"line_start":133,"line_end":133,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":516,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":153058,"byte_end":153067,"line_start":171,"line_end":171,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":155671,"byte_end":155675,"line_start":257,"line_end":257,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":835},{"krate":0,"index":838},{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":160444,"byte_end":160449,"line_start":401,"line_end":401,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":161649,"byte_end":161652,"line_start":434,"line_end":434,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":161742,"byte_end":161745,"line_start":440,"line_end":440,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":162069,"byte_end":162080,"line_start":451,"line_end":451,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":162298,"byte_end":162309,"line_start":461,"line_end":461,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":163704,"byte_end":163715,"line_start":500,"line_end":500,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":564,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":171215,"byte_end":171220,"line_start":26,"line_end":26,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":565,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":171535,"byte_end":171541,"line_start":40,"line_end":40,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":566,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":171700,"byte_end":171706,"line_start":46,"line_end":46,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":567,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":172241,"byte_end":172247,"line_start":64,"line_end":64,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":568,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":172406,"byte_end":172412,"line_start":70,"line_end":70,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":569,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":172552,"byte_end":172558,"line_start":77,"line_end":77,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":586,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":176969,"byte_end":176976,"line_start":112,"line_end":112,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":593,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178911,"byte_end":178924,"line_start":45,"line_end":45,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":596,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":180715,"byte_end":180725,"line_start":94,"line_end":94,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":601,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":183700,"byte_end":183707,"line_start":168,"line_end":168,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":602,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":183889,"byte_end":183896,"line_start":177,"line_end":177,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":603,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":184081,"byte_end":184088,"line_start":183,"line_end":183,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":604,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":184127,"byte_end":184134,"line_start":184,"line_end":184,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":607,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":186242,"byte_end":186253,"line_start":61,"line_end":61,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":979},{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":608,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":187946,"byte_end":187957,"line_start":111,"line_end":111,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":609,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\compute.rs","byte_start":199652,"byte_end":199671,"line_start":19,"line_end":19,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":626,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":215035,"byte_end":215055,"line_start":130,"line_end":130,"column_start":22,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":635,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":218318,"byte_end":218328,"line_start":220,"line_end":220,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":642,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":221033,"byte_end":221048,"line_start":28,"line_end":28,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]},{"id":653,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":224297,"byte_end":224315,"line_start":111,"line_end":111,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":658,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225805,"byte_end":225814,"line_start":51,"line_end":51,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":663,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":227454,"byte_end":227461,"line_start":105,"line_end":105,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":666,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":228654,"byte_end":228664,"line_start":144,"line_end":144,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":667,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":229469,"byte_end":229479,"line_start":173,"line_end":173,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":670,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":229762,"byte_end":229776,"line_start":184,"line_end":184,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":673,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":230367,"byte_end":230376,"line_start":204,"line_end":204,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1090}],"docs":"","sig":null,"attributes":[]},{"id":674,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":230443,"byte_end":230452,"line_start":210,"line_end":210,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":679,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":233046,"byte_end":233057,"line_start":275,"line_end":275,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":682,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":233904,"byte_end":233915,"line_start":305,"line_end":305,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":689,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189246,"byte_end":189259,"line_start":34,"line_end":34,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":696,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192137,"byte_end":192153,"line_start":120,"line_end":120,"column_start":22,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":697,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192591,"byte_end":192596,"line_start":133,"line_end":133,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":698,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":193254,"byte_end":193264,"line_start":157,"line_end":157,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":701,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195491,"byte_end":195505,"line_start":225,"line_end":225,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":702,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195696,"byte_end":195710,"line_start":233,"line_end":233,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]},{"id":703,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196090,"byte_end":196104,"line_start":252,"line_end":252,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":704,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196603,"byte_end":196619,"line_start":277,"line_end":277,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1125}],"docs":"","sig":null,"attributes":[]},{"id":705,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196713,"byte_end":196730,"line_start":281,"line_end":281,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":708,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":197707,"byte_end":197712,"line_start":311,"line_end":311,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134}],"docs":"","sig":null,"attributes":[]},{"id":711,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235471,"byte_end":235484,"line_start":24,"line_end":24,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":718,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":245657,"byte_end":245664,"line_start":29,"line_end":29,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1148}],"docs":"","sig":null,"attributes":[]},{"id":719,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":245833,"byte_end":245841,"line_start":37,"line_end":37,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":720,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246032,"byte_end":246039,"line_start":45,"line_end":45,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":721,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246229,"byte_end":246237,"line_start":53,"line_end":53,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":722,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246607,"byte_end":246608,"line_start":66,"line_end":66,"column_start":25,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":723,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246640,"byte_end":246647,"line_start":67,"line_end":67,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":724,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246678,"byte_end":246685,"line_start":68,"line_end":68,"column_start":28,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":725,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246717,"byte_end":246724,"line_start":69,"line_end":69,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":726,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246756,"byte_end":246764,"line_start":70,"line_end":70,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":727,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246796,"byte_end":246803,"line_start":71,"line_end":71,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":728,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246845,"byte_end":246852,"line_start":73,"line_end":73,"column_start":38,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":729,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246893,"byte_end":246901,"line_start":74,"line_end":74,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":730,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246942,"byte_end":246949,"line_start":75,"line_end":75,"column_start":38,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":733,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":249629,"byte_end":249639,"line_start":48,"line_end":48,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1219}],"docs":"","sig":null,"attributes":[]},{"id":734,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":249800,"byte_end":249810,"line_start":55,"line_end":55,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1223}],"docs":"","sig":null,"attributes":[]},{"id":735,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":250569,"byte_end":250575,"line_start":79,"line_end":79,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":738,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":241810,"byte_end":241822,"line_start":98,"line_end":98,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1291},{"krate":0,"index":1295},{"krate":0,"index":1301},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":739,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":251814,"byte_end":251819,"line_start":16,"line_end":16,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":740,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":251984,"byte_end":251991,"line_start":25,"line_end":25,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1321}],"docs":"","sig":null,"attributes":[]},{"id":741,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":252143,"byte_end":252152,"line_start":34,"line_end":34,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":742,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":252306,"byte_end":252315,"line_start":43,"line_end":43,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1329}],"docs":"","sig":null,"attributes":[]},{"id":745,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255225,"byte_end":255238,"line_start":83,"line_end":83,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":746,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255376,"byte_end":255389,"line_start":89,"line_end":89,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":747,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255526,"byte_end":255539,"line_start":95,"line_end":95,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1355}],"docs":"","sig":null,"attributes":[]},{"id":748,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255678,"byte_end":255691,"line_start":101,"line_end":101,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1357}],"docs":"","sig":null,"attributes":[]},{"id":751,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":256216,"byte_end":256224,"line_start":119,"line_end":119,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":752,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":256371,"byte_end":256379,"line_start":128,"line_end":128,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":757,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":262254,"byte_end":262269,"line_start":290,"line_end":290,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":762,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":269224,"byte_end":269237,"line_start":20,"line_end":20,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1394},{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":763,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":269852,"byte_end":269858,"line_start":42,"line_end":42,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":774,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20675,"byte_end":20690,"line_start":511,"line_end":511,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":775,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20820,"byte_end":20835,"line_start":517,"line_end":517,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1450}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1060,"byte_end":1067,"line_start":40,"line_end":40,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":51}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1077,"byte_end":1083,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":85}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1093,"byte_end":1100,"line_start":42,"line_end":42,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":99}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1110,"byte_end":1116,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":611}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1126,"byte_end":1131,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":772}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1141,"byte_end":1147,"line_start":45,"line_end":45,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":773}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1157,"byte_end":1162,"line_start":46,"line_end":46,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":802}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1172,"byte_end":1179,"line_start":47,"line_end":47,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":860}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1189,"byte_end":1195,"line_start":48,"line_end":48,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":895}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1205,"byte_end":1209,"line_start":49,"line_end":49,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":916}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1219,"byte_end":1223,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":947}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1233,"byte_end":1236,"line_start":51,"line_end":51,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":988}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1246,"byte_end":1251,"line_start":52,"line_end":52,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1136}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1261,"byte_end":1266,"line_start":53,"line_end":53,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1142}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238466,"byte_end":238476,"line_start":9,"line_end":9,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1143}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":238486,"byte_end":238492,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1196}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1276,"byte_end":1281,"line_start":54,"line_end":54,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1304}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1291,"byte_end":1297,"line_start":55,"line_end":55,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1334}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":1323,"byte_end":1330,"line_start":58,"line_end":58,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1384}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":22407,"byte_end":22419,"line_start":25,"line_end":25,"column_start":22,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1453},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":23516,"byte_end":23521,"line_start":54,"line_end":54,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":69}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":23524,"byte_end":23527,"line_start":54,"line_end":54,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2309},"to":{"krate":0,"index":69}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":23530,"byte_end":23534,"line_start":54,"line_end":54,"column_start":58,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":69}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":23537,"byte_end":23541,"line_start":54,"line_end":54,"column_start":65,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":69}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\adapter.rs","byte_start":26961,"byte_end":26968,"line_start":158,"line_end":158,"column_start":18,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":29610,"byte_end":29623,"line_start":34,"line_end":34,"column_start":36,"column_end":49},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1775},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30233,"byte_end":30250,"line_start":55,"line_end":55,"column_start":36,"column_end":53},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1798},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\buffer.rs","byte_start":30903,"byte_end":30908,"line_start":86,"line_end":86,"column_start":6,"column_end":11},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\compute.rs","byte_start":40313,"byte_end":40326,"line_start":10,"line_end":10,"column_start":59,"column_end":72},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":3089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":43283,"byte_end":43293,"line_start":50,"line_end":50,"column_start":20,"column_end":30},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2188},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":43399,"byte_end":43409,"line_start":55,"line_end":55,"column_start":20,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2188},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":43507,"byte_end":43517,"line_start":60,"line_end":60,"column_start":20,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2188},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":43624,"byte_end":43637,"line_start":66,"line_end":66,"column_start":27,"column_end":40},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2685},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":44177,"byte_end":44197,"line_start":81,"line_end":81,"column_start":34,"column_end":54},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2697},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":44666,"byte_end":44679,"line_start":100,"line_end":100,"column_start":27,"column_end":40},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2705},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":46841,"byte_end":46854,"line_start":166,"line_end":166,"column_start":60,"column_end":73},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":51989,"byte_end":52002,"line_start":323,"line_end":323,"column_start":50,"column_end":63},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\graphics.rs","byte_start":53050,"byte_end":53063,"line_start":355,"line_end":355,"column_start":69,"column_end":82},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55117,"byte_end":55130,"line_start":31,"line_end":31,"column_start":26,"column_end":39},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2685},"to":{"krate":2,"index":7486}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":55796,"byte_end":55809,"line_start":59,"line_end":59,"column_start":21,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2705},"to":{"krate":2,"index":7486}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":57740,"byte_end":57768,"line_start":114,"line_end":114,"column_start":34,"column_end":62},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2826},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":58247,"byte_end":58252,"line_start":128,"line_end":128,"column_start":46,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":263}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":58255,"byte_end":58258,"line_start":128,"line_end":128,"column_start":54,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":2309},"to":{"krate":0,"index":263}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":58261,"byte_end":58265,"line_start":128,"line_end":128,"column_start":60,"column_end":64},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":263}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\raw.rs","byte_start":58268,"byte_end":58272,"line_start":128,"line_end":128,"column_start":67,"column_end":71},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":263}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":76362,"byte_end":76381,"line_start":37,"line_end":37,"column_start":50,"column_end":69},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2845},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":81709,"byte_end":81732,"line_start":232,"line_end":232,"column_start":22,"column_end":45},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2854},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":83251,"byte_end":83274,"line_start":281,"line_end":281,"column_start":32,"column_end":55},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2854},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":83450,"byte_end":83473,"line_start":288,"line_end":288,"column_start":35,"column_end":58},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2854},"to":{"krate":2,"index":1714}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":83593,"byte_end":83616,"line_start":294,"line_end":294,"column_start":31,"column_end":54},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2854},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":84015,"byte_end":84041,"line_start":309,"line_end":309,"column_start":22,"column_end":48},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2863},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":85944,"byte_end":85970,"line_start":368,"line_end":368,"column_start":31,"column_end":57},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2863},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":86332,"byte_end":86352,"line_start":382,"line_end":382,"column_start":27,"column_end":47},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2872},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":86835,"byte_end":86855,"line_start":397,"line_end":397,"column_start":18,"column_end":38},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2872},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":87439,"byte_end":87459,"line_start":414,"line_end":414,"column_start":18,"column_end":38},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2872},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":88173,"byte_end":88193,"line_start":435,"line_end":435,"column_start":37,"column_end":57},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2872},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":88393,"byte_end":88413,"line_start":442,"line_end":442,"column_start":40,"column_end":60},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2872},"to":{"krate":2,"index":1714}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":88558,"byte_end":88578,"line_start":448,"line_end":448,"column_start":29,"column_end":49},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2872},"to":{"krate":2,"index":2285}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":88777,"byte_end":88797,"line_start":459,"line_end":459,"column_start":48,"column_end":68},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2872},"to":{"krate":0,"index":548}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\render_pass.rs","byte_start":88933,"byte_end":88953,"line_start":467,"line_end":467,"column_start":50,"column_end":70},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2872},"to":{"krate":0,"index":335}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\transfer.rs","byte_start":91211,"byte_end":91224,"line_start":62,"line_end":62,"column_start":60,"column_end":73},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34399,"byte_end":34406,"line_start":42,"line_end":42,"column_start":15,"column_end":22},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3077},"to":{"krate":0,"index":542}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34525,"byte_end":34534,"line_start":47,"line_end":47,"column_start":15,"column_end":24},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3080},"to":{"krate":0,"index":542}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":34852,"byte_end":34859,"line_start":58,"line_end":58,"column_start":16,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3083},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":35281,"byte_end":35290,"line_start":68,"line_end":68,"column_start":16,"column_end":25},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3086},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":35443,"byte_end":35449,"line_start":71,"line_end":71,"column_start":61,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":2285},"to":{"krate":0,"index":548}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36005,"byte_end":36018,"line_start":85,"line_end":85,"column_start":35,"column_end":48},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3089},"to":{"krate":2,"index":2285}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36267,"byte_end":36280,"line_start":96,"line_end":96,"column_start":9,"column_end":22},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3089},"to":{"krate":0,"index":548}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36355,"byte_end":36368,"line_start":100,"line_end":100,"column_start":58,"column_end":71},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3089},"to":{"krate":0,"index":335}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36473,"byte_end":36486,"line_start":106,"line_end":106,"column_start":21,"column_end":34},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":36780,"byte_end":36793,"line_start":115,"line_end":115,"column_start":21,"column_end":34},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":37229,"byte_end":37242,"line_start":128,"line_end":128,"column_start":21,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":37545,"byte_end":37558,"line_start":136,"line_end":136,"column_start":21,"column_end":34},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":3089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":38053,"byte_end":38066,"line_start":152,"line_end":152,"column_start":40,"column_end":53},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\command\\mod.rs","byte_start":39547,"byte_end":39560,"line_start":199,"line_end":199,"column_start":30,"column_end":43},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":3089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95837,"byte_end":95852,"line_start":69,"line_end":69,"column_start":28,"column_end":43},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":3183},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":95976,"byte_end":95991,"line_start":75,"line_end":75,"column_start":27,"column_end":42},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3183},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":96497,"byte_end":96512,"line_start":93,"line_end":93,"column_start":28,"column_end":43},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":3208},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":97177,"byte_end":97186,"line_start":113,"line_end":113,"column_start":28,"column_end":37},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":3232},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":98318,"byte_end":98329,"line_start":149,"line_end":149,"column_start":28,"column_end":39},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":3317},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":99250,"byte_end":99255,"line_start":175,"line_end":175,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":654}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":99258,"byte_end":99261,"line_start":175,"line_end":175,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2309},"to":{"krate":0,"index":654}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":99264,"byte_end":99268,"line_start":175,"line_end":175,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":654}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\device.rs","byte_start":99271,"byte_end":99275,"line_start":175,"line_end":175,"column_start":57,"column_end":61},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":654}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":126238,"byte_end":126248,"line_start":52,"line_end":52,"column_start":6,"column_end":16},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":3545},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":128135,"byte_end":128142,"line_start":116,"line_end":116,"column_start":6,"column_end":13},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3703},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":128328,"byte_end":128335,"line_start":121,"line_end":121,"column_start":18,"column_end":25},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":3703},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\format.rs","byte_start":146684,"byte_end":146690,"line_start":581,"line_end":581,"column_start":6,"column_end":12},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":4994},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":148743,"byte_end":148749,"line_start":35,"line_end":35,"column_start":6,"column_end":12},"kind":{"Impl":{"id":505}},"from":{"krate":0,"index":12969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":149635,"byte_end":149641,"line_start":71,"line_end":71,"column_start":6,"column_end":12},"kind":{"Impl":{"id":508}},"from":{"krate":0,"index":13039},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":151778,"byte_end":151791,"line_start":133,"line_end":133,"column_start":36,"column_end":49},"kind":{"Impl":{"id":513}},"from":{"krate":0,"index":13173},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":153058,"byte_end":153067,"line_start":171,"line_end":171,"column_start":36,"column_end":45},"kind":{"Impl":{"id":516}},"from":{"krate":0,"index":13212},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":155671,"byte_end":155675,"line_start":257,"line_end":257,"column_start":6,"column_end":10},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":13497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":160444,"byte_end":160449,"line_start":401,"line_end":401,"column_start":6,"column_end":11},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":13862},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":161649,"byte_end":161652,"line_start":434,"line_end":434,"column_start":20,"column_end":23},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":14102},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":161742,"byte_end":161745,"line_start":440,"line_end":440,"column_start":20,"column_end":23},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":14102},"to":{"krate":2,"index":2218}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":162069,"byte_end":162080,"line_start":451,"line_end":451,"column_start":25,"column_end":36},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":14149},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":162298,"byte_end":162309,"line_start":461,"line_end":461,"column_start":25,"column_end":36},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":14149},"to":{"krate":2,"index":2218}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\image.rs","byte_start":163704,"byte_end":163715,"line_start":500,"line_end":500,"column_start":6,"column_end":17},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":14196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":171215,"byte_end":171220,"line_start":26,"line_end":26,"column_start":36,"column_end":41},"kind":{"Impl":{"id":564}},"from":{"krate":0,"index":14912},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":171535,"byte_end":171541,"line_start":40,"line_end":40,"column_start":38,"column_end":44},"kind":{"Impl":{"id":565}},"from":{"krate":0,"index":14940},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":171700,"byte_end":171706,"line_start":46,"line_end":46,"column_start":44,"column_end":50},"kind":{"Impl":{"id":566}},"from":{"krate":0,"index":14940},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":172241,"byte_end":172247,"line_start":64,"line_end":64,"column_start":38,"column_end":44},"kind":{"Impl":{"id":567}},"from":{"krate":0,"index":14952},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":172406,"byte_end":172412,"line_start":70,"line_end":70,"column_start":44,"column_end":50},"kind":{"Impl":{"id":568}},"from":{"krate":0,"index":14952},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\mapping.rs","byte_start":172552,"byte_end":172558,"line_start":77,"line_end":77,"column_start":47,"column_end":53},"kind":{"Impl":{"id":569}},"from":{"krate":0,"index":14952},"to":{"krate":2,"index":1714}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":173127,"byte_end":173131,"line_start":14,"line_end":14,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1542},"to":{"krate":0,"index":903}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\memory.rs","byte_start":176969,"byte_end":176976,"line_start":112,"line_end":112,"column_start":22,"column_end":29},"kind":{"Impl":{"id":586}},"from":{"krate":0,"index":15358},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":178911,"byte_end":178924,"line_start":45,"line_end":45,"column_start":6,"column_end":19},"kind":{"Impl":{"id":593}},"from":{"krate":0,"index":15522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":180715,"byte_end":180725,"line_start":94,"line_end":94,"column_start":6,"column_end":16},"kind":{"Impl":{"id":596}},"from":{"krate":0,"index":15587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":183700,"byte_end":183707,"line_start":168,"line_end":168,"column_start":32,"column_end":39},"kind":{"Impl":{"id":601}},"from":{"krate":0,"index":15792},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":183889,"byte_end":183896,"line_start":177,"line_end":177,"column_start":36,"column_end":43},"kind":{"Impl":{"id":602}},"from":{"krate":0,"index":15792},"to":{"krate":2,"index":2039}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":184081,"byte_end":184088,"line_start":183,"line_end":183,"column_start":31,"column_end":38},"kind":{"Impl":{"id":603}},"from":{"krate":0,"index":15792},"to":{"krate":2,"index":1542}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pass.rs","byte_start":184127,"byte_end":184134,"line_start":184,"line_end":184,"column_start":29,"column_end":36},"kind":{"Impl":{"id":604}},"from":{"krate":0,"index":15792},"to":{"krate":2,"index":2044}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":184966,"byte_end":184971,"line_start":27,"line_end":27,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":962}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":184974,"byte_end":184977,"line_start":27,"line_end":27,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2309},"to":{"krate":0,"index":962}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":184980,"byte_end":184984,"line_start":27,"line_end":27,"column_start":58,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":962}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":184987,"byte_end":184991,"line_start":27,"line_end":27,"column_start":65,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":962}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":186242,"byte_end":186253,"line_start":61,"line_end":61,"column_start":21,"column_end":32},"kind":{"Impl":{"id":607}},"from":{"krate":0,"index":15937},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pool.rs","byte_start":187946,"byte_end":187957,"line_start":111,"line_end":111,"column_start":41,"column_end":52},"kind":{"Impl":{"id":608}},"from":{"krate":0,"index":15937},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\compute.rs","byte_start":199652,"byte_end":199671,"line_start":19,"line_end":19,"column_start":22,"column_end":41},"kind":{"Impl":{"id":609}},"from":{"krate":0,"index":15946},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":205618,"byte_end":205622,"line_start":133,"line_end":133,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":1018}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":205625,"byte_end":205629,"line_start":133,"line_end":133,"column_start":46,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":1018}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\descriptor.rs","byte_start":205637,"byte_end":205642,"line_start":133,"line_end":133,"column_start":58,"column_end":63},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":1018}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":215035,"byte_end":215055,"line_start":130,"line_end":130,"column_start":22,"column_end":42},"kind":{"Impl":{"id":626}},"from":{"krate":0,"index":16655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\graphics.rs","byte_start":218318,"byte_end":218328,"line_start":220,"line_end":220,"column_start":6,"column_end":16},"kind":{"Impl":{"id":635}},"from":{"krate":0,"index":16875},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":221033,"byte_end":221048,"line_start":28,"line_end":28,"column_start":6,"column_end":21},"kind":{"Impl":{"id":642}},"from":{"krate":0,"index":17151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\input_assembler.rs","byte_start":224297,"byte_end":224315,"line_start":111,"line_end":111,"column_start":6,"column_end":24},"kind":{"Impl":{"id":653}},"from":{"krate":0,"index":17551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":225805,"byte_end":225814,"line_start":51,"line_end":51,"column_start":18,"column_end":27},"kind":{"Impl":{"id":658}},"from":{"krate":0,"index":17722},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":227454,"byte_end":227461,"line_start":105,"line_end":105,"column_start":6,"column_end":13},"kind":{"Impl":{"id":663}},"from":{"krate":0,"index":18036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":228654,"byte_end":228664,"line_start":144,"line_end":144,"column_start":6,"column_end":16},"kind":{"Impl":{"id":666}},"from":{"krate":0,"index":18242},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":229469,"byte_end":229479,"line_start":173,"line_end":173,"column_start":18,"column_end":28},"kind":{"Impl":{"id":667}},"from":{"krate":0,"index":18242},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":229762,"byte_end":229776,"line_start":184,"line_end":184,"column_start":6,"column_end":20},"kind":{"Impl":{"id":670}},"from":{"krate":0,"index":18342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":230367,"byte_end":230376,"line_start":204,"line_end":204,"column_start":18,"column_end":27},"kind":{"Impl":{"id":673}},"from":{"krate":0,"index":18384},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":230443,"byte_end":230452,"line_start":210,"line_end":210,"column_start":6,"column_end":15},"kind":{"Impl":{"id":674}},"from":{"krate":0,"index":18384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":233046,"byte_end":233057,"line_start":275,"line_end":275,"column_start":18,"column_end":29},"kind":{"Impl":{"id":679}},"from":{"krate":0,"index":18594},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\output_merger.rs","byte_start":233904,"byte_end":233915,"line_start":305,"line_end":305,"column_start":18,"column_end":29},"kind":{"Impl":{"id":682}},"from":{"krate":0,"index":18706},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":189246,"byte_end":189259,"line_start":34,"line_end":34,"column_start":36,"column_end":49},"kind":{"Impl":{"id":689}},"from":{"krate":0,"index":19017},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192137,"byte_end":192153,"line_start":120,"line_end":120,"column_start":22,"column_end":38},"kind":{"Impl":{"id":696}},"from":{"krate":0,"index":19245},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":192591,"byte_end":192596,"line_start":133,"line_end":133,"column_start":23,"column_end":28},"kind":{"Impl":{"id":697}},"from":{"krate":0,"index":19411},"to":{"krate":2,"index":7491}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":193254,"byte_end":193264,"line_start":157,"line_end":157,"column_start":32,"column_end":42},"kind":{"Impl":{"id":698}},"from":{"krate":0,"index":19489},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195491,"byte_end":195505,"line_start":225,"line_end":225,"column_start":6,"column_end":20},"kind":{"Impl":{"id":701}},"from":{"krate":0,"index":19657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":195696,"byte_end":195710,"line_start":233,"line_end":233,"column_start":18,"column_end":32},"kind":{"Impl":{"id":702}},"from":{"krate":0,"index":19657},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196003,"byte_end":196008,"line_start":248,"line_end":248,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":1119}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196090,"byte_end":196104,"line_start":252,"line_end":252,"column_start":21,"column_end":35},"kind":{"Impl":{"id":703}},"from":{"krate":0,"index":19657},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196603,"byte_end":196619,"line_start":277,"line_end":277,"column_start":24,"column_end":40},"kind":{"Impl":{"id":704}},"from":{"krate":0,"index":19674},"to":{"krate":0,"index":1119}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":196713,"byte_end":196730,"line_start":281,"line_end":281,"column_start":30,"column_end":47},"kind":{"Impl":{"id":705}},"from":{"krate":0,"index":19678},"to":{"krate":0,"index":1119}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\pso\\mod.rs","byte_start":197707,"byte_end":197712,"line_start":311,"line_end":311,"column_start":9,"column_end":14},"kind":{"Impl":{"id":708}},"from":{"krate":0,"index":19687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\query.rs","byte_start":235471,"byte_end":235484,"line_start":24,"line_end":24,"column_start":28,"column_end":41},"kind":{"Impl":{"id":711}},"from":{"krate":0,"index":19772},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":245657,"byte_end":245664,"line_start":29,"line_end":29,"column_start":21,"column_end":28},"kind":{"Impl":{"id":718}},"from":{"krate":0,"index":20285},"to":{"krate":0,"index":1145}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":245833,"byte_end":245841,"line_start":37,"line_end":37,"column_start":21,"column_end":29},"kind":{"Impl":{"id":719}},"from":{"krate":0,"index":20288},"to":{"krate":0,"index":1145}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246032,"byte_end":246039,"line_start":45,"line_end":45,"column_start":21,"column_end":28},"kind":{"Impl":{"id":720}},"from":{"krate":0,"index":20291},"to":{"krate":0,"index":1145}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246229,"byte_end":246237,"line_start":53,"line_end":53,"column_start":21,"column_end":29},"kind":{"Impl":{"id":721}},"from":{"krate":0,"index":20294},"to":{"krate":0,"index":1145}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246607,"byte_end":246608,"line_start":66,"line_end":66,"column_start":25,"column_end":26},"kind":{"Impl":{"id":722}},"from":{"krate":0,"index":1158},"to":{"krate":0,"index":1155}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246640,"byte_end":246647,"line_start":67,"line_end":67,"column_start":29,"column_end":36},"kind":{"Impl":{"id":723}},"from":{"krate":0,"index":20285},"to":{"krate":0,"index":1155}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246678,"byte_end":246685,"line_start":68,"line_end":68,"column_start":28,"column_end":35},"kind":{"Impl":{"id":724}},"from":{"krate":0,"index":20285},"to":{"krate":0,"index":1155}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246717,"byte_end":246724,"line_start":69,"line_end":69,"column_start":29,"column_end":36},"kind":{"Impl":{"id":725}},"from":{"krate":0,"index":20285},"to":{"krate":0,"index":1155}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246756,"byte_end":246764,"line_start":70,"line_end":70,"column_start":29,"column_end":37},"kind":{"Impl":{"id":726}},"from":{"krate":0,"index":20288},"to":{"krate":0,"index":1155}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246796,"byte_end":246803,"line_start":71,"line_end":71,"column_start":29,"column_end":36},"kind":{"Impl":{"id":727}},"from":{"krate":0,"index":20291},"to":{"krate":0,"index":1155}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246845,"byte_end":246852,"line_start":73,"line_end":73,"column_start":38,"column_end":45},"kind":{"Impl":{"id":728}},"from":{"krate":0,"index":20285},"to":{"krate":0,"index":1155}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246893,"byte_end":246901,"line_start":74,"line_end":74,"column_start":38,"column_end":46},"kind":{"Impl":{"id":729}},"from":{"krate":0,"index":20288},"to":{"krate":0,"index":1155}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\capability.rs","byte_start":246942,"byte_end":246949,"line_start":75,"line_end":75,"column_start":38,"column_end":45},"kind":{"Impl":{"id":730}},"from":{"krate":0,"index":20291},"to":{"krate":0,"index":1155}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":248405,"byte_end":248410,"line_start":14,"line_end":14,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":1209}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":248413,"byte_end":248416,"line_start":14,"line_end":14,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2309},"to":{"krate":0,"index":1209}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":248419,"byte_end":248423,"line_start":14,"line_end":14,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":1209}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":248426,"byte_end":248430,"line_start":14,"line_end":14,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":1209}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":249629,"byte_end":249639,"line_start":48,"line_end":48,"column_start":21,"column_end":31},"kind":{"Impl":{"id":733}},"from":{"krate":0,"index":20341},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":249800,"byte_end":249810,"line_start":55,"line_end":55,"column_start":33,"column_end":43},"kind":{"Impl":{"id":734}},"from":{"krate":0,"index":20341},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\family.rs","byte_start":250569,"byte_end":250575,"line_start":79,"line_end":79,"column_start":18,"column_end":24},"kind":{"Impl":{"id":735}},"from":{"krate":0,"index":20350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239978,"byte_end":239983,"line_start":54,"line_end":54,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":1261}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239986,"byte_end":239989,"line_start":54,"line_end":54,"column_start":53,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":2309},"to":{"krate":0,"index":1261}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239992,"byte_end":239996,"line_start":54,"line_end":54,"column_start":59,"column_end":63},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":1261}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":239999,"byte_end":240003,"line_start":54,"line_end":54,"column_start":66,"column_end":70},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":1261}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\queue\\mod.rs","byte_start":241810,"byte_end":241822,"line_start":98,"line_end":98,"column_start":33,"column_end":45},"kind":{"Impl":{"id":738}},"from":{"krate":0,"index":20436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":251814,"byte_end":251819,"line_start":16,"line_end":16,"column_start":25,"column_end":30},"kind":{"Impl":{"id":739}},"from":{"krate":2,"index":27052},"to":{"krate":0,"index":1310}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":251984,"byte_end":251991,"line_start":25,"line_end":25,"column_start":25,"column_end":32},"kind":{"Impl":{"id":740}},"from":{"krate":2,"index":27087},"to":{"krate":0,"index":1310}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":252143,"byte_end":252152,"line_start":34,"line_end":34,"column_start":25,"column_end":34},"kind":{"Impl":{"id":741}},"from":{"krate":2,"index":27070},"to":{"krate":0,"index":1310}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\range.rs","byte_start":252306,"byte_end":252315,"line_start":43,"line_end":43,"column_start":25,"column_end":34},"kind":{"Impl":{"id":742}},"from":{"krate":2,"index":27040},"to":{"krate":0,"index":1310}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255225,"byte_end":255238,"line_start":83,"line_end":83,"column_start":36,"column_end":49},"kind":{"Impl":{"id":745}},"from":{"krate":0,"index":20446},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255376,"byte_end":255389,"line_start":89,"line_end":89,"column_start":35,"column_end":48},"kind":{"Impl":{"id":746}},"from":{"krate":0,"index":20446},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255526,"byte_end":255539,"line_start":95,"line_end":95,"column_start":36,"column_end":49},"kind":{"Impl":{"id":747}},"from":{"krate":0,"index":20446},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":255678,"byte_end":255691,"line_start":101,"line_end":101,"column_start":36,"column_end":49},"kind":{"Impl":{"id":748}},"from":{"krate":0,"index":20446},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":256216,"byte_end":256224,"line_start":119,"line_end":119,"column_start":30,"column_end":38},"kind":{"Impl":{"id":751}},"from":{"krate":0,"index":20477},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":256371,"byte_end":256379,"line_start":128,"line_end":128,"column_start":6,"column_end":14},"kind":{"Impl":{"id":752}},"from":{"krate":0,"index":20477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257892,"byte_end":257897,"line_start":175,"line_end":175,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":1362}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257900,"byte_end":257903,"line_start":175,"line_end":175,"column_start":45,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":2309},"to":{"krate":0,"index":1362}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257906,"byte_end":257910,"line_start":175,"line_end":175,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":1362}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":257913,"byte_end":257917,"line_start":175,"line_end":175,"column_start":58,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":1362}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":262254,"byte_end":262269,"line_start":290,"line_end":290,"column_start":6,"column_end":21},"kind":{"Impl":{"id":757}},"from":{"krate":0,"index":20786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266768,"byte_end":266773,"line_start":419,"line_end":419,"column_start":39,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":1373}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266776,"byte_end":266779,"line_start":419,"line_end":419,"column_start":47,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":2309},"to":{"krate":0,"index":1373}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266782,"byte_end":266786,"line_start":419,"line_end":419,"column_start":53,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":1373}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\window.rs","byte_start":266789,"byte_end":266793,"line_start":419,"line_end":419,"column_start":60,"column_end":64},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":1373}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":269224,"byte_end":269237,"line_start":20,"line_end":20,"column_start":18,"column_end":31},"kind":{"Impl":{"id":762}},"from":{"krate":0,"index":20864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src\\backend.rs","byte_start":269852,"byte_end":269858,"line_start":42,"line_end":42,"column_start":18,"column_end":24},"kind":{"Impl":{"id":763}},"from":{"krate":0,"index":20350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18527,"byte_end":18530,"line_start":457,"line_end":457,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":2309},"to":{"krate":0,"index":1416}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18533,"byte_end":18537,"line_start":457,"line_end":457,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":1416}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18540,"byte_end":18544,"line_start":457,"line_end":457,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":1416}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18976,"byte_end":18981,"line_start":468,"line_end":468,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":1419}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18984,"byte_end":18986,"line_start":468,"line_end":468,"column_start":38,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":2044},"to":{"krate":0,"index":1419}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18989,"byte_end":18994,"line_start":468,"line_end":468,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":1419}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":18997,"byte_end":19001,"line_start":468,"line_end":468,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":7128},"to":{"krate":0,"index":1419}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19009,"byte_end":19014,"line_start":468,"line_end":468,"column_start":63,"column_end":68},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":1419}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19017,"byte_end":19020,"line_start":468,"line_end":468,"column_start":71,"column_end":74},"kind":"SuperTrait","from":{"krate":2,"index":2309},"to":{"krate":0,"index":1419}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19023,"byte_end":19027,"line_start":468,"line_end":468,"column_start":77,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":1419}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":19030,"byte_end":19034,"line_start":468,"line_end":468,"column_start":84,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":1419}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20675,"byte_end":20690,"line_start":511,"line_end":511,"column_start":23,"column_end":38},"kind":{"Impl":{"id":774}},"from":{"krate":0,"index":21739},"to":{"krate":2,"index":7491}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gfx-hal-0.2.1\\src/lib.rs","byte_start":20820,"byte_end":20835,"line_start":517,"line_end":517,"column_start":16,"column_end":31},"kind":{"Impl":{"id":775}},"from":{"krate":0,"index":21739},"to":{"krate":1,"index":1623}}]}