{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4","program":"C:\\Users\\Ollie\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","shred","C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"parallel\"","--cfg","feature=\"rayon\"","--cfg","feature=\"shred-derive\"","-C","metadata=a12b97df370f2d79","-C","extra-filename=-a12b97df370f2d79","--out-dir","c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps","--extern","arrayvec=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\libarrayvec-28a79c6bb9d9d30b.rmeta","--extern","hashbrown=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\libhashbrown-b137d0ce11702621.rmeta","--extern","mopa=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\libmopa-51e07390e7a265e2.rmeta","--extern","rayon=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\librayon-ddcad0c19b93cdde.rmeta","--extern","shred_derive=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\shred_derive-f6ab68ffee4e37cf.dll","--extern","smallvec=c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\libsmallvec-5b20543429784863.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Ollie\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Ollie\\Documents\\code-lvl3\\rust\\gfx_playground\\target\\rls\\debug\\deps\\libshred-a12b97df370f2d79.rmeta"},"prelude":{"crate_id":{"name":"shred","disambiguator":[388111209749242618,12804005620471013345]},"crate_root":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src","external_crates":[{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12578048494495979596,2047601184299498072]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[9458200224090790355,13573932773036415113]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17212932621614837670,6562776948220383497]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[760535750034822653,11118367618612043106]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9863315158332858256,17125058067034963864]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[4687805557387852666,9943473115938981341]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11895006708321731812,14562333644307237348]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3795917533932740915,1352930594861700352]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14246119625412523820,1488400038702589601]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[301469929213911528,4015090225475952437]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[2057170103176572375,2047842178592089941]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5373388065014169986,7291481803049279744]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[11217907578908536000,17992819105755382748]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":14,"id":{"name":"hashbrown","disambiguator":[16777052591510006031,4843570544896611892]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":15,"id":{"name":"ahash","disambiguator":[4109807228283811166,1087078810229114799]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":16,"id":{"name":"const_random","disambiguator":[16409365549202526485,5209780076967091576]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":17,"id":{"name":"proc_macro_hack","disambiguator":[15310243978229512669,5627586999162613208]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":18,"id":{"name":"const_random_macro","disambiguator":[11451297944138533643,15116419930978329499]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":19,"id":{"name":"rayon","disambiguator":[4916613042128942709,6450936071534617892]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":20,"id":{"name":"crossbeam_deque","disambiguator":[8096164653812542193,7245489510627635590]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":21,"id":{"name":"crossbeam_epoch","disambiguator":[11885994366585831752,6672687476904711462]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":22,"id":{"name":"cfg_if","disambiguator":[11332822018376109482,12531163141307769881]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":23,"id":{"name":"crossbeam_utils","disambiguator":[2442131106640731405,16187359134328411578]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":24,"id":{"name":"lazy_static","disambiguator":[11183393041770989563,4958224602867445297]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":25,"id":{"name":"memoffset","disambiguator":[721541891346912788,9917211672765356618]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":26,"id":{"name":"scopeguard","disambiguator":[12313808262949512516,7023837395223807313]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":27,"id":{"name":"either","disambiguator":[14224422418139563874,16303910147904872345]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":28,"id":{"name":"rayon_core","disambiguator":[15139817526765261712,6158245922852819891]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":29,"id":{"name":"crossbeam_queue","disambiguator":[6549487499231722874,16798004610080093658]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","num":30,"id":{"name":"num_cpus","disambiguator":[7984451816713647015,1991493691848609442]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","num":31,"id":{"name":"smallvec","disambiguator":[1006501148006847738,1900906525199501262]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","num":32,"id":{"name":"serde","disambiguator":[1567256123462627994,18062257089074732831]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","num":33,"id":{"name":"serde_derive","disambiguator":[7626613138503479540,12988256039908973816]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","num":34,"id":{"name":"maybe_uninit","disambiguator":[10068608375343807728,3701175525633181931]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\stage.rs","num":35,"id":{"name":"arrayvec","disambiguator":[253107762780954684,4111330802589586862]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\stage.rs","num":36,"id":{"name":"nodrop","disambiguator":[10736730524725037673,12756801963287076804]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","num":37,"id":{"name":"mopa","disambiguator":[6844777839638132539,16396111670168729397]}},{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","num":38,"id":{"name":"shred_derive","disambiguator":[17885189303815728336,12827976070418339229]}}],"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":0,"byte_end":2683,"line_start":1,"line_end":93,"column_start":1,"column_end":28}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\mod.rs","byte_start":20731,"byte_end":20746,"line_start":2,"line_end":2,"column_start":33,"column_end":48},"alias_span":null,"name":"AsyncDispatcher","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":38,"index":32},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":1789,"byte_end":1799,"line_start":68,"line_end":68,"column_start":23,"column_end":33},"alias_span":null,"name":"SystemData","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":1856,"byte_end":1871,"line_start":71,"line_end":71,"column_start":26,"column_end":41},"alias_span":null,"name":"AsyncDispatcher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":1928,"byte_end":1931,"line_start":73,"line_end":73,"column_start":27,"column_end":30},"alias_span":null,"name":"Par","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":1933,"byte_end":1939,"line_start":73,"line_end":73,"column_start":32,"column_end":38},"alias_span":null,"name":"ParSeq","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":1941,"byte_end":1952,"line_start":73,"line_end":73,"column_start":40,"column_end":51},"alias_span":null,"name":"RunWithPool","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":1954,"byte_end":1957,"line_start":73,"line_end":73,"column_start":53,"column_end":56},"alias_span":null,"name":"Seq","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1031},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2001,"byte_end":2014,"line_start":76,"line_end":76,"column_start":9,"column_end":22},"alias_span":null,"name":"BatchAccessor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2016,"byte_end":2031,"line_start":76,"line_end":76,"column_start":24,"column_end":39},"alias_span":null,"name":"BatchController","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2033,"byte_end":2052,"line_start":76,"line_end":76,"column_start":41,"column_end":60},"alias_span":null,"name":"BatchUncheckedWorld","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2054,"byte_end":2082,"line_start":76,"line_end":76,"column_start":62,"column_end":90},"alias_span":null,"name":"DefaultBatchControllerSystem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2092,"byte_end":2102,"line_start":77,"line_end":77,"column_start":9,"column_end":19},"alias_span":null,"name":"Dispatcher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1036},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2104,"byte_end":2121,"line_start":77,"line_end":77,"column_start":21,"column_end":38},"alias_span":null,"name":"DispatcherBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2141,"byte_end":2149,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"alias_span":null,"name":"CastFrom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2151,"byte_end":2159,"line_start":79,"line_end":79,"column_start":22,"column_end":30},"alias_span":null,"name":"MetaIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2161,"byte_end":2172,"line_start":79,"line_end":79,"column_start":32,"column_end":43},"alias_span":null,"name":"MetaIterMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2174,"byte_end":2183,"line_start":79,"line_end":79,"column_start":45,"column_end":54},"alias_span":null,"name":"MetaTable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2208,"byte_end":2216,"line_start":81,"line_end":81,"column_start":9,"column_end":17},"alias_span":null,"name":"Accessor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2218,"byte_end":2229,"line_start":81,"line_end":81,"column_start":19,"column_end":30},"alias_span":null,"name":"AccessorCow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2231,"byte_end":2248,"line_start":81,"line_end":81,"column_start":32,"column_end":49},"alias_span":null,"name":"DynamicSystemData","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2250,"byte_end":2256,"line_start":81,"line_end":81,"column_start":51,"column_end":57},"alias_span":null,"name":"RunNow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1123},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2258,"byte_end":2269,"line_start":81,"line_end":81,"column_start":59,"column_end":70},"alias_span":null,"name":"RunningTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1144},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2271,"byte_end":2285,"line_start":81,"line_end":81,"column_start":72,"column_end":86},"alias_span":null,"name":"StaticAccessor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2287,"byte_end":2293,"line_start":81,"line_end":81,"column_start":88,"column_end":94},"alias_span":null,"name":"System","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2303,"byte_end":2313,"line_start":82,"line_end":82,"column_start":9,"column_end":19},"alias_span":null,"name":"SystemData","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":836},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2343,"byte_end":2358,"line_start":85,"line_end":85,"column_start":9,"column_end":24},"alias_span":null,"name":"DefaultProvider","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":815},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2360,"byte_end":2365,"line_start":85,"line_end":85,"column_start":26,"column_end":31},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":849},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2367,"byte_end":2372,"line_start":85,"line_end":85,"column_start":33,"column_end":38},"alias_span":null,"name":"Fetch","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":863},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2374,"byte_end":2382,"line_start":85,"line_end":85,"column_start":40,"column_end":48},"alias_span":null,"name":"FetchMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":844},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2384,"byte_end":2396,"line_start":85,"line_end":85,"column_start":50,"column_end":62},"alias_span":null,"name":"PanicHandler","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2398,"byte_end":2402,"line_start":85,"line_end":85,"column_start":64,"column_end":68},"alias_span":null,"name":"Read","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":795},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2404,"byte_end":2414,"line_start":85,"line_end":85,"column_start":70,"column_end":80},"alias_span":null,"name":"ReadExpect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2416,"byte_end":2424,"line_start":85,"line_end":85,"column_start":82,"column_end":90},"alias_span":null,"name":"Resource","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1673},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2434,"byte_end":2444,"line_start":86,"line_end":86,"column_start":9,"column_end":19},"alias_span":null,"name":"ResourceId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2446,"byte_end":2458,"line_start":86,"line_end":86,"column_start":21,"column_end":33},"alias_span":null,"name":"SetupHandler","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1700},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2460,"byte_end":2465,"line_start":86,"line_end":86,"column_start":35,"column_end":40},"alias_span":null,"name":"World","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2467,"byte_end":2472,"line_start":86,"line_end":86,"column_start":42,"column_end":47},"alias_span":null,"name":"Write","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2474,"byte_end":2485,"line_start":86,"line_end":86,"column_start":49,"column_end":60},"alias_span":null,"name":"WriteExpect","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":0,"byte_end":2683,"line_start":1,"line_end":93,"column_start":1,"column_end":28},"name":"","qualname":"::","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":88},{"krate":0,"index":492},{"krate":0,"index":583},{"krate":0,"index":681},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":951},{"krate":0,"index":987}],"decl_id":null,"docs":" **Sh**ared **re**source **d**ispatcher","sig":null,"attributes":[{"value":"deny(unused_must_use)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":1480,"byte_end":1505,"line_start":55,"line_end":55,"column_start":1,"column_end":26}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":1506,"byte_end":1528,"line_start":56,"line_end":56,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cell","qualname":"::cell","value":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":27},{"krate":0,"index":988},{"krate":0,"index":1004},{"krate":0,"index":1003},{"krate":0,"index":1001},{"krate":0,"index":999},{"krate":0,"index":997},{"krate":0,"index":995},{"krate":0,"index":993},{"krate":0,"index":990},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":1006},{"krate":0,"index":1011},{"krate":0,"index":32},{"krate":0,"index":38},{"krate":0,"index":43},{"krate":0,"index":47},{"krate":0,"index":1015},{"krate":0,"index":1020},{"krate":0,"index":51},{"krate":0,"index":57},{"krate":0,"index":62},{"krate":0,"index":66},{"krate":0,"index":1024},{"krate":0,"index":1028},{"krate":0,"index":70},{"krate":0,"index":83},{"krate":0,"index":85}],"decl_id":null,"docs":" Helper module for some internals, most users don't need to interact with it.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":988},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":3683,"byte_end":3696,"line_start":37,"line_end":37,"column_start":12,"column_end":25},"name":"InvalidBorrow","qualname":"::cell::InvalidBorrow","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker struct for an invalid borrow error\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1006},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":4250,"byte_end":4253,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"Ref","qualname":"::cell::Ref","value":"Ref {  }","parent":null,"children":[{"krate":0,"index":1009},{"krate":0,"index":1010}],"decl_id":null,"docs":" An immutable reference to data in a `TrustCell`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":6051,"byte_end":6054,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"map","qualname":"<Ref>::map","value":"fn <U, F> (self, f: F) -> Ref<'a, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Ref` for a component of the borrowed data which preserves\n the existing borrow.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1015},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":7468,"byte_end":7474,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"name":"RefMut","qualname":"::cell::RefMut","value":"RefMut {  }","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1019}],"decl_id":null,"docs":" A mutable reference to data in a `TrustCell`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":9373,"byte_end":9376,"line_start":206,"line_end":206,"column_start":12,"column_end":15},"name":"map","qualname":"<RefMut>::map","value":"fn <U, F> (self, f: F) -> RefMut<'a, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `RefMut` for a component of the borrowed data which\n preserves the existing borrow.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1024},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":10673,"byte_end":10682,"line_start":252,"line_end":252,"column_start":12,"column_end":21},"name":"TrustCell","qualname":"::cell::TrustCell","value":"TrustCell {  }","parent":null,"children":[{"krate":0,"index":1026},{"krate":0,"index":1027}],"decl_id":null,"docs":" A custom cell container that is a `RefCell` with thread-safety.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":10827,"byte_end":10830,"line_start":259,"line_end":259,"column_start":12,"column_end":15},"name":"new","qualname":"<TrustCell<T>>::new","value":"fn (val: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new cell, similar to `RefCell::new`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":11034,"byte_end":11044,"line_start":267,"line_end":267,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<TrustCell<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this cell and returns ownership of `T`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":11362,"byte_end":11368,"line_start":279,"line_end":279,"column_start":12,"column_end":18},"name":"borrow","qualname":"<TrustCell<T>>::borrow","value":"fn (&self) -> Ref<T>","parent":null,"children":[],"decl_id":null,"docs":" Get an immutable reference to the inner data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":11779,"byte_end":11789,"line_start":293,"line_end":293,"column_start":12,"column_end":22},"name":"try_borrow","qualname":"<TrustCell<T>>::try_borrow","value":"fn (&self) -> Result<Ref<T>, InvalidBorrow>","parent":null,"children":[],"decl_id":null,"docs":" Get an immutable reference to the inner data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":12230,"byte_end":12240,"line_start":310,"line_end":310,"column_start":12,"column_end":22},"name":"borrow_mut","qualname":"<TrustCell<T>>::borrow_mut","value":"fn (&self) -> RefMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":12642,"byte_end":12656,"line_start":324,"line_end":324,"column_start":12,"column_end":26},"name":"try_borrow_mut","qualname":"<TrustCell<T>>::try_borrow_mut","value":"fn (&self) -> Result<RefMut<T>, InvalidBorrow>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":13001,"byte_end":13008,"line_start":336,"line_end":336,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<TrustCell<T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets exclusive access to the inner value, bypassing the Cell.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":21764,"byte_end":21779,"line_start":29,"line_end":29,"column_start":12,"column_end":27},"name":"AsyncDispatcher","qualname":"::dispatch::async_dispatcher::AsyncDispatcher","value":"AsyncDispatcher {  }","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"decl_id":null,"docs":" Like, `Dispatcher` but works asynchronously.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":22110,"byte_end":22115,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"setup","qualname":"<AsyncDispatcher>::setup","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets up all the systems which means they are gonna add default values\n for the resources they need.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":22653,"byte_end":22661,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"dispatch","qualname":"<AsyncDispatcher>::dispatch","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Dispatches the systems asynchronously.\n Does not execute thread local systems.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":23243,"byte_end":23247,"line_start":84,"line_end":84,"column_start":12,"column_end":16},"name":"wait","qualname":"<AsyncDispatcher>::wait","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Waits for all the asynchronously dispatched systems to finish\n and executes thread local systems (if there are any).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":23601,"byte_end":23616,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"wait_without_tl","qualname":"<AsyncDispatcher>::wait_without_tl","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Waits for all the asynchronously dispatched systems to finish\n without executing thread local systems.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":23751,"byte_end":23758,"line_start":101,"line_end":101,"column_start":12,"column_end":19},"name":"running","qualname":"<AsyncDispatcher>::running","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if any of the asynchronously dispatched systems are running.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":24049,"byte_end":24052,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"res","qualname":"<AsyncDispatcher>::res","value":"fn (&mut self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the `World`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.8.0\", note = \"renamed to `world`\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":23978,"byte_end":24037,"line_start":110,"line_end":110,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":24212,"byte_end":24217,"line_start":118,"line_end":118,"column_start":12,"column_end":17},"name":"world","qualname":"<AsyncDispatcher>::world","value":"fn (&mut self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the `World`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":24511,"byte_end":24518,"line_start":128,"line_end":128,"column_start":12,"column_end":19},"name":"mut_res","qualname":"<AsyncDispatcher>::mut_res","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Borrows the `World` mutably.","sig":null,"attributes":[{"value":"deprecated(since = \"0.8.0\", note = \"renamed to `world_mut`\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":24436,"byte_end":24499,"line_start":127,"line_end":127,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":24705,"byte_end":24714,"line_start":135,"line_end":135,"column_start":12,"column_end":21},"name":"world_mut","qualname":"<AsyncDispatcher>::world_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Borrows the `World` mutably.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1031},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":26840,"byte_end":26853,"line_start":9,"line_end":9,"column_start":12,"column_end":25},"name":"BatchAccessor","qualname":"::dispatch::batch::BatchAccessor","value":"BatchAccessor {  }","parent":null,"children":[{"krate":0,"index":1032},{"krate":0,"index":1033}],"decl_id":null,"docs":" The `BatchAccessor` is used to notify the main dispatcher of the read and\n write resources of the `System`s contained in the batch (\"sub systems\").\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":26982,"byte_end":26985,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<BatchAccessor>::new","value":"fn (reads: Vec<ResourceId>, writes: Vec<ResourceId>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BatchAccessor`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":27502,"byte_end":27521,"line_start":37,"line_end":37,"column_start":12,"column_end":31},"name":"BatchUncheckedWorld","qualname":"::dispatch::batch::BatchUncheckedWorld","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `BatchUncheckedWorld` wraps an instance of the world.\n You have to specify this as `SystemData` for a `System` implementing `BatchController`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":28284,"byte_end":28299,"line_start":57,"line_end":57,"column_start":11,"column_end":26},"name":"BatchController","qualname":"::dispatch::batch::BatchController","value":"BatchController<'a, 'b>","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"decl_id":null,"docs":" The `BatchController` is the additional trait that a normal System must\n implement in order to be used as a system controlling the execution of a batch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":29299,"byte_end":29314,"line_start":77,"line_end":77,"column_start":10,"column_end":25},"name":"BatchSystemData","qualname":"::dispatch::batch::BatchController::BatchSystemData","value":"type BatchSystemData: SystemData<'a>;","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" This associated type has to contain all resources batch controller uses directly.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":30059,"byte_end":30065,"line_start":91,"line_end":91,"column_start":15,"column_end":21},"name":"create","qualname":"::dispatch::batch::BatchController::create","value":"fn (accessor: BatchAccessor, dispatcher: Dispatcher<'a, 'b>) -> Self","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Creates an instance of the `BatchControllerSystem`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":30503,"byte_end":30531,"line_start":102,"line_end":102,"column_start":12,"column_end":40},"name":"DefaultBatchControllerSystem","qualname":"::dispatch::batch::DefaultBatchControllerSystem","value":"DefaultBatchControllerSystem {  }","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195}],"decl_id":null,"docs":" The `DefaultBatchControllerSystem` is a simple implementation that will\n dispatch the inner dispatcher one time.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1036},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":44547,"byte_end":44564,"line_start":95,"line_end":95,"column_start":12,"column_end":29},"name":"DispatcherBuilder","qualname":"::dispatch::builder::DispatcherBuilder","value":"DispatcherBuilder {  }","parent":null,"children":[{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043}],"decl_id":null,"docs":" Builder for the [`Dispatcher`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":45185,"byte_end":45188,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"new","qualname":"<DispatcherBuilder>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `DispatcherBuilder` by using the `Default` implementation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":45895,"byte_end":45899,"line_start":129,"line_end":129,"column_start":12,"column_end":16},"name":"with","qualname":"<DispatcherBuilder>::with","value":"fn <T> (mut self, system: T, name: &str, dep: &[&str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds a new system with a given name and a list of dependencies.\n Please note that the dependency should be added before\n you add the depending system.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":46604,"byte_end":46607,"line_start":150,"line_end":150,"column_start":12,"column_end":15},"name":"add","qualname":"<DispatcherBuilder>::add","value":"fn <T> (&mut self, system: T, name: &str, dep: &[&str]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a new system with a given name and a list of dependencies.\n Please note that the dependency should be added before\n you add the depending system.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":48420,"byte_end":48430,"line_start":200,"line_end":200,"column_start":12,"column_end":22},"name":"with_batch","qualname":"<DispatcherBuilder>::with_batch","value":"fn <T> (mut self, dispatcher_builder: DispatcherBuilder<'a, 'b>, name: &str, dep: &[&str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The `Batch` is a `System` which contains a `Dispatcher`.\n By wrapping a `Dispatcher` inside a system, we can control the execution\n of a whole group of system, without sacrificing parallelism or\n conciseness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":49687,"byte_end":49696,"line_start":232,"line_end":232,"column_start":12,"column_end":21},"name":"add_batch","qualname":"<DispatcherBuilder>::add_batch","value":"fn <T> (&mut self, mut dispatcher_builder: DispatcherBuilder<'a, 'b>, name: &str, dep: &[&str]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `Batch` is a `System` which contains a `Dispatcher`.\n By wrapping a `Dispatcher` inside a system, we can control the execution\n of a whole group of system, without sacrificing parallelism or\n conciseness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":50964,"byte_end":50981,"line_start":271,"line_end":271,"column_start":12,"column_end":29},"name":"with_thread_local","qualname":"<DispatcherBuilder>::with_thread_local","value":"fn <T> (mut self, system: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds a new thread local system.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":51317,"byte_end":51333,"line_start":285,"line_end":285,"column_start":12,"column_end":28},"name":"add_thread_local","qualname":"<DispatcherBuilder>::add_thread_local","value":"fn <T> (&mut self, system: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a new thread local system.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":51974,"byte_end":51986,"line_start":304,"line_end":304,"column_start":12,"column_end":24},"name":"with_barrier","qualname":"<DispatcherBuilder>::with_barrier","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inserts a barrier which assures that all systems\n added before the barrier are executed before the ones\n after this barrier.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":52450,"byte_end":52461,"line_start":319,"line_end":319,"column_start":12,"column_end":23},"name":"add_barrier","qualname":"<DispatcherBuilder>::add_barrier","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a barrier which assures that all systems\n added before the barrier are executed before the ones\n after this barrier.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":52814,"byte_end":52823,"line_start":330,"line_end":330,"column_start":12,"column_end":21},"name":"with_pool","qualname":"<DispatcherBuilder>::with_pool","value":"fn (mut self, pool: ::std::sync::Arc<::rayon::ThreadPool>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Attach a rayon thread pool to the builder\n and use that instead of creating one.","sig":null,"attributes":[{"value":"cfg(feature = \"parallel\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":52774,"byte_end":52802,"line_start":329,"line_end":329,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":53079,"byte_end":53087,"line_start":339,"line_end":339,"column_start":12,"column_end":20},"name":"add_pool","qualname":"<DispatcherBuilder>::add_pool","value":"fn (&mut self, pool: ::std::sync::Arc<::rayon::ThreadPool>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Attach a rayon thread pool to the builder\n and use that instead of creating one.\n","sig":null,"attributes":[{"value":"cfg(feature = \"parallel\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":53039,"byte_end":53067,"line_start":338,"line_end":338,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":53402,"byte_end":53415,"line_start":346,"line_end":346,"column_start":12,"column_end":25},"name":"print_par_seq","qualname":"<DispatcherBuilder>::print_par_seq","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Prints the equivalent system graph\n that can be easily used to get the graph using the `seq!` and `par!`\n macros. This is only recommended for advanced users.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":53637,"byte_end":53642,"line_start":355,"line_end":355,"column_start":12,"column_end":17},"name":"build","qualname":"<DispatcherBuilder>::build","value":"fn (self) -> Dispatcher<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":" Builds the `Dispatcher`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":54927,"byte_end":54938,"line_start":403,"line_end":403,"column_start":12,"column_end":23},"name":"build_async","qualname":"<DispatcherBuilder>::build_async","value":"fn <R> (self, world: R) -> crate::dispatch::async_dispatcher::AsyncDispatcher<'b, R>","parent":null,"children":[],"decl_id":null,"docs":" Builds an async dispatcher.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":55979,"byte_end":55989,"line_start":12,"line_end":12,"column_start":12,"column_end":22},"name":"Dispatcher","qualname":"::dispatch::dispatcher::Dispatcher","value":"Dispatcher {  }","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288}],"decl_id":null,"docs":" The dispatcher struct, allowing\n systems to be executed in parallel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":56334,"byte_end":56339,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"setup","qualname":"<Dispatcher>::setup","value":"fn (&mut self, world: &mut World) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets up all the systems which means they are gonna add default values\n for the resources they need.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":56804,"byte_end":56811,"line_start":36,"line_end":36,"column_start":12,"column_end":19},"name":"dispose","qualname":"<Dispatcher>::dispose","value":"fn (self, world: &mut World) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Calls the `dispose` method of all systems and allows them to release\n external resources. It is common this method removes components and\n / or resources from the `World` which are associated with external\n resources.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":57493,"byte_end":57501,"line_start":58,"line_end":58,"column_start":12,"column_end":20},"name":"dispatch","qualname":"<Dispatcher>::dispatch","value":"fn (&mut self, world: &World) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Dispatch all the systems with given resources and context\n and then run thread local systems.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":58153,"byte_end":58165,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"dispatch_par","qualname":"<Dispatcher>::dispatch_par","value":"fn (&mut self, world: &World) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Dispatches the systems (except thread local systems)\n in parallel given the resources to operate on.","sig":null,"attributes":[{"value":"cfg(feature = \"parallel\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":58113,"byte_end":58141,"line_start":78,"line_end":78,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":58835,"byte_end":58847,"line_start":101,"line_end":101,"column_start":12,"column_end":24},"name":"dispatch_seq","qualname":"<Dispatcher>::dispatch_seq","value":"fn (&mut self, world: &World) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Dispatches the systems (except thread local systems) sequentially.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":59171,"byte_end":59192,"line_start":111,"line_end":111,"column_start":12,"column_end":33},"name":"dispatch_thread_local","qualname":"<Dispatcher>::dispatch_thread_local","value":"fn (&mut self, world: &World) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Dispatch only thread local systems sequentially.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":59573,"byte_end":59584,"line_start":121,"line_end":121,"column_start":12,"column_end":23},"name":"max_threads","qualname":"<Dispatcher>::max_threads","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" This method returns the largest amount of threads this dispatcher\n can make use of. This is mainly for debugging purposes so you can see\n how well your systems can make use of multi-threading.\n","sig":null,"attributes":[{"value":"cfg(feature = \"parallel\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":59533,"byte_end":59561,"line_start":120,"line_end":120,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":62815,"byte_end":62818,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Nil","qualname":"::dispatch::par_seq::Nil","value":"","parent":null,"children":[],"decl_id":null,"docs":" The \"leave node\" for the `Par` / `Seq` list.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":64306,"byte_end":64309,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"Par","qualname":"::dispatch::par_seq::Par","value":"Par {  }","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342}],"decl_id":null,"docs":" Runs two tasks in parallel.\n These two tasks are called `head` and `tail`\n in the following documentation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":64445,"byte_end":64448,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"new","qualname":"<Par<H, Nil>>::new","value":"fn (head: H) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Par` struct, with the tail being a no-op.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":64645,"byte_end":64649,"line_start":93,"line_end":93,"column_start":12,"column_end":16},"name":"with","qualname":"<Par<H, Nil>>::with","value":"fn <T> (self, sys: T) -> Par<Par<H, T>, Nil>","parent":null,"children":[],"decl_id":null,"docs":" Adds `sys` as the second job and returns a new `Par` struct\n with the previous struct as head and a no-op tail.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":67803,"byte_end":67809,"line_start":209,"line_end":209,"column_start":12,"column_end":18},"name":"ParSeq","qualname":"::dispatch::par_seq::ParSeq","value":"ParSeq {  }","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354}],"decl_id":null,"docs":" A dispatcher intended to be used with\n `Par` and `Seq`  structures.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":68069,"byte_end":68072,"line_start":222,"line_end":222,"column_start":12,"column_end":15},"name":"new","qualname":"<ParSeq<P, T>>::new","value":"fn (run: T, pool: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `ParSeq` dispatcher.\n `run` is usually created by using the `par!` / `seq!`\n macros.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":68278,"byte_end":68283,"line_start":228,"line_end":228,"column_start":12,"column_end":17},"name":"setup","qualname":"<ParSeq<P, T>>::setup","value":"fn (&mut self, world: &mut World) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets up `world` for `dispatch`ing. This will add default values for\n required resources by calling `System::setup`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":68592,"byte_end":68600,"line_start":237,"line_end":237,"column_start":12,"column_end":20},"name":"dispatch","qualname":"<ParSeq<P, T>>::dispatch","value":"fn (&mut self, world: &World) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Dispatches the systems using `world`.\n This doesn't call any virtual functions.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":69124,"byte_end":69135,"line_start":258,"line_end":258,"column_start":11,"column_end":22},"name":"RunWithPool","qualname":"::dispatch::par_seq::RunWithPool","value":"RunWithPool<'a>","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374}],"decl_id":null,"docs":" Similar to `RunNow` except additionally taking in a rayon::ThreadPool\n for parallelism.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":69200,"byte_end":69205,"line_start":260,"line_end":260,"column_start":8,"column_end":13},"name":"setup","qualname":"::dispatch::par_seq::RunWithPool::setup","value":"fn (&mut self, world: &mut World) -> ()","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Sets up `World` for a later call to `run`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":69631,"byte_end":69634,"line_start":271,"line_end":271,"column_start":8,"column_end":11},"name":"run","qualname":"::dispatch::par_seq::RunWithPool::run","value":"fn (&mut self, world: &'a World, pool: &ThreadPool) -> ()","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Runs the system/group of systems. Possibly in parallel depending\n on how the structure is set up.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":69788,"byte_end":69793,"line_start":275,"line_end":275,"column_start":8,"column_end":13},"name":"reads","qualname":"::dispatch::par_seq::RunWithPool::reads","value":"fn (&self, reads: &mut Vec<ResourceId>) -> ()","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Accumulates the necessary read/shared resources from the\n systems in this group.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":69939,"byte_end":69945,"line_start":279,"line_end":279,"column_start":8,"column_end":14},"name":"writes","qualname":"::dispatch::par_seq::RunWithPool::writes","value":"fn (&self, writes: &mut Vec<ResourceId>) -> ()","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Accumulates the necessary write/exclusive resources from the\n systems in this group.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":71519,"byte_end":71522,"line_start":345,"line_end":345,"column_start":12,"column_end":15},"name":"Seq","qualname":"::dispatch::par_seq::Seq","value":"Seq {  }","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398}],"decl_id":null,"docs":" Runs two tasks sequentially.\n These two tasks are called `head` and `tail`\n in the following documentation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":71658,"byte_end":71661,"line_start":352,"line_end":352,"column_start":12,"column_end":15},"name":"new","qualname":"<Seq<H, Nil>>::new","value":"fn (head: H) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Seq` struct, with the tail being a no-op.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":71858,"byte_end":71862,"line_start":358,"line_end":358,"column_start":12,"column_end":16},"name":"with","qualname":"<Seq<H, Nil>>::with","value":"fn <T> (self, sys: T) -> Seq<Seq<H, T>, Nil>","parent":null,"children":[],"decl_id":null,"docs":" Adds `sys` as the second job and returns a new `Seq` struct\n with the previous struct as head and a no-op tail.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":92498,"byte_end":92506,"line_start":49,"line_end":49,"column_start":18,"column_end":26},"name":"CastFrom","qualname":"::meta::CastFrom","value":"CastFrom<T>","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":513}],"decl_id":null,"docs":" Helper trait for the `MetaTable`.\n This trait is required to be implemented for a trait to be compatible with\n the meta table.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":92579,"byte_end":92583,"line_start":51,"line_end":51,"column_start":8,"column_end":12},"name":"cast","qualname":"::meta::CastFrom::cast","value":"fn (t: &T) -> &Self","parent":{"krate":0,"index":510},"children":[],"decl_id":null,"docs":" Casts an immutable `T` reference to a trait object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":92666,"byte_end":92674,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::meta::CastFrom::cast_mut","value":"fn (t: &mut T) -> &mut Self","parent":{"krate":0,"index":510},"children":[],"decl_id":null,"docs":" Casts a mutable `T` reference to a trait object.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":92751,"byte_end":92759,"line_start":58,"line_end":58,"column_start":12,"column_end":20},"name":"MetaIter","qualname":"::meta::MetaIter","value":"MetaIter {  }","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521}],"decl_id":null,"docs":" An iterator for the `MetaTable`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":94587,"byte_end":94598,"line_start":123,"line_end":123,"column_start":12,"column_end":23},"name":"MetaIterMut","qualname":"::meta::MetaIterMut","value":"MetaIterMut {  }","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546}],"decl_id":null,"docs":" A mutable iterator for the `MetaTable`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":97435,"byte_end":97444,"line_start":232,"line_end":232,"column_start":12,"column_end":21},"name":"MetaTable","qualname":"::meta::MetaTable","value":"MetaTable {  }","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560}],"decl_id":null,"docs":" The `MetaTable` which allows to store object-safe trait implementations for\n resources.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":97696,"byte_end":97699,"line_start":242,"line_end":242,"column_start":12,"column_end":15},"name":"new","qualname":"<MetaTable<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `MetaTable`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":98006,"byte_end":98014,"line_start":251,"line_end":251,"column_start":12,"column_end":20},"name":"register","qualname":"<MetaTable<T>>::register","value":"fn <R> (&mut self, r: &R) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Registers a resource `R` that implements the trait `T`.\n This just needs some instance of type `R` to retrieve the vtable.\n It doesn't have to be the same object you're calling `get` with later.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":99173,"byte_end":99176,"line_start":291,"line_end":291,"column_start":12,"column_end":15},"name":"get","qualname":"<MetaTable<T>>::get","value":"fn <'a> (&self, res: &'a dyn Resource) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Tries to convert `world` to a trait object of type `&T`.\n If `world` doesn't have an implementation for `T` (or it wasn't\n registered), this will return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":99623,"byte_end":99630,"line_start":302,"line_end":302,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MetaTable<T>>::get_mut","value":"fn <'a> (&self, res: &'a dyn Resource) -> Option<&'a mut T>","parent":null,"children":[],"decl_id":null,"docs":" Tries to convert `world` to a trait object of type `&mut T`.\n If `world` doesn't have an implementation for `T` (or it wasn't\n registered), this will return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":99984,"byte_end":99988,"line_start":311,"line_end":311,"column_start":12,"column_end":16},"name":"iter","qualname":"<MetaTable<T>>::iter","value":"fn <'a> (&'a self, res: &'a World) -> MetaIter<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Iterates all resources that implement `T` and were registered.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":100301,"byte_end":100309,"line_start":322,"line_end":322,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<MetaTable<T>>::iter_mut","value":"fn <'a> (&'a self, res: &'a World) -> MetaIterMut<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Iterates all resources that implement `T` and were registered mutably.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":104790,"byte_end":104798,"line_start":11,"line_end":11,"column_start":11,"column_end":19},"name":"Accessor","qualname":"::system::Accessor","value":"Accessor: Sized","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593}],"decl_id":null,"docs":" A trait for accessing read/write multiple resources from a system. This can\n be used to create dynamic systems that don't specify what they fetch at\n compile-time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":104995,"byte_end":105002,"line_start":15,"line_end":15,"column_start":8,"column_end":15},"name":"try_new","qualname":"::system::Accessor::try_new","value":"fn () -> Option<Self>","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" Tries to create a new instance of this type. This one returns `Some` in\n case there is a default, otherwise the system needs to override\n `System::accessor`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":105497,"byte_end":105502,"line_start":31,"line_end":31,"column_start":8,"column_end":13},"name":"reads","qualname":"::system::Accessor::reads","value":"fn (&self) -> Vec<ResourceId>","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" A list of [`ResourceId`]s the bundle\n needs read access to in order to\n build the target resource bundle.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":106006,"byte_end":106012,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"writes","qualname":"::system::Accessor::writes","value":"fn (&self) -> Vec<ResourceId>","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" A list of [`ResourceId`]s the bundle\n needs write access to in order to\n build the target resource bundle.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":106708,"byte_end":106711,"line_start":86,"line_end":86,"column_start":5,"column_end":8},"name":"Ref","qualname":"::system::AccessorCow::Ref","value":"AccessorCow::Ref(&'b AccessorTy<'a, T>)","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" A reference to an accessor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":106767,"byte_end":106772,"line_start":88,"line_end":88,"column_start":5,"column_end":10},"name":"Owned","qualname":"::system::AccessorCow::Owned","value":"AccessorCow::Owned(AccessorTy<'a, T>)","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" An owned accessor.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":106570,"byte_end":106581,"line_start":79,"line_end":79,"column_start":10,"column_end":21},"name":"AccessorCow","qualname":"::system::AccessorCow","value":"AccessorCow::{Ref, Owned}","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":610}],"decl_id":null,"docs":" Either an `Accessor` of the system `T` or a reference to it.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":107328,"byte_end":107334,"line_start":111,"line_end":111,"column_start":11,"column_end":17},"name":"RunNow","qualname":"::system::RunNow","value":"RunNow<'a>","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626}],"decl_id":null,"docs":" Trait for fetching data and running systems. Automatically implemented for\n systems.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":107650,"byte_end":107657,"line_start":120,"line_end":120,"column_start":8,"column_end":15},"name":"run_now","qualname":"::system::RunNow::run_now","value":"fn (&mut self, world: &'a World) -> ()","parent":{"krate":0,"index":622},"children":[],"decl_id":null,"docs":" Runs the system now.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":107751,"byte_end":107756,"line_start":123,"line_end":123,"column_start":8,"column_end":13},"name":"setup","qualname":"::system::RunNow::setup","value":"fn (&mut self, world: &mut World) -> ()","parent":{"krate":0,"index":622},"children":[],"decl_id":null,"docs":" Sets up `World` for a later call to `run_now`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":107996,"byte_end":108003,"line_start":129,"line_end":129,"column_start":8,"column_end":15},"name":"dispose","qualname":"::system::RunNow::dispose","value":"fn (self: Box<Self>, world: &mut World) -> ()","parent":{"krate":0,"index":622},"children":[],"decl_id":null,"docs":" Performs clean up that requires resources from the `World`.\n This commonly removes components from `world` which depend on external\n resources.\n","sig":null,"attributes":[{"value":"allow(clippy :: boxed_local)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":107959,"byte_end":107988,"line_start":128,"line_end":128,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1124},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":108544,"byte_end":108553,"line_start":156,"line_end":156,"column_start":5,"column_end":14},"name":"VeryShort","qualname":"::system::RunningTime::VeryShort","value":"RunningTime::VeryShort","parent":{"krate":0,"index":1123},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1127},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":108563,"byte_end":108568,"line_start":157,"line_end":157,"column_start":5,"column_end":10},"name":"Short","qualname":"::system::RunningTime::Short","value":"RunningTime::Short","parent":{"krate":0,"index":1123},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":108578,"byte_end":108585,"line_start":158,"line_end":158,"column_start":5,"column_end":12},"name":"Average","qualname":"::system::RunningTime::Average","value":"RunningTime::Average","parent":{"krate":0,"index":1123},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":108595,"byte_end":108599,"line_start":159,"line_end":159,"column_start":5,"column_end":9},"name":"Long","qualname":"::system::RunningTime::Long","value":"RunningTime::Long","parent":{"krate":0,"index":1123},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1136},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":108609,"byte_end":108617,"line_start":160,"line_end":160,"column_start":5,"column_end":13},"name":"VeryLong","qualname":"::system::RunningTime::VeryLong","value":"RunningTime::VeryLong","parent":{"krate":0,"index":1123},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1123},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":108526,"byte_end":108537,"line_start":155,"line_end":155,"column_start":10,"column_end":21},"name":"RunningTime","qualname":"::system::RunningTime","value":"RunningTime::{VeryShort, Short, Average, Long, VeryLong}","parent":null,"children":[{"krate":0,"index":1124},{"krate":0,"index":1127},{"krate":0,"index":1130},{"krate":0,"index":1133},{"krate":0,"index":1136}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u8)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":108452,"byte_end":108463,"line_start":152,"line_end":152,"column_start":1,"column_end":12}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":108464,"byte_end":108486,"line_start":153,"line_end":153,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":108741,"byte_end":108747,"line_start":166,"line_end":166,"column_start":11,"column_end":17},"name":"System","qualname":"::system::System","value":"System<'a>","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":641}],"decl_id":null,"docs":" A `System`, executed with a set of required [`Resource`]s.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":109092,"byte_end":109102,"line_start":174,"line_end":174,"column_start":10,"column_end":20},"name":"SystemData","qualname":"::system::System::SystemData","value":"type SystemData: DynamicSystemData<'a>;","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" The resource bundle required to execute this system.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":109202,"byte_end":109205,"line_start":178,"line_end":178,"column_start":8,"column_end":11},"name":"run","qualname":"::system::System::run","value":"fn (&mut self, data: Self::SystemData) -> ()","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Executes the system with the required system\n data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":109466,"byte_end":109478,"line_start":185,"line_end":185,"column_start":8,"column_end":20},"name":"running_time","qualname":"::system::System::running_time","value":"fn (&self) -> RunningTime","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Returns a hint how long the system needs for running.\n This is used to optimize the way they're executed (might\n allow more parallelization).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":109599,"byte_end":109607,"line_start":190,"line_end":190,"column_start":8,"column_end":16},"name":"accessor","qualname":"::system::System::accessor","value":"fn <'b> (&'b self) -> AccessorCow<'a, 'b, Self>","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Return the accessor from the [`SystemData`].\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":109861,"byte_end":109866,"line_start":197,"line_end":197,"column_start":8,"column_end":13},"name":"setup","qualname":"::system::System::setup","value":"fn (&mut self, world: &mut World) -> ()","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Sets up the `World` using `Self::SystemData::setup`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":110159,"byte_end":110166,"line_start":204,"line_end":204,"column_start":8,"column_end":15},"name":"dispose","qualname":"::system::System::dispose","value":"fn (self, world: &mut World) -> ()","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Performs clean up that requires resources from the `World`.\n This commonly removes components from `world` which depend on external\n resources.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":111085,"byte_end":111095,"line_start":235,"line_end":235,"column_start":11,"column_end":21},"name":"SystemData","qualname":"::system::SystemData","value":"SystemData<'a>","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647}],"decl_id":null,"docs":" A static system data that can specify its dependencies at statically (at\n compile-time). Most system data is a `SystemData`, the `DynamicSystemData`\n type is only needed for very special setups.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":111175,"byte_end":111180,"line_start":237,"line_end":237,"column_start":8,"column_end":13},"name":"setup","qualname":"::system::SystemData::setup","value":"fn (world: &mut World) -> ()","parent":{"krate":0,"index":642},"children":[],"decl_id":null,"docs":" Sets up the system data for fetching it from the `World`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":111410,"byte_end":111415,"line_start":242,"line_end":242,"column_start":8,"column_end":13},"name":"fetch","qualname":"::system::SystemData::fetch","value":"fn (world: &'a World) -> Self","parent":{"krate":0,"index":642},"children":[],"decl_id":null,"docs":" Fetches the system data from `World`. Note that this is only specified\n for one concrete lifetime `'a`, you need to implement the\n `SystemData` trait for every possible lifetime.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":111603,"byte_end":111608,"line_start":247,"line_end":247,"column_start":8,"column_end":13},"name":"reads","qualname":"::system::SystemData::reads","value":"fn () -> Vec<ResourceId>","parent":{"krate":0,"index":642},"children":[],"decl_id":null,"docs":" Returns all read dependencies as fetched from `Self::fetch`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":111792,"byte_end":111798,"line_start":252,"line_end":252,"column_start":8,"column_end":14},"name":"writes","qualname":"::system::SystemData::writes","value":"fn () -> Vec<ResourceId>","parent":{"krate":0,"index":642},"children":[],"decl_id":null,"docs":" Returns all write dependencies as fetched from `Self::fetch`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1144},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":112437,"byte_end":112451,"line_start":286,"line_end":286,"column_start":12,"column_end":26},"name":"StaticAccessor","qualname":"::system::StaticAccessor","value":"StaticAccessor {  }","parent":null,"children":[{"krate":0,"index":1146}],"decl_id":null,"docs":" The static accessor that is used for `SystemData`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":113027,"byte_end":113044,"line_start":313,"line_end":313,"column_start":11,"column_end":28},"name":"DynamicSystemData","qualname":"::system::DynamicSystemData","value":"DynamicSystemData<'a>","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670}],"decl_id":null,"docs":" A struct implementing system data indicates that it bundles some resources\n which are required for the execution.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":113181,"byte_end":113189,"line_start":316,"line_end":316,"column_start":10,"column_end":18},"name":"Accessor","qualname":"::system::DynamicSystemData::Accessor","value":"type Accessor: Accessor;","parent":{"krate":0,"index":666},"children":[],"decl_id":null,"docs":" The accessor of the `SystemData`, which specifies the read and write\n dependencies and does the fetching.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":113264,"byte_end":113269,"line_start":319,"line_end":319,"column_start":8,"column_end":13},"name":"setup","qualname":"::system::DynamicSystemData::setup","value":"fn (accessor: &Self::Accessor, world: &mut World) -> ()","parent":{"krate":0,"index":666},"children":[],"decl_id":null,"docs":" Sets up `World` for fetching this system data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":113865,"byte_end":113870,"line_start":337,"line_end":337,"column_start":8,"column_end":13},"name":"fetch","qualname":"::system::DynamicSystemData::fetch","value":"fn (access: &Self::Accessor, world: &'a World) -> Self","parent":{"krate":0,"index":666},"children":[],"decl_id":null,"docs":" Creates a new resource bundle\n by fetching the required resources\n from the [`World`] struct.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":139630,"byte_end":139634,"line_start":19,"line_end":19,"column_start":12,"column_end":16},"name":"Read","qualname":"::world::data::Read","value":"Read {  }","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729}],"decl_id":null,"docs":" Allows to fetch a resource in a system immutably.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":140713,"byte_end":140718,"line_start":74,"line_end":74,"column_start":12,"column_end":17},"name":"Write","qualname":"::world::data::Write","value":"Write {  }","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754}],"decl_id":null,"docs":" Allows to fetch a resource in a system mutably.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":795},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":142737,"byte_end":142747,"line_start":176,"line_end":176,"column_start":10,"column_end":20},"name":"ReadExpect","qualname":"::world::data::ReadExpect","value":"Read<'a, T, PanicHandler>","parent":null,"children":[],"decl_id":null,"docs":" Allows to fetch a resource in a system immutably.\n **This will panic if the resource does not exist.**\n Usage of `Read` or `Option<Read>` is therefore recommended.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":143118,"byte_end":143129,"line_start":184,"line_end":184,"column_start":10,"column_end":21},"name":"WriteExpect","qualname":"::world::data::WriteExpect","value":"Write<'a, T, PanicHandler>","parent":null,"children":[],"decl_id":null,"docs":" Allows to fetch a resource in a system mutably.\n **This will panic if the resource does not exist.**\n Usage of `Write` or `Option<Write>` is therefore recommended.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":815},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\entry.rs","byte_start":143767,"byte_end":143772,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"Entry","qualname":"::world::entry::Entry","value":"Entry {  }","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819}],"decl_id":null,"docs":" An entry to a resource of the `World` struct.\n This is similar to the Entry API found in the standard library.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\entry.rs","byte_start":144142,"byte_end":144151,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn (self, v: T) -> FetchMut<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns this entry's value, inserts and returns `v` otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\entry.rs","byte_start":144341,"byte_end":144355,"line_start":46,"line_end":46,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"fn <F> (self, f: F) -> FetchMut<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns this entry's value, inserts and returns the return value of `f`\n otherwise.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":836},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\setup.rs","byte_start":145976,"byte_end":145991,"line_start":27,"line_end":27,"column_start":12,"column_end":27},"name":"DefaultProvider","qualname":"::world::setup::DefaultProvider","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `SetupHandler` that simply uses the default implementation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\setup.rs","byte_start":146228,"byte_end":146240,"line_start":39,"line_end":39,"column_start":11,"column_end":23},"name":"SetupHandler","qualname":"::world::setup::SetupHandler","value":"SetupHandler<T>: Sized","parent":null,"children":[{"krate":0,"index":843}],"decl_id":null,"docs":" A setup handler performing the fetching of `T`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\setup.rs","byte_start":146302,"byte_end":146307,"line_start":41,"line_end":41,"column_start":8,"column_end":13},"name":"setup","qualname":"::world::setup::SetupHandler::setup","value":"fn (world: &mut World) -> ()","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":" Sets up `World` for fetching `T`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":844},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\setup.rs","byte_start":146614,"byte_end":146626,"line_start":50,"line_end":50,"column_start":12,"column_end":24},"name":"PanicHandler","qualname":"::world::setup::PanicHandler","value":"","parent":null,"children":[],"decl_id":null,"docs":" A setup handler that simply does nothing and thus will cause a panic on\n fetching. The panic will provide the type name if the `nightly` feature of\n shred is enabled.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":849},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":117720,"byte_end":117725,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"Fetch","qualname":"::world::Fetch","value":"Fetch {  }","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853}],"decl_id":null,"docs":" Allows to fetch a resource in a system immutably.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":863},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":118378,"byte_end":118386,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"FetchMut","qualname":"::world::FetchMut","value":"FetchMut {  }","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867}],"decl_id":null,"docs":" Allows to fetch a resource in a system mutably.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":118999,"byte_end":119007,"line_start":98,"line_end":98,"column_start":11,"column_end":19},"name":"Resource","qualname":"::world::Resource","value":"Resource: Any + Send + Sync + 'static","parent":null,"children":[],"decl_id":null,"docs":" A resource is a data slot which lives in the `World` can only be accessed\n according to Rust's typical borrowing model (one writer xor multiple\n readers).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1673},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":119794,"byte_end":119804,"line_start":121,"line_end":121,"column_start":12,"column_end":22},"name":"ResourceId","qualname":"::world::ResourceId","value":"ResourceId {  }","parent":null,"children":[{"krate":0,"index":1674},{"krate":0,"index":1675}],"decl_id":null,"docs":" The id of a [`Resource`], which simply wraps a type id and a \"dynamic ID\".\n The \"dynamic ID\" is usually just left `0`, and, unless such documentation\n says otherwise, other libraries will assume that it is always `0`; non-zero\n IDs are only used for special resource types that are specifically defined\n in a more dynamic way, such that resource types can essentially be created\n at run time, without having different static types.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":119948,"byte_end":119951,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"new","qualname":"<ResourceId>::new","value":"fn <T> () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new resource id from a given type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":119927,"byte_end":119936,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":120110,"byte_end":120122,"line_start":135,"line_end":135,"column_start":12,"column_end":24},"name":"from_type_id","qualname":"<ResourceId>::from_type_id","value":"fn (type_id: TypeId) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new resource id from a raw type ID.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":120089,"byte_end":120098,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":120745,"byte_end":120764,"line_start":149,"line_end":149,"column_start":12,"column_end":31},"name":"new_with_dynamic_id","qualname":"<ResourceId>::new_with_dynamic_id","value":"fn <T> (dynamic_id: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new resource id from a given type and a `dynamic_id`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":120724,"byte_end":120733,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":121021,"byte_end":121048,"line_start":156,"line_end":156,"column_start":12,"column_end":39},"name":"from_type_id_and_dynamic_id","qualname":"<ResourceId>::from_type_id_and_dynamic_id","value":"fn (type_id: TypeId, dynamic_id: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new resource id from a raw type ID and a \"dynamic ID\" (see type\n documentation).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":121000,"byte_end":121009,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1700},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":122282,"byte_end":122287,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"World","qualname":"::world::World","value":"World {  }","parent":null,"children":[{"krate":0,"index":1701}],"decl_id":null,"docs":" A [Resource] container, which provides methods to insert, access and manage\n the contained resources.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":122521,"byte_end":122526,"line_start":203,"line_end":203,"column_start":12,"column_end":17},"name":"empty","qualname":"<World>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty resource container.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":123180,"byte_end":123186,"line_start":229,"line_end":229,"column_start":12,"column_end":18},"name":"insert","qualname":"<World>::insert","value":"fn <R> (&mut self, r: R) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a resource into this container. If the resource existed before,\n it will be overwritten.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":123775,"byte_end":123781,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"remove","qualname":"<World>::remove","value":"fn <R> (&mut self) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Removes a resource of type `R` from the `World` and returns its\n ownership to the caller. In case there is no such resource in this\n `World`, `None` will be returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":123988,"byte_end":123997,"line_start":252,"line_end":252,"column_start":12,"column_end":21},"name":"has_value","qualname":"<World>::has_value","value":"fn <R> (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the specified resource type `R` exists in `self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":124192,"byte_end":124205,"line_start":260,"line_end":260,"column_start":12,"column_end":25},"name":"has_value_raw","qualname":"<World>::has_value_raw","value":"fn (&self, id: ResourceId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the specified resource type exists in `self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":124355,"byte_end":124360,"line_start":265,"line_end":265,"column_start":12,"column_end":17},"name":"entry","qualname":"<World>::entry","value":"fn <R> (&mut self) -> Entry<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns an entry for the resource with type `R`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":125279,"byte_end":125290,"line_start":294,"line_end":294,"column_start":12,"column_end":23},"name":"system_data","qualname":"<World>::system_data","value":"fn <'a, T> (&'a self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets `SystemData` `T` from the `World`. This can be used to retrieve\n data just like in [System](crate::System)s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":126623,"byte_end":126628,"line_start":338,"line_end":338,"column_start":12,"column_end":17},"name":"setup","qualname":"<World>::setup","value":"fn <'a, T> (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets up system data `T` for fetching afterwards.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":128426,"byte_end":128430,"line_start":392,"line_end":392,"column_start":12,"column_end":16},"name":"exec","qualname":"<World>::exec","value":"fn <'a, F, R, T> (&'a mut self, f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Executes `f` once, right now and with the specified system data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":128847,"byte_end":128852,"line_start":408,"line_end":408,"column_start":12,"column_end":17},"name":"fetch","qualname":"<World>::fetch","value":"fn <T> (&self) -> Fetch<T>","parent":null,"children":[],"decl_id":null,"docs":" Fetches the resource with the specified type `T` or panics if it doesn't\n exist.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":129425,"byte_end":129434,"line_start":426,"line_end":426,"column_start":12,"column_end":21},"name":"try_fetch","qualname":"<World>::try_fetch","value":"fn <T> (&self) -> Option<Fetch<T>>","parent":null,"children":[],"decl_id":null,"docs":" Like `fetch`, but returns an `Option` instead of inserting a default\n value in case the resource does not exist.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":130054,"byte_end":130069,"line_start":447,"line_end":447,"column_start":12,"column_end":27},"name":"try_fetch_by_id","qualname":"<World>::try_fetch_by_id","value":"fn <T> (&self, id: ResourceId) -> Option<Fetch<T>>","parent":null,"children":[],"decl_id":null,"docs":" Like `try_fetch`, but fetches the resource by its `ResourceId` which\n allows using a dynamic ID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":130609,"byte_end":130618,"line_start":467,"line_end":467,"column_start":12,"column_end":21},"name":"fetch_mut","qualname":"<World>::fetch_mut","value":"fn <T> (&self) -> FetchMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Fetches the resource with the specified type `T` mutably.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":130894,"byte_end":130907,"line_start":476,"line_end":476,"column_start":12,"column_end":25},"name":"try_fetch_mut","qualname":"<World>::try_fetch_mut","value":"fn <T> (&self) -> Option<FetchMut<T>>","parent":null,"children":[],"decl_id":null,"docs":" Like `fetch_mut`, but returns an `Option` instead of inserting a default\n value in case the resource does not exist.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":131544,"byte_end":131563,"line_start":497,"line_end":497,"column_start":12,"column_end":31},"name":"try_fetch_mut_by_id","qualname":"<World>::try_fetch_mut_by_id","value":"fn <T> (&self, id: ResourceId) -> Option<FetchMut<T>>","parent":null,"children":[],"decl_id":null,"docs":" Like `try_fetch_mut`, but fetches the resource by its `ResourceId` which\n allows using a dynamic ID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":132166,"byte_end":132178,"line_start":517,"line_end":517,"column_start":12,"column_end":24},"name":"insert_by_id","qualname":"<World>::insert_by_id","value":"fn <R> (&mut self, id: ResourceId, r: R) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Internal function for inserting resources, should only be used if you\n know what you're doing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":132673,"byte_end":132685,"line_start":534,"line_end":534,"column_start":12,"column_end":24},"name":"remove_by_id","qualname":"<World>::remove_by_id","value":"fn <R> (&mut self, id: ResourceId) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Internal function for removing resources, should only be used if you\n know what you're doing.","sig":null,"attributes":[{"value":"allow(clippy :: redundant_closure)","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":132800,"byte_end":132836,"line_start":539,"line_end":539,"column_start":9,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":133229,"byte_end":133247,"line_start":553,"line_end":553,"column_start":12,"column_end":30},"name":"try_fetch_internal","qualname":"<World>::try_fetch_internal","value":"fn (&self, id: ResourceId) -> Option<&TrustCell<Box<dyn Resource>>>","parent":null,"children":[],"decl_id":null,"docs":" Internal function for fetching resources, should only be used if you\n know what you're doing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":133474,"byte_end":133481,"line_start":559,"line_end":559,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<World>::get_mut","value":"fn <T> (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a resource without fetching, which is cheaper, but only\n available with `&mut self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":133767,"byte_end":133778,"line_start":566,"line_end":566,"column_start":12,"column_end":23},"name":"get_mut_raw","qualname":"<World>::get_mut_raw","value":"fn (&mut self, id: ResourceId) -> Option<&mut dyn Resource>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a resource without fetching, which is cheaper, but only\n available with `&mut self`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2665,"byte_end":2674,"line_start":93,"line_end":93,"column_start":10,"column_end":19},"name":"Resources","qualname":"::Resources","value":"World","parent":null,"children":[],"decl_id":null,"docs":" Alias for `World` for easier migration to the new version. Will be removed\n in the future.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.8.0\", note = \"renamed to `World`\")","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":2596,"byte_end":2655,"line_start":92,"line_end":92,"column_start":1,"column_end":60}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":3716,"byte_end":3729,"line_start":39,"line_end":39,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":3879,"byte_end":3892,"line_start":45,"line_end":45,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":4344,"byte_end":4347,"line_start":61,"line_end":61,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":6891,"byte_end":6894,"line_start":128,"line_end":128,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":7011,"byte_end":7014,"line_start":136,"line_end":136,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":7139,"byte_end":7142,"line_start":142,"line_end":142,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":7569,"byte_end":7575,"line_start":161,"line_end":161,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":10241,"byte_end":10247,"line_start":230,"line_end":230,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":10368,"byte_end":10374,"line_start":238,"line_end":238,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":10481,"byte_end":10487,"line_start":244,"line_end":244,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":10748,"byte_end":10757,"line_start":257,"line_end":257,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":14202,"byte_end":14211,"line_start":371,"line_end":371,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":14253,"byte_end":14262,"line_start":373,"line_end":373,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":21907,"byte_end":21922,"line_start":35,"line_end":35,"column_start":13,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":24865,"byte_end":24869,"line_start":145,"line_end":145,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":26921,"byte_end":26934,"line_start":14,"line_end":14,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":27112,"byte_end":27125,"line_start":21,"line_end":21,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":27578,"byte_end":27597,"line_start":39,"line_end":39,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":30651,"byte_end":30679,"line_start":107,"line_end":107,"column_start":42,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":30938,"byte_end":30966,"line_start":118,"line_end":118,"column_start":25,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":31608,"byte_end":31636,"line_start":141,"line_end":141,"column_start":30,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":44843,"byte_end":44860,"line_start":104,"line_end":104,"column_start":14,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":242},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":54715,"byte_end":54732,"line_start":398,"line_end":398,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":55423,"byte_end":55440,"line_start":423,"line_end":423,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":56187,"byte_end":56197,"line_start":19,"line_end":19,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":59766,"byte_end":59776,"line_start":130,"line_end":130,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":64096,"byte_end":64099,"line_start":71,"line_end":71,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":64355,"byte_end":64358,"line_start":85,"line_end":85,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":67857,"byte_end":67863,"line_start":214,"line_end":214,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":68717,"byte_end":68723,"line_start":242,"line_end":242,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":70019,"byte_end":70020,"line_start":282,"line_end":282,"column_start":33,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":70559,"byte_end":70562,"line_start":307,"line_end":307,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":71568,"byte_end":71571,"line_start":350,"line_end":350,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":72095,"byte_end":72098,"line_start":369,"line_end":369,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\stage.rs","byte_start":76083,"byte_end":76091,"line_start":59,"line_end":59,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\stage.rs","byte_start":76622,"byte_end":76627,"line_start":83,"line_end":83,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\stage.rs","byte_start":78050,"byte_end":78063,"line_start":141,"line_end":141,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":91705,"byte_end":91714,"line_start":13,"line_end":13,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":91762,"byte_end":91771,"line_start":15,"line_end":15,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":92972,"byte_end":92980,"line_start":67,"line_end":67,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":93870,"byte_end":93873,"line_start":98,"line_end":98,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":94814,"byte_end":94825,"line_start":132,"line_end":132,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":97635,"byte_end":97644,"line_start":240,"line_end":240,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":573},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":100560,"byte_end":100569,"line_start":333,"line_end":333,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":106287,"byte_end":106298,"line_start":64,"line_end":64,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":106822,"byte_end":106833,"line_start":91,"line_end":91,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":108101,"byte_end":108102,"line_start":134,"line_end":134,"column_start":28,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":111862,"byte_end":111863,"line_start":255,"line_end":255,"column_start":39,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":112521,"byte_end":112535,"line_start":290,"line_end":290,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":113965,"byte_end":113976,"line_start":340,"line_end":340,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":139751,"byte_end":139755,"line_start":24,"line_end":24,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":139909,"byte_end":139913,"line_start":35,"line_end":35,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":140090,"byte_end":140094,"line_start":44,"line_end":44,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":140838,"byte_end":140843,"line_start":79,"line_end":79,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":140987,"byte_end":140992,"line_start":90,"line_end":90,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":141143,"byte_end":141148,"line_start":99,"line_end":99,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":141329,"byte_end":141334,"line_start":108,"line_end":108,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":141743,"byte_end":141749,"line_start":132,"line_end":132,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":142088,"byte_end":142094,"line_start":151,"line_end":151,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\entry.rs","byte_start":143896,"byte_end":143901,"line_start":32,"line_end":32,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\setup.rs","byte_start":146022,"byte_end":146037,"line_start":29,"line_end":29,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\setup.rs","byte_start":146657,"byte_end":146669,"line_start":52,"line_end":52,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":117831,"byte_end":117836,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":118005,"byte_end":118010,"line_start":53,"line_end":53,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":118499,"byte_end":118507,"line_start":75,"line_end":75,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":871},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":118679,"byte_end":118687,"line_start":86,"line_end":86,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":119195,"byte_end":119196,"line_start":110,"line_end":110,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":119857,"byte_end":119867,"line_start":126,"line_end":126,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":889},{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":122364,"byte_end":122369,"line_start":199,"line_end":199,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":903},{"krate":0,"index":906},{"krate":0,"index":909},{"krate":0,"index":914},{"krate":0,"index":917},{"krate":0,"index":920},{"krate":0,"index":923},{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\lib.rs","byte_start":1538,"byte_end":1542,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":12}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":3716,"byte_end":3729,"line_start":39,"line_end":39,"column_start":18,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":988},"to":{"krate":2,"index":7491}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":3879,"byte_end":3892,"line_start":45,"line_end":45,"column_start":16,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":988},"to":{"krate":1,"index":1623}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":4344,"byte_end":4347,"line_start":61,"line_end":61,"column_start":21,"column_end":24},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":6891,"byte_end":6894,"line_start":128,"line_end":128,"column_start":31,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1006},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":7011,"byte_end":7014,"line_start":136,"line_end":136,"column_start":30,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1006},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":7139,"byte_end":7142,"line_start":142,"line_end":142,"column_start":31,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1006},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":7569,"byte_end":7575,"line_start":161,"line_end":161,"column_start":21,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":10241,"byte_end":10247,"line_start":230,"line_end":230,"column_start":31,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1015},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":10368,"byte_end":10374,"line_start":238,"line_end":238,"column_start":34,"column_end":40},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1015},"to":{"krate":2,"index":1714}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":10481,"byte_end":10487,"line_start":244,"line_end":244,"column_start":30,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1015},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":10748,"byte_end":10757,"line_start":257,"line_end":257,"column_start":9,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1024},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":14202,"byte_end":14211,"line_start":371,"line_end":371,"column_start":25,"column_end":34},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1024},"to":{"krate":2,"index":1544}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\cell.rs","byte_start":14253,"byte_end":14262,"line_start":373,"line_end":373,"column_start":21,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1024},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":21907,"byte_end":21922,"line_start":35,"line_end":35,"column_start":13,"column_end":28},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\async_dispatcher.rs","byte_start":24865,"byte_end":24869,"line_start":145,"line_end":145,"column_start":9,"column_end":13},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":26921,"byte_end":26934,"line_start":14,"line_end":14,"column_start":6,"column_end":19},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1031},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":27112,"byte_end":27125,"line_start":21,"line_end":21,"column_start":19,"column_end":32},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1031},"to":{"krate":0,"index":590}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":27578,"byte_end":27597,"line_start":39,"line_end":39,"column_start":36,"column_end":55},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":177},"to":{"krate":0,"index":666}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":30651,"byte_end":30679,"line_start":107,"line_end":107,"column_start":42,"column_end":70},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":191},"to":{"krate":0,"index":186}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":30938,"byte_end":30966,"line_start":118,"line_end":118,"column_start":25,"column_end":53},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":191},"to":{"krate":0,"index":633}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\batch.rs","byte_start":31608,"byte_end":31636,"line_start":141,"line_end":141,"column_start":30,"column_end":58},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":191},"to":{"krate":2,"index":1534}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":44843,"byte_end":44860,"line_start":104,"line_end":104,"column_start":14,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":54715,"byte_end":54732,"line_start":398,"line_end":398,"column_start":10,"column_end":27},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\builder.rs","byte_start":55423,"byte_end":55440,"line_start":423,"line_end":423,"column_start":29,"column_end":46},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1036},"to":{"krate":2,"index":7486}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":56187,"byte_end":56197,"line_start":19,"line_end":19,"column_start":14,"column_end":24},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\dispatcher.rs","byte_start":59766,"byte_end":59776,"line_start":130,"line_end":130,"column_start":33,"column_end":43},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":283},"to":{"krate":0,"index":622}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":64096,"byte_end":64099,"line_start":71,"line_end":71,"column_start":25,"column_end":28},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":330},"to":{"krate":0,"index":633}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":64355,"byte_end":64358,"line_start":85,"line_end":85,"column_start":9,"column_end":12},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":67857,"byte_end":67863,"line_start":214,"line_end":214,"column_start":12,"column_end":18},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":68717,"byte_end":68723,"line_start":242,"line_end":242,"column_start":31,"column_end":37},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":350},"to":{"krate":0,"index":622}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":70019,"byte_end":70020,"line_start":282,"line_end":282,"column_start":33,"column_end":34},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":377},"to":{"krate":0,"index":369}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":70559,"byte_end":70562,"line_start":307,"line_end":307,"column_start":36,"column_end":39},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":338},"to":{"krate":0,"index":369}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":71568,"byte_end":71571,"line_start":350,"line_end":350,"column_start":9,"column_end":12},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\par_seq.rs","byte_start":72095,"byte_end":72098,"line_start":369,"line_end":369,"column_start":36,"column_end":39},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":394},"to":{"krate":0,"index":369}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\stage.rs","byte_start":76083,"byte_end":76091,"line_start":59,"line_end":59,"column_start":6,"column_end":14},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\stage.rs","byte_start":76622,"byte_end":76627,"line_start":83,"line_end":83,"column_start":10,"column_end":15},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\dispatch\\stage.rs","byte_start":78050,"byte_end":78063,"line_start":141,"line_end":141,"column_start":10,"column_end":23},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":91705,"byte_end":91714,"line_start":13,"line_end":13,"column_start":25,"column_end":34},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":502},"to":{"krate":2,"index":1534}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":91762,"byte_end":91771,"line_start":15,"line_end":15,"column_start":25,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":502},"to":{"krate":2,"index":1544}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":92972,"byte_end":92980,"line_start":67,"line_end":67,"column_start":26,"column_end":34},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":514},"to":{"krate":2,"index":3510}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":93870,"byte_end":93873,"line_start":98,"line_end":98,"column_start":6,"column_end":9},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":94814,"byte_end":94825,"line_start":132,"line_end":132,"column_start":26,"column_end":37},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":539},"to":{"krate":2,"index":3510}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":97635,"byte_end":97644,"line_start":240,"line_end":240,"column_start":17,"column_end":26},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\meta.rs","byte_start":100560,"byte_end":100569,"line_start":333,"line_end":333,"column_start":21,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":555},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":104800,"byte_end":104805,"line_start":11,"line_end":11,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":590}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":106287,"byte_end":106298,"line_start":64,"line_end":64,"column_start":30,"column_end":41},"kind":{"Impl":{"id":44}},"from":{"krate":2,"index":1550},"to":{"krate":0,"index":590}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":106822,"byte_end":106833,"line_start":91,"line_end":91,"column_start":27,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":603},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":108101,"byte_end":108102,"line_start":134,"line_end":134,"column_start":28,"column_end":29},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":629},"to":{"krate":0,"index":622}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":111862,"byte_end":111863,"line_start":255,"line_end":255,"column_start":39,"column_end":40},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":650},"to":{"krate":0,"index":666}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":112521,"byte_end":112535,"line_start":290,"line_end":290,"column_start":26,"column_end":40},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1144},"to":{"krate":0,"index":590}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\system.rs","byte_start":113965,"byte_end":113976,"line_start":340,"line_end":340,"column_start":40,"column_end":51},"kind":{"Impl":{"id":49}},"from":{"krate":2,"index":1550},"to":{"krate":0,"index":642}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":139751,"byte_end":139755,"line_start":24,"line_end":24,"column_start":26,"column_end":30},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":724},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":139909,"byte_end":139913,"line_start":35,"line_end":35,"column_start":39,"column_end":43},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":724},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":140090,"byte_end":140094,"line_start":44,"line_end":44,"column_start":35,"column_end":39},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":724},"to":{"krate":0,"index":642}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":140838,"byte_end":140843,"line_start":79,"line_end":79,"column_start":26,"column_end":31},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":749},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":140987,"byte_end":140992,"line_start":90,"line_end":90,"column_start":29,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":749},"to":{"krate":2,"index":1714}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":141143,"byte_end":141148,"line_start":99,"line_end":99,"column_start":42,"column_end":47},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":749},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":141329,"byte_end":141334,"line_start":108,"line_end":108,"column_start":35,"column_end":40},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":749},"to":{"krate":0,"index":642}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":141743,"byte_end":141749,"line_start":132,"line_end":132,"column_start":35,"column_end":41},"kind":{"Impl":{"id":57}},"from":{"krate":2,"index":29045},"to":{"krate":0,"index":642}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\data.rs","byte_start":142088,"byte_end":142094,"line_start":151,"line_end":151,"column_start":35,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":2,"index":29045},"to":{"krate":0,"index":642}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\entry.rs","byte_start":143896,"byte_end":143901,"line_start":32,"line_end":32,"column_start":13,"column_end":18},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":815},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\setup.rs","byte_start":146022,"byte_end":146037,"line_start":29,"line_end":29,"column_start":29,"column_end":44},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":836},"to":{"krate":0,"index":841}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\setup.rs","byte_start":146245,"byte_end":146250,"line_start":39,"line_end":39,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":841}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\setup.rs","byte_start":146657,"byte_end":146669,"line_start":52,"line_end":52,"column_start":29,"column_end":41},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":844},"to":{"krate":0,"index":841}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":117831,"byte_end":117836,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":849},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":118005,"byte_end":118010,"line_start":53,"line_end":53,"column_start":23,"column_end":28},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":849},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":118499,"byte_end":118507,"line_start":75,"line_end":75,"column_start":23,"column_end":31},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":863},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":118679,"byte_end":118687,"line_start":86,"line_end":86,"column_start":26,"column_end":34},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":863},"to":{"krate":2,"index":1714}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":119009,"byte_end":119012,"line_start":98,"line_end":98,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":37,"index":15},"to":{"krate":0,"index":877}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":119015,"byte_end":119019,"line_start":98,"line_end":98,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":877}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":119022,"byte_end":119026,"line_start":98,"line_end":98,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":877}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":119195,"byte_end":119196,"line_start":110,"line_end":110,"column_start":22,"column_end":23},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":882},"to":{"krate":0,"index":877}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":119857,"byte_end":119867,"line_start":126,"line_end":126,"column_start":6,"column_end":16},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1673},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ollie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shred-0.9.4\\src\\world\\mod.rs","byte_start":122364,"byte_end":122369,"line_start":199,"line_end":199,"column_start":6,"column_end":11},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1700},"to":{"krate":4294967295,"index":4294967295}}]}